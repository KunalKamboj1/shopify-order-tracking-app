var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// node_modules/@shopify/polaris/build/cjs/configure.js
var require_configure = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/configure.js"(exports) {
    "use strict";
    var DEFAULT_LOCALE = "en", SUPPORTED_LOCALES = ["cs", "da", "de", "en", "es", "fi", "fr", "it", "ja", "ko", "nb", "nl", "pl", "pt-BR", "pt-PT", "sv", "th", "tr", "vi", "zh-CN", "zh-TW"];
    exports.DEFAULT_LOCALE = DEFAULT_LOCALE;
    exports.SUPPORTED_LOCALES = SUPPORTED_LOCALES;
  }
});

// node_modules/@shopify/polaris/build/cjs/types.js
var require_types = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/types.js"(exports) {
    "use strict";
    exports.Key = void 0;
    (function(Key) {
      Key[Key.Backspace = 8] = "Backspace", Key[Key.Tab = 9] = "Tab", Key[Key.Enter = 13] = "Enter", Key[Key.Shift = 16] = "Shift", Key[Key.Ctrl = 17] = "Ctrl", Key[Key.Alt = 18] = "Alt", Key[Key.Pause = 19] = "Pause", Key[Key.CapsLock = 20] = "CapsLock", Key[Key.Escape = 27] = "Escape", Key[Key.Space = 32] = "Space", Key[Key.PageUp = 33] = "PageUp", Key[Key.PageDown = 34] = "PageDown", Key[Key.End = 35] = "End", Key[Key.Home = 36] = "Home", Key[Key.LeftArrow = 37] = "LeftArrow", Key[Key.UpArrow = 38] = "UpArrow", Key[Key.RightArrow = 39] = "RightArrow", Key[Key.DownArrow = 40] = "DownArrow", Key[Key.Insert = 45] = "Insert", Key[Key.Delete = 46] = "Delete", Key[Key.Key0 = 48] = "Key0", Key[Key.Key1 = 49] = "Key1", Key[Key.Key2 = 50] = "Key2", Key[Key.Key3 = 51] = "Key3", Key[Key.Key4 = 52] = "Key4", Key[Key.Key5 = 53] = "Key5", Key[Key.Key6 = 54] = "Key6", Key[Key.Key7 = 55] = "Key7", Key[Key.Key8 = 56] = "Key8", Key[Key.Key9 = 57] = "Key9", Key[Key.KeyA = 65] = "KeyA", Key[Key.KeyB = 66] = "KeyB", Key[Key.KeyC = 67] = "KeyC", Key[Key.KeyD = 68] = "KeyD", Key[Key.KeyE = 69] = "KeyE", Key[Key.KeyF = 70] = "KeyF", Key[Key.KeyG = 71] = "KeyG", Key[Key.KeyH = 72] = "KeyH", Key[Key.KeyI = 73] = "KeyI", Key[Key.KeyJ = 74] = "KeyJ", Key[Key.KeyK = 75] = "KeyK", Key[Key.KeyL = 76] = "KeyL", Key[Key.KeyM = 77] = "KeyM", Key[Key.KeyN = 78] = "KeyN", Key[Key.KeyO = 79] = "KeyO", Key[Key.KeyP = 80] = "KeyP", Key[Key.KeyQ = 81] = "KeyQ", Key[Key.KeyR = 82] = "KeyR", Key[Key.KeyS = 83] = "KeyS", Key[Key.KeyT = 84] = "KeyT", Key[Key.KeyU = 85] = "KeyU", Key[Key.KeyV = 86] = "KeyV", Key[Key.KeyW = 87] = "KeyW", Key[Key.KeyX = 88] = "KeyX", Key[Key.KeyY = 89] = "KeyY", Key[Key.KeyZ = 90] = "KeyZ", Key[Key.LeftMeta = 91] = "LeftMeta", Key[Key.RightMeta = 92] = "RightMeta", Key[Key.Select = 93] = "Select", Key[Key.Numpad0 = 96] = "Numpad0", Key[Key.Numpad1 = 97] = "Numpad1", Key[Key.Numpad2 = 98] = "Numpad2", Key[Key.Numpad3 = 99] = "Numpad3", Key[Key.Numpad4 = 100] = "Numpad4", Key[Key.Numpad5 = 101] = "Numpad5", Key[Key.Numpad6 = 102] = "Numpad6", Key[Key.Numpad7 = 103] = "Numpad7", Key[Key.Numpad8 = 104] = "Numpad8", Key[Key.Numpad9 = 105] = "Numpad9", Key[Key.Multiply = 106] = "Multiply", Key[Key.Add = 107] = "Add", Key[Key.Subtract = 109] = "Subtract", Key[Key.Decimal = 110] = "Decimal", Key[Key.Divide = 111] = "Divide", Key[Key.F1 = 112] = "F1", Key[Key.F2 = 113] = "F2", Key[Key.F3 = 114] = "F3", Key[Key.F4 = 115] = "F4", Key[Key.F5 = 116] = "F5", Key[Key.F6 = 117] = "F6", Key[Key.F7 = 118] = "F7", Key[Key.F8 = 119] = "F8", Key[Key.F9 = 120] = "F9", Key[Key.F10 = 121] = "F10", Key[Key.F11 = 122] = "F11", Key[Key.F12 = 123] = "F12", Key[Key.NumLock = 144] = "NumLock", Key[Key.ScrollLock = 145] = "ScrollLock", Key[Key.Semicolon = 186] = "Semicolon", Key[Key.Equals = 187] = "Equals", Key[Key.Comma = 188] = "Comma", Key[Key.Dash = 189] = "Dash", Key[Key.Period = 190] = "Period", Key[Key.ForwardSlash = 191] = "ForwardSlash", Key[Key.GraveAccent = 192] = "GraveAccent", Key[Key.OpenBracket = 219] = "OpenBracket", Key[Key.BackSlash = 220] = "BackSlash", Key[Key.CloseBracket = 221] = "CloseBracket", Key[Key.SingleQuote = 222] = "SingleQuote";
    })(exports.Key || (exports.Key = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/shared.js
var require_shared = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/shared.js"(exports) {
    "use strict";
    var scrollable = {
      props: {
        "data-polaris-scrollable": !0
      },
      selector: "[data-polaris-scrollable]"
    }, overlay = {
      props: {
        "data-polaris-overlay": !0
      },
      selector: "[data-polaris-overlay]"
    }, layer = {
      props: {
        "data-polaris-layer": !0
      },
      selector: "[data-polaris-layer]"
    }, unstyled = {
      props: {
        "data-polaris-unstyled": !0
      },
      selector: "[data-polaris-unstyled]"
    }, dataPolarisTopBar = {
      props: {
        "data-polaris-top-bar": !0
      },
      selector: "[data-polaris-top-bar]"
    }, headerCell = {
      props: {
        "data-polaris-header-cell": !0
      },
      selector: "[data-polaris-header-cell]"
    }, portal = {
      props: ["data-portal-id"],
      selector: "[data-portal-id]"
    }, DATA_ATTRIBUTE = {
      overlay,
      layer
    };
    exports.DATA_ATTRIBUTE = DATA_ATTRIBUTE;
    exports.dataPolarisTopBar = dataPolarisTopBar;
    exports.headerCell = headerCell;
    exports.layer = layer;
    exports.overlay = overlay;
    exports.portal = portal;
    exports.scrollable = scrollable;
    exports.unstyled = unstyled;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/clamp.js
var require_clamp = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/clamp.js"(exports) {
    "use strict";
    function clamp(number, min, max) {
      return number < min ? min : number > max ? max : number;
    }
    exports.clamp = clamp;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/roundNumberToDecimalPlaces.js
var require_roundNumberToDecimalPlaces = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/roundNumberToDecimalPlaces.js"(exports) {
    "use strict";
    function roundNumberToDecimalPlaces(value, decimals) {
      let exponent = Number(`${value}e${decimals}`), roundedExponent = Math.round(exponent);
      return Number(`${roundedExponent}e-${decimals}`);
    }
    exports.roundNumberToDecimalPlaces = roundNumberToDecimalPlaces;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/color-transformers.js
var require_color_transformers = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/color-transformers.js"(exports) {
    "use strict";
    var clamp = require_clamp(), roundNumberToDecimalPlaces = require_roundNumberToDecimalPlaces();
    function rgbString(color) {
      let {
        red,
        green,
        blue
      } = color;
      return "alpha" in color ? `rgba(${red}, ${green}, ${blue}, ${color.alpha})` : `rgb(${red}, ${green}, ${blue})`;
    }
    var rgbaString = rgbString;
    function rgbToHex({
      red,
      green,
      blue
    }) {
      return `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`;
    }
    function componentToHex(component) {
      let hex = component.toString(16);
      return hex.length === 1 ? `0${hex}` : hex;
    }
    function hsbToHex(color) {
      return rgbToHex(hsbToRgb(color));
    }
    function rgbFromHueAndChroma(hue, chroma) {
      let huePrime = hue / 60, hueDelta = 1 - Math.abs(huePrime % 2 - 1), intermediateValue = chroma * hueDelta, red = 0, green = 0, blue = 0;
      return huePrime >= 0 && huePrime <= 1 && (red = chroma, green = intermediateValue, blue = 0), huePrime >= 1 && huePrime <= 2 && (red = intermediateValue, green = chroma, blue = 0), huePrime >= 2 && huePrime <= 3 && (red = 0, green = chroma, blue = intermediateValue), huePrime >= 3 && huePrime <= 4 && (red = 0, green = intermediateValue, blue = chroma), huePrime >= 4 && huePrime <= 5 && (red = intermediateValue, green = 0, blue = chroma), huePrime >= 5 && huePrime <= 6 && (red = chroma, green = 0, blue = intermediateValue), {
        red,
        green,
        blue
      };
    }
    function hsbToRgb(color) {
      let {
        hue,
        saturation,
        brightness,
        alpha = 1
      } = color, chroma = brightness * saturation, {
        red,
        green,
        blue
      } = rgbFromHueAndChroma(hue, chroma), chromaBrightnessDelta = brightness - chroma;
      return red += chromaBrightnessDelta, green += chromaBrightnessDelta, blue += chromaBrightnessDelta, {
        red: Math.round(red * 255),
        green: Math.round(green * 255),
        blue: Math.round(blue * 255),
        alpha
      };
    }
    function hslToRgb(color) {
      let {
        hue,
        saturation,
        lightness,
        alpha = 1
      } = color, chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100), {
        red,
        green,
        blue
      } = rgbFromHueAndChroma(hue, chroma), lightnessVal = lightness / 100 - chroma / 2;
      return red += lightnessVal, green += lightnessVal, blue += lightnessVal, {
        red: Math.round(red * 255),
        green: Math.round(green * 255),
        blue: Math.round(blue * 255),
        alpha
      };
    }
    function rgbToHsbl(color, type = "b") {
      let {
        alpha = 1
      } = color, red = color.red / 255, green = color.green / 255, blue = color.blue / 255, largestComponent = Math.max(red, green, blue), smallestComponent = Math.min(red, green, blue), delta = largestComponent - smallestComponent, lightness = (largestComponent + smallestComponent) / 2, saturation = 0;
      if (largestComponent === 0)
        saturation = 0;
      else if (type === "b")
        saturation = delta / largestComponent;
      else if (type === "l") {
        let baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);
        saturation = isNaN(baseSaturation) ? 0 : baseSaturation;
      }
      let huePercentage = 0;
      switch (largestComponent) {
        case red:
          huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);
          break;
        case green:
          huePercentage = (blue - red) / delta + 2;
          break;
        case blue:
          huePercentage = (red - green) / delta + 4;
      }
      let hue = huePercentage / 6 * 360, clampedHue = clamp.clamp(hue, 0, 360);
      return {
        hue: clampedHue ? roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clampedHue, 2) : 0,
        saturation: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clamp.clamp(saturation, 0, 1), 4),
        brightness: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(clamp.clamp(largestComponent, 0, 1), 4),
        lightness: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(lightness, 4),
        alpha: roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(alpha, 4)
      };
    }
    function rgbToHsb(color) {
      let {
        hue,
        saturation,
        brightness,
        alpha = 1
      } = rgbToHsbl(color, "b");
      return {
        hue,
        saturation,
        brightness,
        alpha
      };
    }
    function rgbToHsl(color) {
      let {
        hue,
        saturation: rawSaturation,
        lightness: rawLightness,
        alpha = 1
      } = rgbToHsbl(color, "l"), saturation = roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(rawSaturation * 100, 2), lightness = roundNumberToDecimalPlaces.roundNumberToDecimalPlaces(rawLightness * 100, 2);
      return {
        hue,
        saturation,
        lightness,
        alpha
      };
    }
    function hexToRgb(color) {
      if (color.length === 4) {
        let repeatHex = (hex1, hex2) => color.slice(hex1, hex2).repeat(2), red2 = parseInt(repeatHex(1, 2), 16), green2 = parseInt(repeatHex(2, 3), 16), blue2 = parseInt(repeatHex(3, 4), 16);
        return {
          red: red2,
          green: green2,
          blue: blue2
        };
      }
      let red = parseInt(color.slice(1, 3), 16), green = parseInt(color.slice(3, 5), 16), blue = parseInt(color.slice(5, 7), 16);
      return {
        red,
        green,
        blue
      };
    }
    exports.hexToRgb = hexToRgb;
    exports.hsbToHex = hsbToHex;
    exports.hsbToRgb = hsbToRgb;
    exports.hslToRgb = hslToRgb;
    exports.rgbString = rgbString;
    exports.rgbToHex = rgbToHex;
    exports.rgbToHsb = rgbToHsb;
    exports.rgbToHsl = rgbToHsl;
    exports.rgbaString = rgbaString;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/within-content-context.js
var require_within_content_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/within-content-context.js"(exports) {
    "use strict";
    var React2 = require("react"), WithinContentContext = /* @__PURE__ */ React2.createContext(!1);
    exports.WithinContentContext = WithinContentContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/target.js
var require_target = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/target.js"(exports) {
    "use strict";
    var isServer = typeof window > "u" || typeof document > "u";
    exports.isServer = isServer;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-isomorphic-layout-effect.js
var require_use_isomorphic_layout_effect = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-isomorphic-layout-effect.js"(exports) {
    "use strict";
    var React2 = require("react"), target = require_target(), useIsomorphicLayoutEffect = target.isServer ? React2.useEffect : React2.useLayoutEffect;
    exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-event-listener.js
var require_use_event_listener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-event-listener.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect();
    function useEventListener(eventName, handler, target, options) {
      let handlerRef = React2.useRef(handler), optionsRef = React2.useRef(options);
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        handlerRef.current = handler;
      }, [handler]), useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        optionsRef.current = options;
      }, [options]), React2.useEffect(() => {
        if (!(typeof eventName == "string" && target !== null))
          return;
        let targetElement;
        if (typeof target > "u")
          targetElement = window;
        else if ("current" in target) {
          if (target.current === null)
            return;
          targetElement = target.current;
        } else
          targetElement = target;
        let eventOptions = optionsRef.current, eventListener = (event) => handlerRef.current(event);
        return targetElement.addEventListener(eventName, eventListener, eventOptions), () => {
          targetElement.removeEventListener(eventName, eventListener, eventOptions);
        };
      }, [eventName, target]);
    }
    exports.useEventListener = useEventListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-theme.js
var require_use_theme = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-theme.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisTokens = require("@shopify/polaris-tokens");
    function getTheme(themeName) {
      return polarisTokens.themes[themeName];
    }
    var ThemeContext = /* @__PURE__ */ React2.createContext(null);
    function useTheme() {
      let theme = React2.useContext(ThemeContext);
      if (!theme)
        throw new Error("No theme was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return theme;
    }
    function UseTheme(props) {
      let theme = useTheme();
      return props.children(theme);
    }
    exports.ThemeContext = ThemeContext;
    exports.UseTheme = UseTheme;
    exports.getTheme = getTheme;
    exports.useTheme = useTheme;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-index-resource-state.js
var require_use_index_resource_state = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-index-resource-state.js"(exports) {
    "use strict";
    var React2 = require("react");
    exports.SelectionType = void 0;
    (function(SelectionType) {
      SelectionType.All = "all", SelectionType.Page = "page", SelectionType.Multi = "multi", SelectionType.Single = "single", SelectionType.Range = "range";
    })(exports.SelectionType || (exports.SelectionType = {}));
    function defaultResourceIDResolver(resource) {
      if ("id" in resource)
        return resource.id;
      throw new Error("Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`");
    }
    function useIndexResourceState(resources, {
      selectedResources: initSelectedResources = [],
      allResourcesSelected: initAllResourcesSelected = !1,
      resourceIDResolver = defaultResourceIDResolver,
      resourceFilter = void 0
    } = {
      selectedResources: [],
      allResourcesSelected: !1,
      resourceIDResolver: defaultResourceIDResolver,
      resourceFilter: void 0
    }) {
      let [selectedResources, setSelectedResources] = React2.useState(initSelectedResources), [allResourcesSelected, setAllResourcesSelected] = React2.useState(initAllResourcesSelected), handleSelectionChange = React2.useCallback((selectionType, isSelecting, selection, _position) => {
        switch (selectionType === exports.SelectionType.All ? setAllResourcesSelected(isSelecting) : allResourcesSelected && setAllResourcesSelected(!1), selectionType) {
          case exports.SelectionType.Single:
            setSelectedResources((newSelectedResources) => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter((id) => id !== selection));
            break;
          case exports.SelectionType.All:
          case exports.SelectionType.Page:
            if (resourceFilter) {
              let filteredResources = resources.filter(resourceFilter);
              setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);
            } else
              setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);
            break;
          case exports.SelectionType.Multi:
            if (!selection)
              break;
            setSelectedResources((currentSelectedResources) => {
              let ids = [], filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;
              for (let i = selection[0]; i <= selection[1]; i++)
                if (filteredResources.includes(resources[i])) {
                  let id = resourceIDResolver(resources[i]);
                  (isSelecting && !currentSelectedResources.includes(id) || !isSelecting && currentSelectedResources.includes(id)) && ids.push(id);
                }
              return isSelecting ? [...currentSelectedResources, ...ids] : currentSelectedResources.filter((id) => !ids.includes(id));
            });
            break;
          case exports.SelectionType.Range:
            if (!selection)
              break;
            setSelectedResources((currentSelectedResources) => {
              let selectedIds = (resourceFilter ? resources.filter(resourceFilter) : resources).map(resourceIDResolver).slice(Number(selection[0]), Number(selection[1]) + 1), isIndeterminate = selectedIds.some((id) => selectedResources.includes(id));
              return !selectedIds.every((id) => selectedResources.includes(id)) && (isSelecting || isIndeterminate) ? [...(/* @__PURE__ */ new Set([...currentSelectedResources, ...selectedIds])).values()] : currentSelectedResources.filter((id) => !selectedIds.includes(id));
            });
            break;
        }
      }, [allResourcesSelected, resourceFilter, selectedResources, resources, resourceIDResolver]), clearSelection = React2.useCallback(() => {
        setSelectedResources([]), setAllResourcesSelected(!1);
      }, []), removeSelectedResources = React2.useCallback((removeResources) => {
        let newSelectedResources = [...selectedResources].filter((resource) => !removeResources.includes(resource));
        setSelectedResources(newSelectedResources), newSelectedResources.length === 0 && setAllResourcesSelected(!1);
      }, [selectedResources]);
      return {
        selectedResources,
        allResourcesSelected,
        handleSelectionChange,
        clearSelection,
        removeSelectedResources
      };
    }
    exports.useIndexResourceState = useIndexResourceState;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/breakpoints.js
var require_breakpoints = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/breakpoints.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisTokens = require("@shopify/polaris-tokens"), target = require_target(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), Breakpoints = {
      // TODO: Update to smDown
      navigationBarCollapsed: "767.95px",
      // TODO: Update to lgDown
      stackedContent: "1039.95px"
    }, noWindowMatches = {
      media: "",
      addListener: noop,
      removeListener: noop,
      matches: !1,
      onchange: noop,
      addEventListener: noop,
      removeEventListener: noop,
      dispatchEvent: (_) => !0
    };
    function noop() {
    }
    function navigationBarCollapsed() {
      return typeof window > "u" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);
    }
    function stackedContent() {
      return typeof window > "u" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);
    }
    var breakpointsQueryEntries = getBreakpointsQueryEntries(polarisTokens.themeDefault.breakpoints);
    function getMatches(defaults, forceDefaults) {
      return !target.isServer && !forceDefaults ? Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches])) : Object.fromEntries(typeof defaults == "object" && defaults !== null ? breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults[directionAlias] ?? !1]) : breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults ?? !1]));
    }
    function useBreakpoints(options) {
      let [breakpoints, setBreakpoints] = React2.useState(getMatches(options?.defaults, !0));
      return useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        let mediaQueryLists = breakpointsQueryEntries.map(([_, query]) => window.matchMedia(query)), handler = () => setBreakpoints(getMatches());
        return mediaQueryLists.forEach((mql) => {
          mql.addListener ? mql.addListener(handler) : mql.addEventListener("change", handler);
        }), handler(), () => {
          mediaQueryLists.forEach((mql) => {
            mql.removeListener ? mql.removeListener(handler) : mql.removeEventListener("change", handler);
          });
        };
      }, []), breakpoints;
    }
    function getBreakpointsQueryEntries(breakpoints) {
      return Object.entries(polarisTokens.getMediaConditions(breakpoints)).map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => [`${breakpointsToken.split("-")[1]}${capitalize(direction)}`, mediaCondition])).flat();
    }
    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    exports.getBreakpointsQueryEntries = getBreakpointsQueryEntries;
    exports.navigationBarCollapsed = navigationBarCollapsed;
    exports.stackedContent = stackedContent;
    exports.useBreakpoints = useBreakpoints;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AppProvider/AppProvider.scss.js
var require_AppProvider_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AppProvider/AppProvider.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var AppProvider3 = {};
    exports.default = AppProvider3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AppProvider/global.scss.js
var require_global_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AppProvider/global.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var global = {};
    exports.default = global;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/features/context.js
var require_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/features/context.js"(exports) {
    "use strict";
    var React2 = require("react"), classNamePolarisSummerEditions2023 = "Polaris-Summer-Editions-2023", FeaturesContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FeaturesContext = FeaturesContext;
    exports.classNamePolarisSummerEditions2023 = classNamePolarisSummerEditions2023;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/debounce.js
var require_debounce = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/debounce.js"(exports) {
    "use strict";
    function debounce(func, waitArg, options) {
      let lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = !1, maxing = !1, trailing = !0, useRAF = !waitArg && waitArg !== 0;
      if (typeof func != "function")
        throw new TypeError("Expected a function");
      let wait = waitArg || 0;
      typeof options == "object" && (leading = Boolean(options.leading), maxing = "maxWait" in options, maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : void 0, trailing = "trailing" in options ? Boolean(options.trailing) : trailing);
      function invokeFunc(time) {
        let args = lastArgs, thisArg = lastThis;
        return lastArgs = void 0, lastThis = void 0, lastInvokeTime = time, result = func.apply(thisArg, args), result;
      }
      function startTimer(pendingFunc, wait2) {
        return useRAF ? (cancelAnimationFrame(timerId), requestAnimationFrame(pendingFunc)) : setTimeout(pendingFunc, wait2);
      }
      function cancelTimer(id) {
        if (useRAF)
          return cancelAnimationFrame(id);
        clearTimeout(id);
      }
      function leadingEdge(time) {
        return lastInvokeTime = time, timerId = startTimer(timerExpired, wait), leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        let timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing && maxWait ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        let timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && maxWait && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        let time = Date.now();
        if (shouldInvoke(time))
          return trailingEdge(time);
        timerId = startTimer(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        return timerId = void 0, trailing && lastArgs ? invokeFunc(time) : (lastArgs = lastThis = void 0, result);
      }
      function cancel() {
        timerId !== void 0 && cancelTimer(timerId), lastInvokeTime = 0, lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(Date.now());
      }
      function pending() {
        return timerId !== void 0;
      }
      function debounced(...args) {
        let time = Date.now(), isInvoking = shouldInvoke(time);
        if (lastArgs = args, lastThis = this, lastCallTime = time, isInvoking) {
          if (timerId === void 0)
            return leadingEdge(lastCallTime);
          if (maxing)
            return timerId = startTimer(timerExpired, wait), invokeFunc(lastCallTime);
        }
        return timerId === void 0 && (timerId = startTimer(timerExpired, wait)), result;
      }
      return debounced.cancel = cancel, debounced.flush = flush, debounced.pending = pending, debounced;
    }
    exports.debounce = debounce;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/geometry.js
var require_geometry = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/geometry.js"(exports) {
    "use strict";
    var Rect = class {
      static get zero() {
        return new Rect();
      }
      constructor({
        top = 0,
        left = 0,
        width = 0,
        height = 0
      } = {}) {
        this.top = top, this.left = left, this.width = width, this.height = height;
      }
      get center() {
        return {
          x: this.left + this.width / 2,
          y: this.top + this.height / 2
        };
      }
    };
    function getRectForNode(node) {
      if (!(node instanceof Element))
        return new Rect({
          width: window.innerWidth,
          height: window.innerHeight
        });
      let rect = node.getBoundingClientRect();
      return new Rect({
        top: rect.top,
        left: rect.left,
        width: rect.width,
        height: rect.height
      });
    }
    exports.Rect = Rect;
    exports.getRectForNode = getRectForNode;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/sticky-manager.js
var require_sticky_manager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/sticky-manager.js"(exports) {
    "use strict";
    var polarisTokens = require("@shopify/polaris-tokens"), debounce = require_debounce(), shared = require_shared(), breakpoints = require_breakpoints(), geometry = require_geometry(), SIXTY_FPS = 1e3 / 60, StickyManager = class {
      constructor(container) {
        this.stickyItems = [], this.stuckItems = [], this.container = null, this.topBarOffset = 0, this.handleResize = debounce.debounce(() => {
          this.manageStickyItems();
        }, SIXTY_FPS, {
          leading: !0,
          trailing: !0,
          maxWait: SIXTY_FPS
        }), this.handleScroll = debounce.debounce(() => {
          this.manageStickyItems();
        }, SIXTY_FPS, {
          leading: !0,
          trailing: !0,
          maxWait: SIXTY_FPS
        }), container && this.setContainer(container);
      }
      registerStickyItem(stickyItem) {
        this.stickyItems.push(stickyItem);
      }
      unregisterStickyItem(nodeToRemove) {
        let nodeIndex = this.stickyItems.findIndex(({
          stickyNode
        }) => nodeToRemove === stickyNode);
        this.stickyItems.splice(nodeIndex, 1);
      }
      setContainer(el) {
        this.container = el, isDocument(el) && this.setTopBarOffset(el), this.container.addEventListener("scroll", this.handleScroll), window.addEventListener("resize", this.handleResize), this.manageStickyItems();
      }
      removeScrollListener() {
        this.container && (this.container.removeEventListener("scroll", this.handleScroll), window.removeEventListener("resize", this.handleResize));
      }
      manageStickyItems() {
        if (this.stickyItems.length <= 0)
          return;
        let scrollTop = this.container ? scrollTopFor(this.container) : 0, containerTop = geometry.getRectForNode(this.container).top + this.topBarOffset;
        this.stickyItems.forEach((stickyItem) => {
          let {
            handlePositioning
          } = stickyItem, {
            sticky,
            top,
            left,
            width
          } = this.evaluateStickyItem(stickyItem, scrollTop, containerTop);
          this.updateStuckItems(stickyItem, sticky), handlePositioning(sticky, top, left, width);
        });
      }
      evaluateStickyItem(stickyItem, scrollTop, containerTop) {
        let {
          stickyNode,
          placeHolderNode,
          boundingElement,
          offset,
          disableWhenStacked
        } = stickyItem;
        if (disableWhenStacked && breakpoints.stackedContent().matches)
          return {
            sticky: !1,
            top: 0,
            left: 0,
            width: "auto"
          };
        let stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(
          // Important: This will not update when the active theme changes.
          // Update this to `useTheme` once converted to a function component.
          polarisTokens.themeDefault.space["space-500"],
          10
        ) : this.getOffset(stickyNode), scrollPosition = scrollTop + stickyOffset, placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop, top = containerTop + stickyOffset, width = placeHolderNode.getBoundingClientRect().width, left = placeHolderNode.getBoundingClientRect().left, sticky;
        if (boundingElement == null)
          sticky = scrollPosition >= placeHolderNodeCurrentTop;
        else {
          let stickyItemHeight = stickyNode.getBoundingClientRect().height || stickyNode.firstElementChild?.getBoundingClientRect().height || 0, stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
          sticky = scrollPosition >= placeHolderNodeCurrentTop && scrollPosition < stickyItemBottomPosition;
        }
        return {
          sticky,
          top,
          left,
          width
        };
      }
      updateStuckItems(item, sticky) {
        let {
          stickyNode
        } = item;
        sticky && !this.isNodeStuck(stickyNode) ? this.addStuckItem(item) : !sticky && this.isNodeStuck(stickyNode) && this.removeStuckItem(item);
      }
      addStuckItem(stickyItem) {
        this.stuckItems.push(stickyItem);
      }
      removeStuckItem(stickyItem) {
        let {
          stickyNode: nodeToRemove
        } = stickyItem, nodeIndex = this.stuckItems.findIndex(({
          stickyNode
        }) => nodeToRemove === stickyNode);
        this.stuckItems.splice(nodeIndex, 1);
      }
      getOffset(node) {
        if (this.stuckItems.length === 0)
          return 0;
        let offset = 0, count = 0, stuckNodesLength = this.stuckItems.length, nodeRect = geometry.getRectForNode(node);
        for (; count < stuckNodesLength; ) {
          let stuckNode = this.stuckItems[count].stickyNode;
          if (stuckNode !== node) {
            let stuckNodeRect = geometry.getRectForNode(stuckNode);
            horizontallyOverlaps(nodeRect, stuckNodeRect) || (offset += geometry.getRectForNode(stuckNode).height);
          } else
            break;
          count++;
        }
        return offset;
      }
      isNodeStuck(node) {
        return this.stuckItems.findIndex(({
          stickyNode
        }) => node === stickyNode) >= 0;
      }
      setTopBarOffset(container) {
        let topbarElement = container.querySelector(`:not(${shared.scrollable.selector}) ${shared.dataPolarisTopBar.selector}`);
        this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
      }
    };
    function isDocument(node) {
      return node === document;
    }
    function scrollTopFor(container) {
      return isDocument(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
    }
    function horizontallyOverlaps(rect1, rect2) {
      let rect1Left = rect1.left, rect1Right = rect1.left + rect1.width, rect2Left = rect2.left;
      return rect2.left + rect2.width < rect1Left || rect1Right < rect2Left;
    }
    exports.StickyManager = StickyManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/scroll-lock-manager.js
var require_scroll_lock_manager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/scroll-lock-manager.js"(exports) {
    "use strict";
    var target = require_target(), SCROLL_LOCKING_ATTRIBUTE = "data-lock-scrolling", SCROLL_LOCKING_HIDDEN_ATTRIBUTE = "data-lock-scrolling-hidden", SCROLL_LOCKING_WRAPPER_ATTRIBUTE = "data-lock-scrolling-wrapper", scrollPosition = 0;
    function isScrollBarVisible() {
      let {
        body
      } = document;
      return body.scrollHeight > body.clientHeight;
    }
    var ScrollLockManager = class {
      constructor() {
        this.scrollLocks = 0, this.locked = !1;
      }
      registerScrollLock() {
        this.scrollLocks += 1, this.handleScrollLocking();
      }
      unregisterScrollLock() {
        this.scrollLocks -= 1, this.handleScrollLocking();
      }
      handleScrollLocking() {
        if (target.isServer)
          return;
        let {
          scrollLocks
        } = this, {
          body
        } = document, wrapper = body.firstElementChild;
        scrollLocks === 0 ? (body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE), body.removeAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE), wrapper && wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE), window.scroll(0, scrollPosition), this.locked = !1) : scrollLocks > 0 && !this.locked && (scrollPosition = window.pageYOffset, body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, ""), isScrollBarVisible() || body.setAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE, ""), wrapper && (wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, ""), wrapper.scrollTop = scrollPosition), this.locked = !0);
      }
      resetScrollPosition() {
        scrollPosition = 0;
      }
    };
    exports.SCROLL_LOCKING_ATTRIBUTE = SCROLL_LOCKING_ATTRIBUTE;
    exports.ScrollLockManager = ScrollLockManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/get.js
var require_get = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/get.js"(exports) {
    "use strict";
    var OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
    function get(obj, keypath, defaultValue) {
      if (obj == null)
        return;
      let keys = Array.isArray(keypath) ? keypath : getKeypath(keypath), acc = obj;
      for (let i = 0; i < keys.length; i++) {
        let val = acc[keys[i]];
        if (val === void 0)
          return defaultValue;
        acc = val;
      }
      return acc;
    }
    function getKeypath(str) {
      let path = [], result;
      for (; result = OBJECT_NOTATION_MATCHER.exec(str); ) {
        let [, first, second] = result;
        path.push(first || second);
      }
      return path;
    }
    exports.get = get;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/merge.js
var require_merge = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/merge.js"(exports) {
    "use strict";
    function merge(...objs) {
      let final = {};
      for (let obj of objs)
        final = mergeRecursively(final, obj);
      return final;
    }
    function mergeRecursively(inputObjA, objB) {
      let objA = Array.isArray(inputObjA) ? [...inputObjA] : {
        ...inputObjA
      };
      for (let key in objB)
        if (Object.prototype.hasOwnProperty.call(objB, key))
          isMergeableValue(objB[key]) && isMergeableValue(objA[key]) ? objA[key] = mergeRecursively(objA[key], objB[key]) : objA[key] = objB[key];
        else
          continue;
      return objA;
    }
    function isMergeableValue(value) {
      return value !== null && typeof value == "object";
    }
    exports.merge = merge;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/I18n.js
var require_I18n = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/I18n.js"(exports) {
    "use strict";
    var get = require_get(), merge = require_merge(), REPLACE_REGEX = /{([^}]*)}/g, I18n = class {
      /**
       * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
       */
      constructor(translation) {
        this.translation = {}, this.translation = Array.isArray(translation) ? merge.merge(...translation.slice().reverse()) : translation;
      }
      translate(id, replacements) {
        let text = get.get(this.translation, id, "");
        return text ? replacements ? text.replace(REPLACE_REGEX, (match) => {
          let replacement = match.substring(1, match.length - 1);
          if (replacements[replacement] === void 0) {
            let replacementData = JSON.stringify(replacements);
            throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);
          }
          return replacements[replacement];
        }) : text : "";
      }
      translationKeyExists(path) {
        return Boolean(get.get(this.translation, path));
      }
    };
    exports.I18n = I18n;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/context.js
var require_context2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/context.js"(exports) {
    "use strict";
    var React2 = require("react"), I18nContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.I18nContext = I18nContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/context.js
var require_context3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/context.js"(exports) {
    "use strict";
    var React2 = require("react"), ScrollLockManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.ScrollLockManagerContext = ScrollLockManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/context.js
var require_context4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/context.js"(exports) {
    "use strict";
    var React2 = require("react"), StickyManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.StickyManagerContext = StickyManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/link/context.js
var require_context5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/link/context.js"(exports) {
    "use strict";
    var React2 = require("react"), LinkContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.LinkContext = LinkContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/media-query/context.js
var require_context6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/media-query/context.js"(exports) {
    "use strict";
    var React2 = require("react"), MediaQueryContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.MediaQueryContext = MediaQueryContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EventListener/EventListener.js
var require_EventListener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EventListener/EventListener.js"(exports) {
    "use strict";
    var React2 = require("react"), EventListener = class extends React2.PureComponent {
      componentDidMount() {
        this.attachListener();
      }
      componentDidUpdate({
        passive,
        ...detachProps
      }) {
        this.detachListener(detachProps), this.attachListener();
      }
      componentWillUnmount() {
        this.detachListener();
      }
      render() {
        return null;
      }
      attachListener() {
        let {
          event,
          handler,
          capture,
          passive
        } = this.props;
        window.addEventListener(event, handler, {
          capture,
          passive
        });
      }
      detachListener(prevProps) {
        let {
          event,
          handler,
          capture
        } = prevProps || this.props;
        window.removeEventListener(event, handler, capture);
      }
    };
    exports.EventListener = EventListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaQueryProvider/MediaQueryProvider.js
var require_MediaQueryProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaQueryProvider/MediaQueryProvider.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), breakpoints = require_breakpoints(), context = require_context6(), EventListener = require_EventListener(), MediaQueryProvider = function({
      children
    }) {
      let [isNavigationCollapsed, setIsNavigationCollapsed] = React2.useState(breakpoints.navigationBarCollapsed().matches), handleResize = React2.useCallback(debounce.debounce(() => {
        isNavigationCollapsed !== breakpoints.navigationBarCollapsed().matches && setIsNavigationCollapsed(!isNavigationCollapsed);
      }, 40, {
        trailing: !0,
        leading: !0,
        maxWait: 40
      }), [isNavigationCollapsed]);
      React2.useEffect(() => {
        setIsNavigationCollapsed(breakpoints.navigationBarCollapsed().matches);
      }, []);
      let context$1 = React2.useMemo(() => ({
        isNavigationCollapsed
      }), [isNavigationCollapsed]);
      return /* @__PURE__ */ React2.createElement(context.MediaQueryContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleResize
      }), children);
    };
    exports.MediaQueryProvider = MediaQueryProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-after-initial-mount.js
var require_use_is_after_initial_mount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-after-initial-mount.js"(exports) {
    "use strict";
    var React2 = require("react");
    function useIsAfterInitialMount() {
      let [isAfterInitialMount, setIsAfterInitialMount] = React2.useState(!1);
      return React2.useEffect(() => {
        setIsAfterInitialMount(!0);
      }, []), isAfterInitialMount;
    }
    exports.useIsAfterInitialMount = useIsAfterInitialMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/portals/context.js
var require_context7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/portals/context.js"(exports) {
    "use strict";
    var React2 = require("react"), PortalsManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.PortalsManagerContext = PortalsManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PortalsManager/components/PortalsContainer/PortalsContainer.js
var require_PortalsContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PortalsManager/components/PortalsContainer/PortalsContainer.js"(exports) {
    "use strict";
    var React2 = require("react");
    function PortalsContainerComponent(_props, ref) {
      return /* @__PURE__ */ React2.createElement("div", {
        id: "PolarisPortalsContainer",
        ref
      });
    }
    var PortalsContainer = /* @__PURE__ */ React2.forwardRef(PortalsContainerComponent);
    exports.PortalsContainer = PortalsContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PortalsManager/PortalsManager.js
var require_PortalsManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PortalsManager/PortalsManager.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsAfterInitialMount = require_use_is_after_initial_mount(), context = require_context7(), PortalsContainer = require_PortalsContainer();
    function PortalsManager({
      children,
      container
    }) {
      let isMounted = useIsAfterInitialMount.useIsAfterInitialMount(), ref = React2.useRef(null), contextValue = React2.useMemo(() => container ? {
        container
      } : isMounted ? {
        container: ref.current
      } : {
        container: null
      }, [container, isMounted]);
      return /* @__PURE__ */ React2.createElement(context.PortalsManagerContext.Provider, {
        value: contextValue
      }, children, container ? null : /* @__PURE__ */ React2.createElement(PortalsContainer.PortalsContainer, {
        ref
      }));
    }
    exports.PortalsManager = PortalsManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/context.js
var require_context8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/context.js"(exports) {
    "use strict";
    var React2 = require("react"), FocusManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FocusManagerContext = FocusManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FocusManager/FocusManager.js
var require_FocusManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FocusManager/FocusManager.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context8();
    function FocusManager({
      children
    }) {
      let [trapFocusList, setTrapFocusList] = React2.useState([]), add = React2.useCallback((id) => {
        setTrapFocusList((list) => [...list, id]);
      }, []), remove = React2.useCallback((id) => {
        let removed = !0;
        return setTrapFocusList((list) => {
          let clone = [...list], index = clone.indexOf(id);
          return index === -1 ? removed = !1 : clone.splice(index, 1), clone;
        }), removed;
      }, []), value = React2.useMemo(() => ({
        trapFocusList,
        add,
        remove
      }), [add, trapFocusList, remove]);
      return /* @__PURE__ */ React2.createElement(context.FocusManagerContext.Provider, {
        value
      }, children);
    }
    exports.FocusManager = FocusManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/context.js
var require_context9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/context.js"(exports) {
    "use strict";
    var React2 = require("react"), EphemeralPresenceManagerContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.EphemeralPresenceManagerContext = EphemeralPresenceManagerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EphemeralPresenceManager/EphemeralPresenceManager.js
var require_EphemeralPresenceManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EphemeralPresenceManager/EphemeralPresenceManager.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context9(), defaultState = {
      tooltip: 0
    };
    function EphemeralPresenceManager({
      children
    }) {
      let [presenceCounter, setPresenceCounter] = React2.useState(defaultState), addPresence = React2.useCallback((key) => {
        setPresenceCounter((prevList) => ({
          ...prevList,
          [key]: prevList[key] + 1
        }));
      }, []), removePresence = React2.useCallback((key) => {
        setPresenceCounter((prevList) => ({
          ...prevList,
          [key]: prevList[key] - 1
        }));
      }, []), value = React2.useMemo(() => ({
        presenceList: Object.entries(presenceCounter).reduce((previousValue, currentValue) => {
          let [key, value2] = currentValue;
          return {
            ...previousValue,
            [key]: value2 >= 1
          };
        }, {}),
        presenceCounter,
        addPresence,
        removePresence
      }), [addPresence, removePresence, presenceCounter]);
      return /* @__PURE__ */ React2.createElement(context.EphemeralPresenceManagerContext.Provider, {
        value
      }, children);
    }
    exports.EphemeralPresenceManager = EphemeralPresenceManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AppProvider/AppProvider.js
var require_AppProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AppProvider/AppProvider.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisTokens = require("@shopify/polaris-tokens"), useTheme = require_use_theme();
    require_AppProvider_scss();
    require_global_scss();
    var context = require_context(), stickyManager = require_sticky_manager(), scrollLockManager = require_scroll_lock_manager(), I18n = require_I18n(), context$1 = require_context2(), context$2 = require_context3(), context$3 = require_context4(), context$4 = require_context5(), MediaQueryProvider = require_MediaQueryProvider(), PortalsManager = require_PortalsManager(), FocusManager = require_FocusManager(), EphemeralPresenceManager = require_EphemeralPresenceManager(), MAX_SCROLLBAR_WIDTH = 20, SCROLLBAR_TEST_ELEMENT_PARENT_SIZE = 30, SCROLLBAR_TEST_ELEMENT_CHILD_SIZE = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE + 10;
    function measureScrollbars() {
      let parentEl = document.createElement("div");
      parentEl.setAttribute("style", `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px; height:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px;`);
      let child = document.createElement("div");
      child.setAttribute("style", `width:100%; height: ${SCROLLBAR_TEST_ELEMENT_CHILD_SIZE}; overflow:scroll`), parentEl.appendChild(child), document.body.appendChild(parentEl);
      let scrollbarWidth = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE - (parentEl.firstElementChild?.clientWidth ?? 0), scrollbarWidthWithSafetyHatch = Math.min(scrollbarWidth, MAX_SCROLLBAR_WIDTH);
      document.documentElement.style.setProperty("--pc-app-provider-scrollbar-width", `${scrollbarWidthWithSafetyHatch}px`), document.body.removeChild(parentEl);
    }
    var AppProvider3 = class extends React2.Component {
      constructor(props) {
        super(props), this.setBodyStyles = () => {
          document.body.style.backgroundColor = "var(--p-color-bg)", document.body.style.color = "var(--p-color-text)";
        }, this.setRootAttributes = () => {
          let activeThemeName = this.getThemeName();
          polarisTokens.themeNames.forEach((themeName) => {
            document.documentElement.classList.toggle(polarisTokens.createThemeClassName(themeName), themeName === activeThemeName);
          }), document.documentElement.classList.add(context.classNamePolarisSummerEditions2023);
        }, this.getThemeName = () => this.props.theme ?? polarisTokens.themeNameDefault, this.stickyManager = new stickyManager.StickyManager(), this.scrollLockManager = new scrollLockManager.ScrollLockManager();
        let {
          i18n,
          linkComponent
        } = this.props;
        this.state = {
          link: linkComponent,
          intl: new I18n.I18n(i18n)
        };
      }
      componentDidMount() {
        document != null && (this.stickyManager.setContainer(document), this.setBodyStyles(), this.setRootAttributes()), measureScrollbars();
      }
      componentDidUpdate({
        i18n: prevI18n,
        linkComponent: prevLinkComponent
      }) {
        let {
          i18n,
          linkComponent
        } = this.props;
        this.setRootAttributes(), !(i18n === prevI18n && linkComponent === prevLinkComponent) && this.setState({
          link: linkComponent,
          intl: new I18n.I18n(i18n)
        });
      }
      render() {
        let {
          children,
          features
        } = this.props, themeName = this.getThemeName(), {
          intl,
          link
        } = this.state;
        return /* @__PURE__ */ React2.createElement(useTheme.ThemeContext.Provider, {
          value: useTheme.getTheme(themeName)
        }, /* @__PURE__ */ React2.createElement(context.FeaturesContext.Provider, {
          value: features
        }, /* @__PURE__ */ React2.createElement(context$1.I18nContext.Provider, {
          value: intl
        }, /* @__PURE__ */ React2.createElement(context$2.ScrollLockManagerContext.Provider, {
          value: this.scrollLockManager
        }, /* @__PURE__ */ React2.createElement(context$3.StickyManagerContext.Provider, {
          value: this.stickyManager
        }, /* @__PURE__ */ React2.createElement(context$4.LinkContext.Provider, {
          value: link
        }, /* @__PURE__ */ React2.createElement(MediaQueryProvider.MediaQueryProvider, null, /* @__PURE__ */ React2.createElement(PortalsManager.PortalsManager, null, /* @__PURE__ */ React2.createElement(FocusManager.FocusManager, null, /* @__PURE__ */ React2.createElement(EphemeralPresenceManager.EphemeralPresenceManager, null, children))))))))));
      }
    };
    exports.AppProvider = AppProvider3;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-object.js
var require_is_object = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-object.js"(exports) {
    "use strict";
    function isObject(value) {
      let type = typeof value;
      return value != null && (type === "object" || type === "function");
    }
    exports.isObject = isObject;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/css.js
var require_css = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/css.js"(exports) {
    "use strict";
    var polarisTokens = require("@shopify/polaris-tokens"), isObject = require_is_object();
    function classNames(...classes) {
      return classes.filter(Boolean).join(" ");
    }
    function variationName(name, value) {
      return `${name}${value.charAt(0).toUpperCase()}${value.slice(1)}`;
    }
    function sanitizeCustomProperties(styles) {
      let nonNullValues = Object.entries(styles).filter(([_, value]) => value != null);
      return nonNullValues.length ? Object.fromEntries(nonNullValues) : void 0;
    }
    function getResponsiveProps(componentName, componentProp, tokenSubgroup, responsiveProp) {
      if (!responsiveProp)
        return {};
      let result;
      return isObject.isObject(responsiveProp) ? result = Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, aliasOrScale]) => [breakpointAlias, `var(--p-${tokenSubgroup}-${aliasOrScale})`])) : result = {
        [polarisTokens.breakpointsAliases[0]]: `var(--p-${tokenSubgroup}-${responsiveProp})`
      }, Object.fromEntries(Object.entries(result).map(([breakpointAlias, value]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, value]));
    }
    function getResponsiveValue(componentName, componentProp, responsiveProp) {
      return responsiveProp ? isObject.isObject(responsiveProp) ? Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, responsiveValue]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, responsiveValue])) : {
        [`--pc-${componentName}-${componentProp}-${polarisTokens.breakpointsAliases[0]}`]: responsiveProp
      } : {};
    }
    exports.classNames = classNames;
    exports.getResponsiveProps = getResponsiveProps;
    exports.getResponsiveValue = getResponsiveValue;
    exports.sanitizeCustomProperties = sanitizeCustomProperties;
    exports.variationName = variationName;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-element-in-viewport.js
var require_is_element_in_viewport = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-element-in-viewport.js"(exports) {
    "use strict";
    function isElementInViewport(element) {
      let {
        top,
        left,
        bottom,
        right
      } = element.getBoundingClientRect();
      return top >= 0 && right <= window.innerWidth && bottom <= window.innerHeight && left >= 0;
    }
    exports.isElementInViewport = isElementInViewport;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus.js
var require_focus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus.js"(exports) {
    "use strict";
    var isElementInViewport = require_is_element_in_viewport(), FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]', KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]:not([tabindex="-1"])', MENUITEM_FOCUSABLE_SELECTORS = 'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])', handleMouseUpByBlurring = ({
      currentTarget
    }) => currentTarget.blur();
    function nextFocusableNode(node, filter) {
      let allFocusableElements = [...document.querySelectorAll(FOCUSABLE_SELECTOR)], sliceLocation = allFocusableElements.indexOf(node) + 1, focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);
      for (let focusableElement of focusableElementsAfterNode)
        if (isElementInViewport.isElementInViewport(focusableElement) && (!filter || filter && filter(focusableElement)))
          return focusableElement;
      return null;
    }
    function findFirstFocusableNode(element, onlyDescendants = !0) {
      return !onlyDescendants && matches(element, FOCUSABLE_SELECTOR) ? element : element.querySelector(FOCUSABLE_SELECTOR);
    }
    function findFirstFocusableNodeIncludingDisabled(element) {
      let focusableSelector = "a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]";
      return matches(element, focusableSelector) ? element : element.querySelector(focusableSelector);
    }
    function focusFirstFocusableNode(element, onlyDescendants = !0) {
      findFirstFocusableNode(element, onlyDescendants)?.focus();
    }
    function focusNextFocusableNode(node, filter) {
      let nextFocusable = nextFocusableNode(node, filter);
      return nextFocusable && nextFocusable instanceof HTMLElement ? (nextFocusable.focus(), !0) : !1;
    }
    function findFirstKeyboardFocusableNode(element, onlyDescendants = !0) {
      return !onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS) ? element : element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
    }
    function focusFirstKeyboardFocusableNode(element, onlyDescendants = !0) {
      let firstFocusable = findFirstKeyboardFocusableNode(element, onlyDescendants);
      return firstFocusable ? (firstFocusable.focus(), !0) : !1;
    }
    function findLastKeyboardFocusableNode(element, onlyDescendants = !0) {
      if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS))
        return element;
      let allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
      return allFocusable[allFocusable.length - 1];
    }
    function focusLastKeyboardFocusableNode(element, onlyDescendants = !0) {
      let lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);
      return lastFocusable ? (lastFocusable.focus(), !0) : !1;
    }
    function wrapFocusPreviousFocusableMenuItem(parentElement, currentFocusedElement) {
      let allFocusableChildren = getMenuFocusableDescendants(parentElement), currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
      currentItemIdx === -1 ? allFocusableChildren[0].focus() : allFocusableChildren[(currentItemIdx - 1 + allFocusableChildren.length) % allFocusableChildren.length].focus();
    }
    function wrapFocusNextFocusableMenuItem(parentElement, currentFocusedElement) {
      let allFocusableChildren = getMenuFocusableDescendants(parentElement), currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
      currentItemIdx === -1 ? allFocusableChildren[0].focus() : allFocusableChildren[(currentItemIdx + 1) % allFocusableChildren.length].focus();
    }
    function getMenuFocusableDescendants(element) {
      return element.querySelectorAll(MENUITEM_FOCUSABLE_SELECTORS);
    }
    function getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement) {
      let currentItemIdx = 0;
      for (let focusableChild of allFocusableChildren) {
        if (focusableChild === currentFocusedElement)
          break;
        currentItemIdx++;
      }
      return currentItemIdx === allFocusableChildren.length ? -1 : currentItemIdx;
    }
    function matches(node, selector) {
      if (node.matches)
        return node.matches(selector);
      let matches2 = (node.ownerDocument || document).querySelectorAll(selector), i = matches2.length;
      for (; --i >= 0 && matches2.item(i) !== node; )
        return i > -1;
    }
    exports.findFirstFocusableNode = findFirstFocusableNode;
    exports.findFirstFocusableNodeIncludingDisabled = findFirstFocusableNodeIncludingDisabled;
    exports.findFirstKeyboardFocusableNode = findFirstKeyboardFocusableNode;
    exports.findLastKeyboardFocusableNode = findLastKeyboardFocusableNode;
    exports.focusFirstFocusableNode = focusFirstFocusableNode;
    exports.focusFirstKeyboardFocusableNode = focusFirstKeyboardFocusableNode;
    exports.focusLastKeyboardFocusableNode = focusLastKeyboardFocusableNode;
    exports.focusNextFocusableNode = focusNextFocusableNode;
    exports.handleMouseUpByBlurring = handleMouseUpByBlurring;
    exports.nextFocusableNode = nextFocusableNode;
    exports.wrapFocusNextFocusableMenuItem = wrapFocusNextFocusableMenuItem;
    exports.wrapFocusPreviousFocusableMenuItem = wrapFocusPreviousFocusableMenuItem;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/Button.scss.js
var require_Button_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/Button.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Button: "Polaris-Button",
      disabled: "Polaris-Button--disabled",
      pressed: "Polaris-Button--pressed",
      variantPrimary: "Polaris-Button--variantPrimary",
      variantSecondary: "Polaris-Button--variantSecondary",
      variantTertiary: "Polaris-Button--variantTertiary",
      variantPlain: "Polaris-Button--variantPlain",
      variantMonochromePlain: "Polaris-Button--variantMonochromePlain",
      toneSuccess: "Polaris-Button--toneSuccess",
      toneCritical: "Polaris-Button--toneCritical",
      sizeMicro: "Polaris-Button--sizeMicro",
      sizeSlim: "Polaris-Button--sizeSlim",
      sizeMedium: "Polaris-Button--sizeMedium",
      sizeLarge: "Polaris-Button--sizeLarge",
      textAlignCenter: "Polaris-Button--textAlignCenter",
      textAlignStart: "Polaris-Button--textAlignStart",
      textAlignLeft: "Polaris-Button--textAlignLeft",
      textAlignEnd: "Polaris-Button--textAlignEnd",
      textAlignRight: "Polaris-Button--textAlignRight",
      fullWidth: "Polaris-Button--fullWidth",
      iconOnly: "Polaris-Button--iconOnly",
      iconWithText: "Polaris-Button--iconWithText",
      disclosure: "Polaris-Button--disclosure",
      loading: "Polaris-Button--loading",
      pressable: "Polaris-Button--pressable",
      hidden: "Polaris-Button--hidden",
      Icon: "Polaris-Button__Icon",
      Spinner: "Polaris-Button__Spinner"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.scss.js
var require_Icon_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Icon: "Polaris-Icon",
      toneInherit: "Polaris-Icon--toneInherit",
      toneBase: "Polaris-Icon--toneBase",
      toneSubdued: "Polaris-Icon--toneSubdued",
      toneCaution: "Polaris-Icon--toneCaution",
      toneWarning: "Polaris-Icon--toneWarning",
      toneCritical: "Polaris-Icon--toneCritical",
      toneInteractive: "Polaris-Icon--toneInteractive",
      toneInfo: "Polaris-Icon--toneInfo",
      toneSuccess: "Polaris-Icon--toneSuccess",
      tonePrimary: "Polaris-Icon--tonePrimary",
      toneEmphasis: "Polaris-Icon--toneEmphasis",
      toneMagic: "Polaris-Icon--toneMagic",
      toneTextCaution: "Polaris-Icon--toneTextCaution",
      toneTextWarning: "Polaris-Icon--toneTextWarning",
      toneTextCritical: "Polaris-Icon--toneTextCritical",
      toneTextInfo: "Polaris-Icon--toneTextInfo",
      toneTextPrimary: "Polaris-Icon--toneTextPrimary",
      toneTextSuccess: "Polaris-Icon--toneTextSuccess",
      toneTextMagic: "Polaris-Icon--toneTextMagic",
      Svg: "Polaris-Icon__Svg",
      Img: "Polaris-Icon__Img",
      Placeholder: "Polaris-Icon__Placeholder"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Text/Text.scss.js
var require_Text_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Text/Text.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      root: "Polaris-Text--root",
      block: "Polaris-Text--block",
      truncate: "Polaris-Text--truncate",
      visuallyHidden: "Polaris-Text--visuallyHidden",
      start: "Polaris-Text--start",
      center: "Polaris-Text--center",
      end: "Polaris-Text--end",
      justify: "Polaris-Text--justify",
      success: "Polaris-Text--success",
      critical: "Polaris-Text--critical",
      caution: "Polaris-Text--caution",
      subdued: "Polaris-Text--subdued",
      magic: "Polaris-Text--magic",
      "magic-subdued": "Polaris-Text__magic--subdued",
      "text-inverse": "Polaris-Text__text--inverse",
      headingSm: "Polaris-Text--headingSm",
      headingMd: "Polaris-Text--headingMd",
      headingLg: "Polaris-Text--headingLg",
      headingXl: "Polaris-Text--headingXl",
      heading2xl: "Polaris-Text--heading2xl",
      heading3xl: "Polaris-Text--heading3xl",
      bodyXs: "Polaris-Text--bodyXs",
      bodySm: "Polaris-Text--bodySm",
      bodyMd: "Polaris-Text--bodyMd",
      bodyLg: "Polaris-Text--bodyLg",
      regular: "Polaris-Text--regular",
      medium: "Polaris-Text--medium",
      semibold: "Polaris-Text--semibold",
      bold: "Polaris-Text--bold",
      break: "Polaris-Text--break",
      numeric: "Polaris-Text--numeric",
      "line-through": "Polaris-Text__line--through"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Text/Text.js
var require_Text = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Text/Text.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Text_module = require_Text_scss(), Text2 = ({
      alignment,
      as,
      breakWord,
      children,
      tone,
      fontWeight,
      id,
      numeric = !1,
      truncate = !1,
      variant,
      visuallyHidden = !1,
      textDecorationLine
    }) => {
      let Component = as || (visuallyHidden ? "span" : "p"), className = css.classNames(Text_module.default.root, variant && Text_module.default[variant], fontWeight && Text_module.default[fontWeight], (alignment || truncate) && Text_module.default.block, alignment && Text_module.default[alignment], breakWord && Text_module.default.break, tone && Text_module.default[tone], numeric && Text_module.default.numeric, truncate && Text_module.default.truncate, visuallyHidden && Text_module.default.visuallyHidden, textDecorationLine && Text_module.default[textDecorationLine]);
      return /* @__PURE__ */ React2.createElement(Component, Object.assign({
        className
      }, id && {
        id
      }), children);
    };
    exports.Text = Text2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.js
var require_Icon = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Icon/Icon.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Icon_module = require_Icon_scss(), Text2 = require_Text();
    function Icon({
      source,
      tone,
      accessibilityLabel
    }) {
      let sourceType;
      typeof source == "function" ? sourceType = "function" : source === "placeholder" ? sourceType = "placeholder" : sourceType = "external";
      let className = css.classNames(Icon_module.default.Icon, tone && Icon_module.default[css.variationName("tone", tone)]), SourceComponent = source, contentMarkup = {
        function: /* @__PURE__ */ React2.createElement(SourceComponent, {
          className: Icon_module.default.Svg,
          focusable: "false",
          "aria-hidden": "true"
        }),
        placeholder: /* @__PURE__ */ React2.createElement("div", {
          className: Icon_module.default.Placeholder
        }),
        external: /* @__PURE__ */ React2.createElement("img", {
          className: Icon_module.default.Img,
          src: `data:image/svg+xml;utf8,${source}`,
          alt: "",
          "aria-hidden": "true"
        })
      };
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, accessibilityLabel && /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel), contentMarkup[sourceType]);
    }
    exports.Icon = Icon;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.scss.js
var require_Spinner_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Spinner: "Polaris-Spinner",
      sizeSmall: "Polaris-Spinner--sizeSmall",
      sizeLarge: "Polaris-Spinner--sizeLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.js
var require_Spinner = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Spinner/Spinner.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), Spinner_module = require_Spinner_scss(), Text2 = require_Text();
    function Spinner({
      size = "large",
      accessibilityLabel,
      hasFocusableParent
    }) {
      let isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), className = css.classNames(Spinner_module.default.Spinner, size && Spinner_module.default[css.variationName("size", size)]), spinnerSVGMarkup = size === "large" ? /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 44 44",
        xmlns: "http://www.w3.org/2000/svg"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z"
      })) : /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20",
        xmlns: "http://www.w3.org/2000/svg"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z"
      })), spanAttributes = {
        ...!hasFocusableParent && {
          role: "status"
        }
      }, accessibilityLabelMarkup = (isAfterInitialMount || !hasFocusableParent) && /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("span", {
        className
      }, spinnerSVGMarkup), /* @__PURE__ */ React2.createElement("span", spanAttributes, accessibilityLabelMarkup));
    }
    exports.Spinner = Spinner;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-disable-interaction.js
var require_use_disable_interaction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-disable-interaction.js"(exports) {
    "use strict";
    var React2 = require("react");
    function useDisableClick(disabled, handleClick) {
      let handleClickWrapper = React2.useCallback((event) => {
        disabled && (event.preventDefault(), event.stopPropagation());
      }, [disabled]);
      return disabled ? handleClickWrapper : handleClick;
    }
    exports.useDisableClick = useDisableClick;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/link/hooks.js
var require_hooks = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/link/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context5();
    function useLink() {
      return React2.useContext(context.LinkContext);
    }
    exports.useLink = useLink;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledLink/UnstyledLink.js
var require_UnstyledLink = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledLink/UnstyledLink.js"(exports) {
    "use strict";
    var React2 = require("react"), shared = require_shared(), hooks = require_hooks(), UnstyledLink = /* @__PURE__ */ React2.memo(/* @__PURE__ */ React2.forwardRef(function(props, _ref) {
      let LinkComponent = hooks.useLink();
      if (LinkComponent)
        return /* @__PURE__ */ React2.createElement(LinkComponent, Object.assign({}, shared.unstyled.props, props, {
          ref: _ref
        }));
      let {
        external,
        url,
        target: targetProp,
        ...rest
      } = props, target;
      external ? target = "_blank" : target = targetProp ?? void 0;
      let rel = target === "_blank" ? "noopener noreferrer" : void 0;
      return /* @__PURE__ */ React2.createElement("a", Object.assign({
        target
      }, rest, {
        href: url,
        rel
      }, shared.unstyled.props, {
        ref: _ref
      }));
    }));
    exports.UnstyledLink = UnstyledLink;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/UnstyledButton.js
var require_UnstyledButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/UnstyledButton.js"(exports) {
    "use strict";
    var React2 = require("react"), focus = require_focus(), useDisableInteraction = require_use_disable_interaction(), UnstyledLink = require_UnstyledLink();
    function UnstyledButton({
      id,
      children,
      className,
      url,
      external,
      target,
      download,
      submit,
      disabled,
      loading,
      pressed,
      accessibilityLabel,
      role,
      ariaControls,
      ariaExpanded,
      ariaDescribedBy,
      ariaChecked,
      onClick,
      onFocus,
      onBlur,
      onKeyDown,
      onKeyPress,
      onKeyUp,
      onMouseEnter,
      onTouchStart,
      ...rest
    }) {
      let buttonMarkup, commonProps = {
        id,
        className,
        "aria-label": accessibilityLabel
      }, interactiveProps = {
        ...commonProps,
        role,
        onClick,
        onFocus,
        onBlur,
        onMouseUp: focus.handleMouseUpByBlurring,
        onMouseEnter,
        onTouchStart
      }, handleClick = useDisableInteraction.useDisableClick(disabled, onClick);
      return url ? buttonMarkup = disabled ? (
        // Render an `<a>` so toggling disabled/enabled state changes only the
        // `href` attribute instead of replacing the whole element.
        /* @__PURE__ */ React2.createElement("a", commonProps, children)
      ) : /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, interactiveProps, {
        url,
        external,
        target,
        download
      }, rest), children) : buttonMarkup = /* @__PURE__ */ React2.createElement("button", Object.assign({}, interactiveProps, {
        "aria-disabled": disabled,
        type: submit ? "submit" : "button",
        "aria-busy": loading ? !0 : void 0,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-describedby": ariaDescribedBy,
        "aria-checked": ariaChecked,
        "aria-pressed": pressed,
        onKeyDown,
        onKeyUp,
        onKeyPress,
        onClick: handleClick,
        tabIndex: disabled ? -1 : void 0
      }, rest), children), buttonMarkup;
    }
    exports.UnstyledButton = UnstyledButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/errors.js
var require_errors = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/errors.js"(exports) {
    "use strict";
    var MissingAppProviderError = class extends Error {
      constructor(message = "") {
        super(`${message && `${message} `}Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.`), this.name = "MissingAppProviderError";
      }
    };
    exports.MissingAppProviderError = MissingAppProviderError;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/i18n/hooks.js
var require_hooks2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/i18n/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), errors = require_errors(), context = require_context2();
    function useI18n() {
      let i18n = React2.useContext(context.I18nContext);
      if (!i18n)
        throw new errors.MissingAppProviderError("No i18n was provided.");
      return i18n;
    }
    exports.useI18n = useI18n;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/Button.js
var require_Button = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/Button.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), Button_module = require_Button_scss(), Icon = require_Icon(), Spinner = require_Spinner(), UnstyledButton = require_UnstyledButton(), hooks = require_hooks2();
    function Button2({
      id,
      children,
      url,
      disabled,
      external,
      download,
      target,
      submit,
      loading,
      pressed,
      accessibilityLabel,
      role,
      ariaControls,
      ariaExpanded,
      ariaDescribedBy,
      ariaChecked,
      onClick,
      onFocus,
      onBlur,
      onKeyDown,
      onKeyPress,
      onKeyUp,
      onMouseEnter,
      onTouchStart,
      onPointerDown,
      icon,
      disclosure,
      removeUnderline,
      size = "medium",
      textAlign = "center",
      fullWidth,
      dataPrimaryLink,
      tone,
      variant = "secondary"
    }) {
      let i18n = hooks.useI18n(), isDisabled = disabled || loading, className = css.classNames(Button_module.default.Button, Button_module.default.pressable, Button_module.default[css.variationName("variant", variant)], Button_module.default[css.variationName("size", size)], Button_module.default[css.variationName("textAlign", textAlign)], fullWidth && Button_module.default.fullWidth, disclosure && Button_module.default.disclosure, icon && children && Button_module.default.iconWithText, icon && children == null && Button_module.default.iconOnly, isDisabled && Button_module.default.disabled, loading && Button_module.default.loading, pressed && !disabled && !url && Button_module.default.pressed, removeUnderline && Button_module.default.removeUnderline, tone && Button_module.default[css.variationName("tone", tone)]), disclosureMarkup = disclosure ? /* @__PURE__ */ React2.createElement("span", {
        className: loading ? Button_module.default.hidden : Button_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: loading ? "placeholder" : getDisclosureIconSource(disclosure, polarisIcons.ChevronUpIcon, polarisIcons.ChevronDownIcon)
      })) : null, iconSource = isIconSource(icon) ? /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: loading ? "placeholder" : icon
      }) : icon, iconMarkup = iconSource ? /* @__PURE__ */ React2.createElement("span", {
        className: loading ? Button_module.default.hidden : Button_module.default.Icon
      }, iconSource) : null, childMarkup = children ? /* @__PURE__ */ React2.createElement("span", {
        className: removeUnderline ? Button_module.default.removeUnderline : "",
        key: disabled ? "text-disabled" : "text"
      }, children) : null, spinnerSVGMarkup = loading ? /* @__PURE__ */ React2.createElement("span", {
        className: Button_module.default.Spinner
      }, /* @__PURE__ */ React2.createElement(Spinner.Spinner, {
        size: "small",
        accessibilityLabel: i18n.translate("Polaris.Button.spinnerAccessibilityLabel")
      })) : null, commonProps = {
        id,
        className,
        accessibilityLabel,
        ariaDescribedBy,
        role,
        onClick,
        onFocus,
        onBlur,
        onMouseUp: focus.handleMouseUpByBlurring,
        onMouseEnter,
        onTouchStart,
        "data-primary-link": dataPrimaryLink
      }, linkProps = {
        url,
        external,
        download,
        target
      }, actionProps = {
        submit,
        disabled: isDisabled,
        loading,
        ariaControls,
        ariaExpanded,
        ariaChecked,
        pressed,
        onKeyDown,
        onKeyUp,
        onKeyPress,
        onPointerDown
      };
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, Object.assign({}, commonProps, linkProps, actionProps), spinnerSVGMarkup, iconMarkup, childMarkup, disclosureMarkup);
    }
    function isIconSource(x) {
      return typeof x == "string" || typeof x == "object" && x.body || typeof x == "function";
    }
    function getDisclosureIconSource(disclosure, upIcon, downIcon) {
      return disclosure === "select" ? polarisIcons.SelectIcon : disclosure === "up" ? upIcon : downIcon;
    }
    exports.Button = Button2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Button/utils.js
var require_utils = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Button/utils.js"(exports) {
    "use strict";
    var React2 = require("react"), Button2 = require_Button();
    function buttonsFrom(actions, overrides = {}) {
      return Array.isArray(actions) ? actions.map((action, index) => buttonFrom(action, overrides, index)) : buttonFrom(actions, overrides);
    }
    function buttonFrom({
      content,
      onAction,
      plain,
      destructive,
      ...action
    }, overrides, key) {
      let plainVariant = plain ? "plain" : void 0, destructiveVariant = destructive ? "primary" : void 0, tone = !overrides?.tone && destructive ? "critical" : overrides?.tone;
      return /* @__PURE__ */ React2.createElement(Button2.Button, Object.assign({
        key,
        onClick: onAction,
        tone,
        variant: plainVariant || destructiveVariant
      }, action, overrides), content);
    }
    exports.buttonFrom = buttonFrom;
    exports.buttonsFrom = buttonsFrom;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.scss.js
var require_ShadowBevel_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ShadowBevel: "Polaris-ShadowBevel"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.js
var require_ShadowBevel = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ShadowBevel/ShadowBevel.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), ShadowBevel_module = require_ShadowBevel_scss();
    function ShadowBevel(props) {
      let {
        as = "div",
        bevel = !0,
        borderRadius,
        boxShadow,
        children,
        zIndex = "0"
      } = props, Component = as;
      return /* @__PURE__ */ React2.createElement(Component, {
        className: ShadowBevel_module.default.ShadowBevel,
        style: {
          "--pc-shadow-bevel-z-index": zIndex,
          ...css.getResponsiveValue("shadow-bevel", "content", mapResponsiveProp(bevel, (bevel2) => bevel2 ? '""' : "none")),
          ...css.getResponsiveValue("shadow-bevel", "box-shadow", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-shadow-${boxShadow})` : "none")),
          ...css.getResponsiveValue("shadow-bevel", "border-radius", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-border-radius-${borderRadius})` : "var(--p-border-radius-0)"))
        }
      }, children);
    }
    function mapResponsiveProp(responsiveProp, callback) {
      return typeof responsiveProp == "boolean" ? callback(responsiveProp) : Object.fromEntries(Object.entries(responsiveProp).map(([breakpointsAlias, value]) => [breakpointsAlias, callback(value)]));
    }
    exports.ShadowBevel = ShadowBevel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Box/Box.scss.js
var require_Box_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Box/Box.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      listReset: "Polaris-Box--listReset",
      Box: "Polaris-Box",
      visuallyHidden: "Polaris-Box--visuallyHidden",
      printHidden: "Polaris-Box--printHidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Box/Box.js
var require_Box = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Box/Box.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Box_module = require_Box_scss(), Box = /* @__PURE__ */ React2.forwardRef(({
      as = "div",
      background,
      borderColor,
      borderStyle,
      borderWidth,
      borderBlockStartWidth,
      borderBlockEndWidth,
      borderInlineStartWidth,
      borderInlineEndWidth,
      borderRadius,
      borderEndStartRadius,
      borderEndEndRadius,
      borderStartStartRadius,
      borderStartEndRadius,
      children,
      color,
      id,
      minHeight,
      minWidth,
      maxWidth,
      overflowX,
      overflowY,
      outlineColor,
      outlineStyle,
      outlineWidth,
      padding,
      paddingBlock,
      paddingBlockStart,
      paddingBlockEnd,
      paddingInline,
      paddingInlineStart,
      paddingInlineEnd,
      role,
      shadow,
      tabIndex,
      width,
      printHidden,
      visuallyHidden,
      position,
      insetBlockStart,
      insetBlockEnd,
      insetInlineStart,
      insetInlineEnd,
      zIndex,
      opacity,
      ...restProps
    }, ref) => {
      let borderStyleValue = borderStyle || (borderColor || borderWidth || borderBlockStartWidth || borderBlockEndWidth || borderInlineStartWidth || borderInlineEndWidth ? "solid" : void 0), outlineStyleValue = outlineStyle || (outlineColor || outlineWidth ? "solid" : void 0), style = {
        "--pc-box-color": color ? `var(--p-color-${color})` : void 0,
        "--pc-box-background": background ? `var(--p-color-${background})` : void 0,
        // eslint-disable-next-line no-nested-ternary
        "--pc-box-border-color": borderColor ? borderColor === "transparent" ? "transparent" : `var(--p-color-${borderColor})` : void 0,
        "--pc-box-border-style": borderStyleValue,
        "--pc-box-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
        "--pc-box-border-end-start-radius": borderEndStartRadius ? `var(--p-border-radius-${borderEndStartRadius})` : void 0,
        "--pc-box-border-end-end-radius": borderEndEndRadius ? `var(--p-border-radius-${borderEndEndRadius})` : void 0,
        "--pc-box-border-start-start-radius": borderStartStartRadius ? `var(--p-border-radius-${borderStartStartRadius})` : void 0,
        "--pc-box-border-start-end-radius": borderStartEndRadius ? `var(--p-border-radius-${borderStartEndRadius})` : void 0,
        "--pc-box-border-width": borderWidth ? `var(--p-border-width-${borderWidth})` : void 0,
        "--pc-box-border-block-start-width": borderBlockStartWidth ? `var(--p-border-width-${borderBlockStartWidth})` : void 0,
        "--pc-box-border-block-end-width": borderBlockEndWidth ? `var(--p-border-width-${borderBlockEndWidth})` : void 0,
        "--pc-box-border-inline-start-width": borderInlineStartWidth ? `var(--p-border-width-${borderInlineStartWidth})` : void 0,
        "--pc-box-border-inline-end-width": borderInlineEndWidth ? `var(--p-border-width-${borderInlineEndWidth})` : void 0,
        "--pc-box-min-height": minHeight,
        "--pc-box-min-width": minWidth,
        "--pc-box-max-width": maxWidth,
        "--pc-box-outline-color": outlineColor ? `var(--p-color-${outlineColor})` : void 0,
        "--pc-box-outline-style": outlineStyleValue,
        "--pc-box-outline-width": outlineWidth ? `var(--p-border-width-${outlineWidth})` : void 0,
        "--pc-box-overflow-x": overflowX,
        "--pc-box-overflow-y": overflowY,
        ...css.getResponsiveProps("box", "padding-block-start", "space", paddingBlockStart || paddingBlock || padding),
        ...css.getResponsiveProps("box", "padding-block-end", "space", paddingBlockEnd || paddingBlock || padding),
        ...css.getResponsiveProps("box", "padding-inline-start", "space", paddingInlineStart || paddingInline || padding),
        ...css.getResponsiveProps("box", "padding-inline-end", "space", paddingInlineEnd || paddingInline || padding),
        "--pc-box-shadow": shadow ? `var(--p-shadow-${shadow})` : void 0,
        "--pc-box-width": width,
        position,
        "--pc-box-inset-block-start": insetBlockStart ? `var(--p-space-${insetBlockStart})` : void 0,
        "--pc-box-inset-block-end": insetBlockEnd ? `var(--p-space-${insetBlockEnd})` : void 0,
        "--pc-box-inset-inline-start": insetInlineStart ? `var(--p-space-${insetInlineStart})` : void 0,
        "--pc-box-inset-inline-end": insetInlineEnd ? `var(--p-space-${insetInlineEnd})` : void 0,
        zIndex,
        opacity
      }, className = css.classNames(Box_module.default.Box, visuallyHidden && Box_module.default.visuallyHidden, printHidden && Box_module.default.printHidden, as === "ul" && Box_module.default.listReset);
      return /* @__PURE__ */ React2.createElement(as, {
        className,
        id,
        ref,
        style: css.sanitizeCustomProperties(style),
        role,
        tabIndex,
        ...restProps
      }, children);
    });
    Box.displayName = "Box";
    exports.Box = Box;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Card/Card.js
var require_Card = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Card/Card.js"(exports) {
    "use strict";
    var React2 = require("react"), breakpoints = require_breakpoints(), withinContentContext = require_within_content_context(), ShadowBevel = require_ShadowBevel(), Box = require_Box(), Card2 = ({
      children,
      background = "bg-surface",
      padding = {
        xs: "400"
      },
      roundedAbove = "sm"
    }) => {
      let breakpoints$1 = breakpoints.useBreakpoints(), defaultBorderRadius = "300", hasBorderRadius = Boolean(breakpoints$1[`${roundedAbove}Up`]);
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement(ShadowBevel.ShadowBevel, {
        boxShadow: "100",
        borderRadius: hasBorderRadius ? defaultBorderRadius : "0",
        zIndex: "32"
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        background,
        padding,
        overflowX: "hidden",
        overflowY: "hidden",
        minHeight: "100%"
      }, children)));
    };
    exports.Card = Card2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.scss.js
var require_SettingAction_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SettingAction: "Polaris-SettingAction",
      Setting: "Polaris-SettingAction__Setting",
      Action: "Polaris-SettingAction__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.js
var require_SettingAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingAction/SettingAction.js"(exports) {
    "use strict";
    var React2 = require("react"), SettingAction_module = require_SettingAction_scss();
    function SettingAction({
      action,
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.SettingAction
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.Setting
      }, children), /* @__PURE__ */ React2.createElement("div", {
        className: SettingAction_module.default.Action
      }, action));
    }
    exports.SettingAction = SettingAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.scss.js
var require_InlineStack_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineStack: "Polaris-InlineStack"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.js
var require_InlineStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineStack/InlineStack.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), InlineStack_module = require_InlineStack_scss(), InlineStack = function({
      as: Element2 = "div",
      align,
      blockAlign,
      gap,
      wrap = !0,
      children
    }) {
      let style = {
        "--pc-inline-stack-align": align,
        "--pc-inline-stack-block-align": blockAlign,
        "--pc-inline-stack-wrap": wrap ? "wrap" : "nowrap",
        ...css.getResponsiveProps("inline-stack", "gap", "space", gap)
      };
      return /* @__PURE__ */ React2.createElement(Element2, {
        className: InlineStack_module.default.InlineStack,
        style
      }, children);
    };
    exports.InlineStack = InlineStack;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.scss.js
var require_BlockStack_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      BlockStack: "Polaris-BlockStack",
      listReset: "Polaris-BlockStack--listReset",
      fieldsetReset: "Polaris-BlockStack--fieldsetReset"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.js
var require_BlockStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BlockStack/BlockStack.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), BlockStack_module = require_BlockStack_scss(), BlockStack2 = ({
      as = "div",
      children,
      align,
      inlineAlign,
      gap,
      id,
      reverseOrder = !1,
      ...restProps
    }) => {
      let className = css.classNames(BlockStack_module.default.BlockStack, (as === "ul" || as === "ol") && BlockStack_module.default.listReset, as === "fieldset" && BlockStack_module.default.fieldsetReset), style = {
        "--pc-block-stack-align": align ? `${align}` : null,
        "--pc-block-stack-inline-align": inlineAlign ? `${inlineAlign}` : null,
        "--pc-block-stack-order": reverseOrder ? "column-reverse" : "column",
        ...css.getResponsiveProps("block-stack", "gap", "space", gap)
      };
      return /* @__PURE__ */ React2.createElement(as, {
        className,
        style: css.sanitizeCustomProperties(style),
        ...restProps
      }, children);
    };
    exports.BlockStack = BlockStack2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.scss.js
var require_Avatar_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Avatar: "Polaris-Avatar",
      imageHasLoaded: "Polaris-Avatar--imageHasLoaded",
      Text: "Polaris-Avatar__Text",
      long: "Polaris-Avatar--long",
      hidden: "Polaris-Avatar--hidden",
      sizeXs: "Polaris-Avatar--sizeXs",
      sizeSm: "Polaris-Avatar--sizeSm",
      sizeMd: "Polaris-Avatar--sizeMd",
      sizeLg: "Polaris-Avatar--sizeLg",
      sizeXl: "Polaris-Avatar--sizeXl",
      styleOne: "Polaris-Avatar--styleOne",
      styleTwo: "Polaris-Avatar--styleTwo",
      styleThree: "Polaris-Avatar--styleThree",
      styleFour: "Polaris-Avatar--styleFour",
      styleFive: "Polaris-Avatar--styleFive",
      styleSix: "Polaris-Avatar--styleSix",
      styleSeven: "Polaris-Avatar--styleSeven",
      Image: "Polaris-Avatar__Image",
      Initials: "Polaris-Avatar__Initials",
      Svg: "Polaris-Avatar__Svg"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Image/Image.js
var require_Image = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Image/Image.js"(exports) {
    "use strict";
    var React2 = require("react");
    function Image({
      alt,
      sourceSet,
      source,
      crossOrigin,
      onLoad,
      className,
      ...rest
    }) {
      let finalSourceSet = sourceSet ? sourceSet.map(({
        source: subSource,
        descriptor
      }) => `${subSource} ${descriptor}`).join(",") : null, handleLoad = React2.useCallback(() => {
        onLoad && onLoad();
      }, [onLoad]);
      return /* @__PURE__ */ React2.createElement("img", Object.assign({
        alt,
        src: source,
        crossOrigin,
        className,
        onLoad: handleLoad
      }, finalSourceSet ? {
        srcSet: finalSourceSet
      } : {}, rest));
    }
    exports.Image = Image;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.js
var require_Avatar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Avatar/Avatar.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), Avatar_module = require_Avatar_scss(), hooks = require_hooks2(), Image = require_Image(), Status;
    (function(Status2) {
      Status2.Pending = "PENDING", Status2.Loaded = "LOADED", Status2.Errored = "ERRORED";
    })(Status || (Status = {}));
    var STYLE_CLASSES = ["one", "two", "three", "four", "five", "six", "seven"], avatarStrokeWidth = {
      xs: "3",
      sm: "2.5",
      md: "2.5",
      lg: "2.5",
      xl: "2"
    };
    function xorHash(str) {
      let hash = 0;
      for (let char of str)
        hash ^= char.charCodeAt(0);
      return hash;
    }
    function styleClass(name) {
      return name ? STYLE_CLASSES[xorHash(name) % STYLE_CLASSES.length] : STYLE_CLASSES[0];
    }
    function Avatar({
      name,
      source,
      onError,
      initials,
      customer,
      size = "md",
      accessibilityLabel
    }) {
      let i18n = hooks.useI18n(), isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), [status, setStatus] = React2.useState(Status.Pending);
      React2.useEffect(() => {
        setStatus(Status.Pending);
      }, [source]);
      let handleError = React2.useCallback(() => {
        setStatus(Status.Errored), onError && onError();
      }, [onError]), handleLoad = React2.useCallback(() => {
        setStatus(Status.Loaded);
      }, []), hasImage = source && status !== Status.Errored, nameString = name || initials, label;
      if (accessibilityLabel)
        label = accessibilityLabel;
      else if (name)
        label = name;
      else if (initials) {
        let splitInitials = initials.split("").join(" ");
        label = i18n.translate("Polaris.Avatar.labelWithInitials", {
          initials: splitInitials
        });
      }
      let className = css.classNames(Avatar_module.default.Avatar, size && Avatar_module.default[css.variationName("size", size)], hasImage && status === Status.Loaded && Avatar_module.default.imageHasLoaded, !customer && !hasImage && Avatar_module.default[css.variationName("style", styleClass(nameString))]), textClassName = css.classNames(Avatar_module.default.Text, (initials?.length || 0) > 2 && Avatar_module.default.long), imageClassName = css.classNames(Avatar_module.default.Image, status !== Status.Loaded && Avatar_module.default.hidden), imageMarkUp = source && isAfterInitialMount && status !== Status.Errored ? /* @__PURE__ */ React2.createElement(Image.Image, {
        className: imageClassName,
        source,
        alt: "",
        role: "presentation",
        onLoad: handleLoad,
        onError: handleError
      }) : null, verticalOffset = "0.35em", avatarPath = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
        fill: "none",
        d: "M25.5 13.5C25.5 16.5376 23.0376 19 20 19C16.9624 19 14.5 16.5376 14.5 13.5C14.5 10.4624 16.9624 8 20 8C23.0376 8 25.5 10.4624 25.5 13.5Z",
        stroke: "currentColor",
        strokeWidth: avatarStrokeWidth[size]
      }), /* @__PURE__ */ React2.createElement("path", {
        fill: "none",
        d: "M10.3433 29.682L9.47 31.254C9.03481 32.0373 9.60125 33 10.4974 33H29.5026C30.3988 33 30.9652 32.0373 30.53 31.254L29.6567 29.682C27.7084 26.175 24.0119 24 20 24C15.9882 24 12.2916 26.175 10.3433 29.682Z",
        stroke: "currentColor",
        strokeWidth: avatarStrokeWidth[size],
        strokeLinecap: "round",
        strokeLinejoin: "round"
      })), avatarBody = customer || !initials ? avatarPath : /* @__PURE__ */ React2.createElement("text", {
        className: textClassName,
        x: "50%",
        y: "50%",
        dy: verticalOffset,
        fill: "currentColor",
        textAnchor: "middle"
      }, initials), svgMarkup = hasImage ? null : /* @__PURE__ */ React2.createElement("span", {
        className: Avatar_module.default.Initials
      }, /* @__PURE__ */ React2.createElement("svg", {
        className: Avatar_module.default.Svg,
        viewBox: "0 0 40 40"
      }, avatarBody));
      return /* @__PURE__ */ React2.createElement("span", {
        "aria-label": label,
        role: label ? "img" : "presentation",
        className
      }, svgMarkup, imageMarkUp);
    }
    exports.Avatar = Avatar;
    exports.STYLE_CLASSES = STYLE_CLASSES;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AccountConnection/AccountConnection.js
var require_AccountConnection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AccountConnection/AccountConnection.js"(exports) {
    "use strict";
    var React2 = require("react"), breakpoints = require_breakpoints(), utils = require_utils(), Card2 = require_Card(), SettingAction = require_SettingAction(), InlineStack = require_InlineStack(), BlockStack2 = require_BlockStack(), Avatar = require_Avatar(), Box = require_Box(), Text2 = require_Text();
    function AccountConnection({
      connected = !1,
      action,
      avatarUrl,
      accountName = "",
      title,
      details,
      termsOfService
    }) {
      let breakpoints$1 = breakpoints.useBreakpoints(), initials = accountName ? accountName.split(/\s+/).map((name) => name[0]).join("") : void 0, avatarMarkup = connected ? /* @__PURE__ */ React2.createElement("span", null, /* @__PURE__ */ React2.createElement(Avatar.Avatar, {
        accessibilityLabel: "",
        name: accountName,
        initials,
        source: avatarUrl
      })) : null, titleContent = title || accountName, titleMarkup = /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "h2",
        variant: "headingSm"
      }, titleContent), detailsMarkup = details ? /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        tone: "subdued"
      }, details) : null, termsOfServiceMarkup = termsOfService ? /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockStart: breakpoints$1.mdUp ? "400" : "500"
      }, termsOfService) : null, actionElement = action ? utils.buttonFrom(action, {
        variant: connected ? void 0 : "primary"
      }) : null;
      return /* @__PURE__ */ React2.createElement(Card2.Card, null, /* @__PURE__ */ React2.createElement(SettingAction.SettingAction, {
        action: actionElement
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400"
      }, avatarMarkup, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "100"
      }, titleMarkup, detailsMarkup))), termsOfServiceMarkup);
    }
    exports.AccountConnection = AccountConnection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FilterActionsProvider/FilterActionsProvider.js
var require_FilterActionsProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FilterActionsProvider/FilterActionsProvider.js"(exports) {
    "use strict";
    var React2 = require("react"), FilterActionsContext = /* @__PURE__ */ React2.createContext(!1);
    function FilterActionsProvider({
      children,
      filterActions
    }) {
      return /* @__PURE__ */ React2.createElement(FilterActionsContext.Provider, {
        value: filterActions
      }, children);
    }
    exports.FilterActionsContext = FilterActionsContext;
    exports.FilterActionsProvider = FilterActionsProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.scss.js
var require_ActionList_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Item: "Polaris-ActionList__Item",
      default: "Polaris-ActionList--default",
      active: "Polaris-ActionList--active",
      destructive: "Polaris-ActionList--destructive",
      disabled: "Polaris-ActionList--disabled",
      Prefix: "Polaris-ActionList__Prefix",
      Suffix: "Polaris-ActionList__Suffix",
      indented: "Polaris-ActionList--indented",
      menu: "Polaris-ActionList--menu",
      Text: "Polaris-ActionList__Text"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/within-filter-context.js
var require_within_filter_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/within-filter-context.js"(exports) {
    "use strict";
    var React2 = require("react"), WithinFilterContext = /* @__PURE__ */ React2.createContext(!1);
    exports.WithinFilterContext = WithinFilterContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.scss.js
var require_Badge_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Badge: "Polaris-Badge",
      toneSuccess: "Polaris-Badge--toneSuccess",
      "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
      toneInfo: "Polaris-Badge--toneInfo",
      "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
      toneAttention: "Polaris-Badge--toneAttention",
      "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
      toneWarning: "Polaris-Badge--toneWarning",
      "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
      toneCritical: "Polaris-Badge--toneCritical",
      "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
      toneNew: "Polaris-Badge--toneNew",
      toneMagic: "Polaris-Badge--toneMagic",
      "toneRead-only": "Polaris-Badge__toneRead--only",
      toneEnabled: "Polaris-Badge--toneEnabled",
      sizeLarge: "Polaris-Badge--sizeLarge",
      withinFilter: "Polaris-Badge--withinFilter",
      Icon: "Polaris-Badge__Icon",
      PipContainer: "Polaris-Badge__PipContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/types.js
var require_types2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/types.js"(exports) {
    "use strict";
    exports.ToneValue = void 0;
    (function(ToneValue) {
      ToneValue.Info = "info", ToneValue.Success = "success", ToneValue.Warning = "warning", ToneValue.Critical = "critical", ToneValue.Attention = "attention", ToneValue.New = "new", ToneValue.Magic = "magic", ToneValue.InfoStrong = "info-strong", ToneValue.SuccessStrong = "success-strong", ToneValue.WarningStrong = "warning-strong", ToneValue.CriticalStrong = "critical-strong", ToneValue.AttentionStrong = "attention-strong", ToneValue.ReadOnly = "read-only", ToneValue.Enabled = "enabled";
    })(exports.ToneValue || (exports.ToneValue = {}));
    exports.ProgressValue = void 0;
    (function(ProgressValue) {
      ProgressValue.Incomplete = "incomplete", ProgressValue.PartiallyComplete = "partiallyComplete", ProgressValue.Complete = "complete";
    })(exports.ProgressValue || (exports.ProgressValue = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/utils.js
var require_utils2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/utils.js"(exports) {
    "use strict";
    var types = require_types2();
    function getDefaultAccessibilityLabel(i18n, progress, tone) {
      let progressLabel = "", toneLabel = "";
      if (!progress && !tone)
        return "";
      switch (progress) {
        case types.ProgressValue.Incomplete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.incomplete");
          break;
        case types.ProgressValue.PartiallyComplete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.partiallyComplete");
          break;
        case types.ProgressValue.Complete:
          progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.complete");
          break;
      }
      switch (tone) {
        case types.ToneValue.Info:
        case types.ToneValue.InfoStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.info");
          break;
        case types.ToneValue.Success:
        case types.ToneValue.SuccessStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.success");
          break;
        case types.ToneValue.Warning:
        case types.ToneValue.WarningStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.warning");
          break;
        case types.ToneValue.Critical:
        case types.ToneValue.CriticalStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.critical");
          break;
        case types.ToneValue.Attention:
        case types.ToneValue.AttentionStrong:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.attention");
          break;
        case types.ToneValue.New:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.new");
          break;
        case types.ToneValue.ReadOnly:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.readOnly");
          break;
        case types.ToneValue.Enabled:
          toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.enabled");
          break;
      }
      return !tone && progress ? progressLabel : tone && !progress ? toneLabel : i18n.translate("Polaris.Badge.progressAndTone", {
        progressLabel,
        toneLabel
      });
    }
    exports.getDefaultAccessibilityLabel = getDefaultAccessibilityLabel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.scss.js
var require_Pip_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Pip: "Polaris-Badge-Pip",
      toneInfo: "Polaris-Badge-Pip--toneInfo",
      toneSuccess: "Polaris-Badge-Pip--toneSuccess",
      toneNew: "Polaris-Badge-Pip--toneNew",
      toneAttention: "Polaris-Badge-Pip--toneAttention",
      toneWarning: "Polaris-Badge-Pip--toneWarning",
      toneCritical: "Polaris-Badge-Pip--toneCritical",
      progressIncomplete: "Polaris-Badge-Pip--progressIncomplete",
      progressPartiallyComplete: "Polaris-Badge-Pip--progressPartiallyComplete",
      progressComplete: "Polaris-Badge-Pip--progressComplete"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.js
var require_Pip = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/components/Pip/Pip.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), utils = require_utils2(), Pip_module = require_Pip_scss(), hooks = require_hooks2(), Text2 = require_Text();
    function Pip({
      tone,
      progress = "complete",
      accessibilityLabelOverride
    }) {
      let i18n = hooks.useI18n(), className = css.classNames(Pip_module.default.Pip, tone && Pip_module.default[css.variationName("tone", tone)], progress && Pip_module.default[css.variationName("progress", progress)]), accessibilityLabel = accessibilityLabelOverride || utils.getDefaultAccessibilityLabel(i18n, progress, tone);
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel));
    }
    exports.Pip = Pip;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.js
var require_Badge = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Badge/Badge.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), withinFilterContext = require_within_filter_context(), Badge_module = require_Badge_scss(), utils = require_utils2(), Pip = require_Pip(), hooks = require_hooks2(), Icon = require_Icon(), Text2 = require_Text(), DEFAULT_SIZE = "medium", progressIconMap = {
      complete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        d: "M6 10c0-.93 0-1.395.102-1.776a3 3 0 0 1 2.121-2.122C8.605 6 9.07 6 10 6c.93 0 1.395 0 1.776.102a3 3 0 0 1 2.122 2.122C14 8.605 14 9.07 14 10s0 1.395-.102 1.777a3 3 0 0 1-2.122 2.12C11.395 14 10.93 14 10 14s-1.395 0-1.777-.102a3 3 0 0 1-2.12-2.121C6 11.395 6 10.93 6 10Z"
      })),
      partiallyComplete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        fillRule: "evenodd",
        d: "m8.888 6.014-.017-.018-.02.02c-.253.013-.45.038-.628.086a3 3 0 0 0-2.12 2.122C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.121 2.12C8.605 14 9.07 14 10 14c.93 0 1.395 0 1.776-.102a3 3 0 0 0 2.122-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.122-2.122C11.395 6 10.93 6 10 6c-.475 0-.829 0-1.112.014ZM8.446 7.34a1.75 1.75 0 0 0-1.041.94l4.314 4.315c.443-.2.786-.576.941-1.042L8.446 7.34Zm4.304 2.536L10.124 7.25c.908.001 1.154.013 1.329.06a1.75 1.75 0 0 1 1.237 1.237c.047.175.059.42.06 1.329ZM8.547 12.69c.182.05.442.06 1.453.06h.106L7.25 9.894V10c0 1.01.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237Z"
      })),
      incomplete: () => /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ React2.createElement("path", {
        fillRule: "evenodd",
        d: "M8.547 12.69c.183.05.443.06 1.453.06s1.27-.01 1.453-.06a1.75 1.75 0 0 0 1.237-1.237c.05-.182.06-.443.06-1.453s-.01-1.27-.06-1.453a1.75 1.75 0 0 0-1.237-1.237c-.182-.05-.443-.06-1.453-.06s-1.27.01-1.453.06A1.75 1.75 0 0 0 7.31 8.547c-.05.183-.06.443-.06 1.453s.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237ZM6.102 8.224C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.122 2.12C8.605 14 9.07 14 10 14s1.395 0 1.777-.102a3 3 0 0 0 2.12-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.121-2.122C11.395 6 10.93 6 10 6c-.93 0-1.395 0-1.776.102a3 3 0 0 0-2.122 2.122Z"
      }))
    };
    function Badge({
      children,
      tone,
      progress,
      icon,
      size = DEFAULT_SIZE,
      toneAndProgressLabelOverride
    }) {
      let i18n = hooks.useI18n(), withinFilter = React2.useContext(withinFilterContext.WithinFilterContext), className = css.classNames(Badge_module.default.Badge, tone && Badge_module.default[css.variationName("tone", tone)], size && size !== DEFAULT_SIZE && Badge_module.default[css.variationName("size", size)], withinFilter && Badge_module.default.withinFilter), accessibilityLabel = toneAndProgressLabelOverride || utils.getDefaultAccessibilityLabel(i18n, progress, tone), accessibilityMarkup = Boolean(accessibilityLabel) && /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, accessibilityLabel);
      return progress && !icon && (accessibilityMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: Badge_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        accessibilityLabel,
        source: progressIconMap[progress]
      }))), /* @__PURE__ */ React2.createElement("span", {
        className
      }, accessibilityMarkup, icon && /* @__PURE__ */ React2.createElement("span", {
        className: Badge_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: icon
      })), children && /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: tone === "new" ? "medium" : void 0
      }, children));
    }
    Badge.Pip = Pip.Pip;
    exports.Badge = Badge;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-toggle.js
var require_use_toggle = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-toggle.js"(exports) {
    "use strict";
    var React2 = require("react");
    function useToggle(initialState) {
      let [value, setState] = React2.useState(initialState);
      return {
        value,
        toggle: React2.useCallback(() => setState((state) => !state), []),
        setTrue: React2.useCallback(() => setState(!0), []),
        setFalse: React2.useCallback(() => setState(!1), [])
      };
    }
    exports.useToggle = useToggle;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.scss.js
var require_Tooltip_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TooltipContainer: "Polaris-Tooltip__TooltipContainer",
      HasUnderline: "Polaris-Tooltip__HasUnderline"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/hooks.js
var require_hooks3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/ephemeral-presence-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context9();
    function useEphemeralPresenceManager() {
      let ephemeralPresenceManager = React2.useContext(context.EphemeralPresenceManagerContext);
      if (!ephemeralPresenceManager)
        throw new Error("No ephemeral presence manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return ephemeralPresenceManager;
    }
    function useReadOnlyEphemeralPresenceManager() {
      let {
        presenceList,
        presenceCounter
      } = useEphemeralPresenceManager();
      return {
        presenceList,
        presenceCounter
      };
    }
    exports.useEphemeralPresenceManager = useEphemeralPresenceManager;
    exports.useReadOnlyEphemeralPresenceManager = useReadOnlyEphemeralPresenceManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/portals/hooks.js
var require_hooks4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/portals/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context7();
    function usePortalsManager() {
      let portalsManager = React2.useContext(context.PortalsManagerContext);
      if (!portalsManager)
        throw new Error("No portals manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return portalsManager;
    }
    exports.usePortalsManager = usePortalsManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Portal/Portal.js
var require_Portal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Portal/Portal.js"(exports) {
    "use strict";
    var React2 = require("react"), reactDom = require("react-dom"), hooks = require_hooks4();
    function Portal({
      children,
      idPrefix = "",
      onPortalCreated = noop
    }) {
      let {
        container
      } = hooks.usePortalsManager(), uniqueId = React2.useId(), portalId = idPrefix !== "" ? `${idPrefix}-${uniqueId}` : uniqueId;
      return React2.useEffect(() => {
        onPortalCreated();
      }, [onPortalCreated]), container ? /* @__PURE__ */ reactDom.createPortal(/* @__PURE__ */ React2.createElement("div", {
        "data-portal-id": portalId
      }, children), container) : null;
    }
    function noop() {
    }
    exports.Portal = Portal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.scss.js
var require_TooltipOverlay_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TooltipOverlay: "Polaris-Tooltip-TooltipOverlay",
      Tail: "Polaris-Tooltip-TooltipOverlay__Tail",
      positionedAbove: "Polaris-Tooltip-TooltipOverlay--positionedAbove",
      measuring: "Polaris-Tooltip-TooltipOverlay--measuring",
      measured: "Polaris-Tooltip-TooltipOverlay--measured",
      instant: "Polaris-Tooltip-TooltipOverlay--instant",
      Content: "Polaris-Tooltip-TooltipOverlay__Content",
      default: "Polaris-Tooltip-TooltipOverlay--default",
      wide: "Polaris-Tooltip-TooltipOverlay--wide"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/utilities/math.js
var require_math = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/utilities/math.js"(exports) {
    "use strict";
    var geometry = require_geometry();
    function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset = 0) {
      let activatorTop = activatorRect.top, activatorBottom = activatorTop + activatorRect.height, spaceAbove = activatorRect.top - topBarOffset, spaceBelow = containerRect.height - activatorRect.top - activatorRect.height, desiredHeight = overlayRect.height, verticalMargins = overlayMargins.activator + overlayMargins.container, minimumSpaceToScroll = overlayMargins.container, distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0), distanceToBottomScroll = containerRect.top + Math.min(containerRect.height, scrollableContainerRect.top + scrollableContainerRect.height) - (activatorRect.top + activatorRect.height), enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll, enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll, heightIfBelow = Math.min(spaceBelow, desiredHeight), heightIfAbove = Math.min(spaceAbove, desiredHeight), containerRectTop = fixed ? 0 : containerRect.top, positionIfAbove = {
        height: heightIfAbove - verticalMargins,
        top: activatorTop + containerRectTop - heightIfAbove,
        positioning: "above"
      }, positionIfBelow = {
        height: heightIfBelow - verticalMargins,
        top: activatorBottom + containerRectTop,
        positioning: "below"
      };
      return preferredPosition === "above" ? (enoughSpaceFromTopScroll || distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow : preferredPosition === "below" ? (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove : enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll ? spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow : distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
    }
    function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
      let maximum = containerRect.width - overlayRect.width;
      if (preferredAlignment === "left")
        return Math.min(maximum, Math.max(0, activatorRect.left - overlayMargins.horizontal));
      if (preferredAlignment === "right") {
        let activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
        return Math.min(maximum, Math.max(0, activatorRight - overlayMargins.horizontal));
      }
      return Math.min(maximum, Math.max(0, activatorRect.center.x - overlayRect.width / 2));
    }
    function rectIsOutsideOfRect(inner, outer) {
      let {
        center
      } = inner;
      return center.y < outer.top || center.y > outer.top + outer.height;
    }
    function intersectionWithViewport(rect, viewport = windowRect()) {
      let top = Math.max(rect.top, 0), left = Math.max(rect.left, 0), bottom = Math.min(rect.top + rect.height, viewport.height), right = Math.min(rect.left + rect.width, viewport.width);
      return new geometry.Rect({
        top,
        left,
        height: bottom - top,
        width: right - left
      });
    }
    function windowRect() {
      return new geometry.Rect({
        top: window.scrollY,
        left: window.scrollX,
        height: window.innerHeight,
        width: document.body.clientWidth
      });
    }
    exports.calculateHorizontalPosition = calculateHorizontalPosition;
    exports.calculateVerticalPosition = calculateVerticalPosition;
    exports.intersectionWithViewport = intersectionWithViewport;
    exports.rectIsOutsideOfRect = rectIsOutsideOfRect;
    exports.windowRect = windowRect;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.scss.js
var require_PositionedOverlay_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      PositionedOverlay: "Polaris-PositionedOverlay",
      fixed: "Polaris-PositionedOverlay--fixed",
      calculating: "Polaris-PositionedOverlay--calculating",
      preventInteraction: "Polaris-PositionedOverlay--preventInteraction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-lazy-ref.js
var require_use_lazy_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-lazy-ref.js"(exports) {
    "use strict";
    var React2 = require("react"), UNIQUE_IDENTIFIER = Symbol("unique_identifier");
    function useLazyRef(initialValue) {
      let lazyRef = React2.useRef(UNIQUE_IDENTIFIER);
      return lazyRef.current === UNIQUE_IDENTIFIER && (lazyRef.current = initialValue()), lazyRef;
    }
    exports.useLazyRef = useLazyRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-component-did-mount.js
var require_use_component_did_mount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-component-did-mount.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsAfterInitialMount = require_use_is_after_initial_mount();
    function useComponentDidMount(callback) {
      let isAfterInitialMount = useIsAfterInitialMount.useIsAfterInitialMount(), hasInvokedLifeCycle = React2.useRef(!1);
      if (isAfterInitialMount && !hasInvokedLifeCycle.current)
        return hasInvokedLifeCycle.current = !0, callback();
    }
    exports.useComponentDidMount = useComponentDidMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/context.js
var require_context10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/context.js"(exports) {
    "use strict";
    var React2 = require("react"), ScrollableContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.ScrollableContext = ScrollableContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.scss.js
var require_Scrollable_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Scrollable: "Polaris-Scrollable",
      hasTopShadow: "Polaris-Scrollable--hasTopShadow",
      hasBottomShadow: "Polaris-Scrollable--hasBottomShadow",
      horizontal: "Polaris-Scrollable--horizontal",
      vertical: "Polaris-Scrollable--vertical"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/components/ScrollTo/ScrollTo.js
var require_ScrollTo = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/components/ScrollTo/ScrollTo.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context10();
    function ScrollTo() {
      let anchorNode = React2.useRef(null), scrollToPosition = React2.useContext(context.ScrollableContext);
      React2.useEffect(() => {
        !scrollToPosition || !anchorNode.current || scrollToPosition(anchorNode.current.offsetTop);
      }, [scrollToPosition]);
      let id = React2.useId();
      return /* @__PURE__ */ React2.createElement("a", {
        id,
        ref: anchorNode
      });
    }
    exports.ScrollTo = ScrollTo;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.js
var require_Scrollable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Scrollable/Scrollable.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), css = require_css(), shared = require_shared(), useLazyRef = require_use_lazy_ref(), useComponentDidMount = require_use_component_did_mount(), context = require_context10(), Scrollable_module = require_Scrollable_scss(), ScrollTo = require_ScrollTo(), stickyManager = require_sticky_manager(), context$1 = require_context4(), MAX_SCROLL_HINT_DISTANCE = 100, LOW_RES_BUFFER = 2, ScrollableComponent = /* @__PURE__ */ React2.forwardRef(({
      children,
      className,
      horizontal = !0,
      vertical = !0,
      shadow,
      hint,
      focusable,
      onScrolledToBottom,
      ...rest
    }, forwardedRef) => {
      let [topShadow, setTopShadow] = React2.useState(!1), [bottomShadow, setBottomShadow] = React2.useState(!1), stickyManager$1 = useLazyRef.useLazyRef(() => new stickyManager.StickyManager()), scrollArea = React2.useRef(null), scrollTo = React2.useCallback((scrollY, options = {}) => {
        let optionsBehavior = options.behavior || "smooth", behavior = prefersReducedMotion() ? "auto" : optionsBehavior;
        scrollArea.current?.scrollTo({
          top: scrollY,
          behavior
        });
      }, []), defaultRef = React2.useRef();
      React2.useImperativeHandle(forwardedRef || defaultRef, () => ({
        scrollTo
      }));
      let handleScroll = React2.useCallback(() => {
        let currentScrollArea = scrollArea.current;
        currentScrollArea && requestAnimationFrame(() => {
          let {
            scrollTop,
            clientHeight,
            scrollHeight
          } = currentScrollArea, canScroll = Boolean(scrollHeight > clientHeight), isBelowTopOfScroll = Boolean(scrollTop > 0), isAtBottomOfScroll = Boolean(scrollTop + clientHeight >= scrollHeight - LOW_RES_BUFFER);
          setTopShadow(isBelowTopOfScroll), setBottomShadow(!isAtBottomOfScroll), canScroll && isAtBottomOfScroll && onScrolledToBottom && onScrolledToBottom();
        });
      }, [onScrolledToBottom]);
      useComponentDidMount.useComponentDidMount(() => {
        handleScroll(), hint && requestAnimationFrame(() => performScrollHint(scrollArea.current));
      }), React2.useEffect(() => {
        let currentScrollArea = scrollArea.current;
        if (!currentScrollArea)
          return;
        let handleResize = debounce.debounce(handleScroll, 50, {
          trailing: !0
        });
        return stickyManager$1.current?.setContainer(currentScrollArea), currentScrollArea.addEventListener("scroll", handleScroll), globalThis.addEventListener("resize", handleResize), () => {
          currentScrollArea.removeEventListener("scroll", handleScroll), globalThis.removeEventListener("resize", handleResize);
        };
      }, [stickyManager$1, handleScroll]);
      let finalClassName = css.classNames(className, Scrollable_module.default.Scrollable, vertical && Scrollable_module.default.vertical, horizontal && Scrollable_module.default.horizontal, shadow && topShadow && Scrollable_module.default.hasTopShadow, shadow && bottomShadow && Scrollable_module.default.hasBottomShadow);
      return /* @__PURE__ */ React2.createElement(context.ScrollableContext.Provider, {
        value: scrollTo
      }, /* @__PURE__ */ React2.createElement(context$1.StickyManagerContext.Provider, {
        value: stickyManager$1.current
      }, /* @__PURE__ */ React2.createElement("div", Object.assign({
        className: finalClassName
      }, shared.scrollable.props, rest, {
        ref: scrollArea,
        tabIndex: focusable ? 0 : void 0
      }), children)));
    });
    ScrollableComponent.displayName = "Scrollable";
    function prefersReducedMotion() {
      try {
        return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
      } catch {
        return !1;
      }
    }
    function performScrollHint(elem) {
      if (!elem || prefersReducedMotion())
        return;
      let scrollableDistance = elem.scrollHeight - elem.clientHeight, distanceToPeek = Math.min(MAX_SCROLL_HINT_DISTANCE, scrollableDistance) - LOW_RES_BUFFER, goBackToTop = () => {
        requestAnimationFrame(() => {
          elem.scrollTop >= distanceToPeek && (elem.removeEventListener("scroll", goBackToTop), elem.scrollTo({
            top: 0,
            behavior: "smooth"
          }));
        });
      };
      elem.addEventListener("scroll", goBackToTop), elem.scrollTo({
        top: MAX_SCROLL_HINT_DISTANCE,
        behavior: "smooth"
      });
    }
    var forNode = (node) => {
      let closestElement = node.closest(shared.scrollable.selector);
      return closestElement instanceof HTMLElement ? closestElement : document;
    }, Scrollable = ScrollableComponent;
    Scrollable.ScrollTo = ScrollTo.ScrollTo;
    Scrollable.forNode = forNode;
    exports.Scrollable = Scrollable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.js
var require_PositionedOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PositionedOverlay/PositionedOverlay.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), geometry = require_geometry(), shared = require_shared(), math = require_math(), PositionedOverlay_module = require_PositionedOverlay_scss(), Scrollable = require_Scrollable(), EventListener = require_EventListener(), OBSERVER_CONFIG = {
      childList: !0,
      subtree: !0,
      characterData: !0,
      attributeFilter: ["style"]
    }, PositionedOverlay = class extends React2.PureComponent {
      constructor(props) {
        super(props), this.state = {
          measuring: !0,
          activatorRect: geometry.getRectForNode(this.props.activator),
          right: void 0,
          left: void 0,
          top: 0,
          height: 0,
          width: null,
          positioning: "below",
          zIndex: null,
          outsideScrollableContainer: !1,
          lockPosition: !1,
          chevronOffset: 0
        }, this.overlay = null, this.scrollableContainers = [], this.overlayDetails = () => {
          let {
            measuring,
            left,
            right,
            positioning,
            height,
            activatorRect,
            chevronOffset
          } = this.state;
          return {
            measuring,
            left,
            right,
            desiredHeight: height,
            positioning,
            activatorRect,
            chevronOffset
          };
        }, this.setOverlay = (node) => {
          this.overlay = node;
        }, this.setScrollableContainers = () => {
          let containers = [], scrollableContainer = Scrollable.Scrollable.forNode(this.props.activator);
          if (scrollableContainer)
            for (containers.push(scrollableContainer); scrollableContainer?.parentElement; )
              scrollableContainer = Scrollable.Scrollable.forNode(scrollableContainer.parentElement), containers.push(scrollableContainer);
          this.scrollableContainers = containers;
        }, this.registerScrollHandlers = () => {
          this.scrollableContainers.forEach((node) => {
            node.addEventListener("scroll", this.handleMeasurement);
          });
        }, this.unregisterScrollHandlers = () => {
          this.scrollableContainers.forEach((node) => {
            node.removeEventListener("scroll", this.handleMeasurement);
          });
        }, this.handleMeasurement = () => {
          let {
            lockPosition,
            top
          } = this.state;
          this.observer.disconnect(), this.setState(({
            left,
            top: top2,
            right
          }) => ({
            left,
            right,
            top: top2,
            height: 0,
            positioning: "below",
            measuring: !0
          }), () => {
            if (this.overlay == null || this.firstScrollableContainer == null)
              return;
            let {
              activator,
              preferredPosition = "below",
              preferredAlignment = "center",
              onScrollOut,
              fullWidth,
              fixed,
              preferInputActivator = !0
            } = this.props, preferredActivator = preferInputActivator && activator.querySelector("input") || activator, activatorRect = geometry.getRectForNode(preferredActivator), currentOverlayRect = geometry.getRectForNode(this.overlay), scrollableElement = isDocument(this.firstScrollableContainer) ? document.body : this.firstScrollableContainer, scrollableContainerRect = geometry.getRectForNode(scrollableElement), overlayRect = fullWidth ? new geometry.Rect({
              ...currentOverlayRect,
              width: activatorRect.width
            }) : currentOverlayRect;
            scrollableElement === document.body && (scrollableContainerRect.height = document.body.scrollHeight);
            let topBarOffset = 0, topBarElement = scrollableElement.querySelector(`${shared.dataPolarisTopBar.selector}`);
            topBarElement && (topBarOffset = topBarElement.clientHeight);
            let overlayMargins = this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement ? getMarginsForNode(this.overlay.firstElementChild) : {
              activator: 0,
              container: 0,
              horizontal: 0
            }, containerRect = math.windowRect(), zIndexForLayer = getZIndexForLayerFromNode(activator), zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1, verticalPosition = math.calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset), horizontalPosition = math.calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment), chevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;
            this.setState({
              measuring: !1,
              activatorRect: geometry.getRectForNode(activator),
              left: preferredAlignment !== "right" ? horizontalPosition : void 0,
              right: preferredAlignment === "right" ? horizontalPosition : void 0,
              top: lockPosition ? top : verticalPosition.top,
              lockPosition: Boolean(fixed),
              height: verticalPosition.height || 0,
              width: fullWidth ? overlayRect.width : null,
              positioning: verticalPosition.positioning,
              outsideScrollableContainer: onScrollOut != null && math.rectIsOutsideOfRect(activatorRect, math.intersectionWithViewport(scrollableContainerRect)),
              zIndex,
              chevronOffset
            }, () => {
              this.overlay && (this.observer.observe(this.overlay, OBSERVER_CONFIG), this.observer.observe(activator, OBSERVER_CONFIG));
            });
          });
        }, this.observer = new MutationObserver(this.handleMeasurement);
      }
      componentDidMount() {
        this.setScrollableContainers(), this.scrollableContainers.length && !this.props.fixed && this.registerScrollHandlers(), this.handleMeasurement();
      }
      componentWillUnmount() {
        this.observer.disconnect(), this.scrollableContainers.length && !this.props.fixed && this.unregisterScrollHandlers();
      }
      componentDidUpdate() {
        let {
          outsideScrollableContainer,
          top
        } = this.state, {
          onScrollOut,
          active
        } = this.props;
        active && onScrollOut != null && top !== 0 && outsideScrollableContainer && onScrollOut();
      }
      render() {
        let {
          left,
          right,
          top,
          zIndex,
          width
        } = this.state, {
          render,
          fixed,
          preventInteraction,
          classNames: propClassNames,
          zIndexOverride
        } = this.props, style = {
          top: top == null || isNaN(top) ? void 0 : top,
          left: left == null || isNaN(left) ? void 0 : left,
          right: right == null || isNaN(right) ? void 0 : right,
          width: width == null || isNaN(width) ? void 0 : width,
          zIndex: zIndexOverride || zIndex || void 0
        }, className = css.classNames(PositionedOverlay_module.default.PositionedOverlay, fixed && PositionedOverlay_module.default.fixed, preventInteraction && PositionedOverlay_module.default.preventInteraction, propClassNames);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          style,
          ref: this.setOverlay
        }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleMeasurement
        }), render(this.overlayDetails()));
      }
      get firstScrollableContainer() {
        return this.scrollableContainers[0] ?? null;
      }
      forceUpdatePosition() {
        requestAnimationFrame(this.handleMeasurement);
      }
    };
    function getMarginsForNode(node) {
      let nodeStyles = window.getComputedStyle(node);
      return {
        activator: parseFloat(nodeStyles.marginTop || "0"),
        container: parseFloat(nodeStyles.marginBottom || "0"),
        horizontal: parseFloat(nodeStyles.marginLeft || "0")
      };
    }
    function getZIndexForLayerFromNode(node) {
      let layerNode = node.closest(shared.layer.selector) || document.body, zIndex = layerNode === document.body ? "auto" : parseInt(window.getComputedStyle(layerNode).zIndex || "0", 10);
      return zIndex === "auto" || isNaN(zIndex) ? null : zIndex;
    }
    function isDocument(node) {
      return node === document;
    }
    exports.PositionedOverlay = PositionedOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js
var require_TooltipOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), shared = require_shared(), TooltipOverlay_module = require_TooltipOverlay_scss(), PositionedOverlay = require_PositionedOverlay(), hooks = require_hooks2(), tailUpPaths = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
      d: "M18.829 8.171 11.862.921A3 3 0 0 0 7.619.838L0 8.171h1.442l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557h1.387Z",
      fill: "#E3E3E3"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M17.442 10.171h-16v-2l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557v2Z",
      fill: "var(--p-color-bg-surface)"
    })), tailDownPaths = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("path", {
      d: "m0 2 6.967 7.25a3 3 0 0 0 4.243.083L18.829 2h-1.442l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2H0Z",
      fill: "#D4D4D4"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M1.387 0h16v2l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2V0Z",
      fill: "var(--p-color-bg-surface)"
    }));
    function TooltipOverlay({
      active,
      activator,
      preferredPosition = "above",
      preventInteraction,
      id,
      children,
      accessibilityLabel,
      width,
      padding,
      borderRadius,
      zIndexOverride,
      instant
    }) {
      let i18n = hooks.useI18n();
      return active ? /* @__PURE__ */ React2.createElement(PositionedOverlay.PositionedOverlay, {
        active,
        activator,
        preferredPosition,
        preventInteraction,
        render: renderTooltip,
        zIndexOverride
      }) : null;
      function renderTooltip(overlayDetails) {
        let {
          measuring,
          desiredHeight,
          positioning,
          chevronOffset
        } = overlayDetails, containerClassName = css.classNames(TooltipOverlay_module.default.TooltipOverlay, measuring && TooltipOverlay_module.default.measuring, !measuring && TooltipOverlay_module.default.measured, instant && TooltipOverlay_module.default.instant, positioning === "above" && TooltipOverlay_module.default.positionedAbove), contentClassName = css.classNames(TooltipOverlay_module.default.Content, width && TooltipOverlay_module.default[width]), contentStyles = measuring ? void 0 : {
          minHeight: desiredHeight
        }, style = {
          "--pc-tooltip-chevron-x-pos": `${chevronOffset}px`,
          "--pc-tooltip-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
          "--pc-tooltip-padding": padding && padding === "default" ? "var(--p-space-100) var(--p-space-200)" : `var(--p-space-${padding})`
        };
        return /* @__PURE__ */ React2.createElement("div", Object.assign({
          style,
          className: containerClassName
        }, shared.layer.props), /* @__PURE__ */ React2.createElement("svg", {
          className: TooltipOverlay_module.default.Tail,
          width: "19",
          height: "11",
          fill: "none"
        }, positioning === "above" ? tailDownPaths : tailUpPaths), /* @__PURE__ */ React2.createElement("div", {
          id,
          role: "tooltip",
          className: contentClassName,
          style: {
            ...contentStyles,
            ...style
          },
          "aria-label": accessibilityLabel ? i18n.translate("Polaris.TooltipOverlay.accessibilityLabel", {
            label: accessibilityLabel
          }) : void 0
        }, children));
      }
    }
    exports.TooltipOverlay = TooltipOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.js
var require_Tooltip = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tooltip/Tooltip.js"(exports) {
    "use strict";
    var React2 = require("react"), focus = require_focus(), useToggle = require_use_toggle(), css = require_css(), Tooltip_module = require_Tooltip_scss(), hooks = require_hooks3(), Portal = require_Portal(), TooltipOverlay = require_TooltipOverlay(), HOVER_OUT_TIMEOUT = 150;
    function Tooltip({
      children,
      content,
      dismissOnMouseOut,
      active: originalActive,
      hoverDelay,
      preferredPosition = "above",
      activatorWrapper = "span",
      accessibilityLabel,
      width = "default",
      padding = "default",
      borderRadius: borderRadiusProp,
      zIndexOverride,
      hasUnderline,
      persistOnClick,
      onOpen,
      onClose
    }) {
      let borderRadius = borderRadiusProp || "200", WrapperComponent = activatorWrapper, {
        value: active,
        setTrue: setActiveTrue,
        setFalse: handleBlur
      } = useToggle.useToggle(Boolean(originalActive)), {
        value: persist,
        toggle: togglePersisting
      } = useToggle.useToggle(Boolean(originalActive) && Boolean(persistOnClick)), [activatorNode, setActivatorNode] = React2.useState(null), {
        presenceList,
        addPresence,
        removePresence
      } = hooks.useEphemeralPresenceManager(), id = React2.useId(), activatorContainer = React2.useRef(null), mouseEntered = React2.useRef(!1), [shouldAnimate, setShouldAnimate] = React2.useState(Boolean(!originalActive)), hoverDelayTimeout = React2.useRef(null), hoverOutTimeout = React2.useRef(null), handleFocus = React2.useCallback(() => {
        originalActive !== !1 && setActiveTrue();
      }, [originalActive, setActiveTrue]);
      React2.useEffect(() => {
        let accessibilityNode = (activatorContainer.current ? focus.findFirstFocusableNode(activatorContainer.current) : null) || activatorContainer.current;
        accessibilityNode && (accessibilityNode.tabIndex = 0, accessibilityNode.setAttribute("aria-describedby", id), accessibilityNode.setAttribute("data-polaris-tooltip-activator", "true"));
      }, [id, children]), React2.useEffect(() => () => {
        hoverDelayTimeout.current && clearTimeout(hoverDelayTimeout.current), hoverOutTimeout.current && clearTimeout(hoverOutTimeout.current);
      }, []);
      let handleOpen = React2.useCallback(() => {
        setShouldAnimate(!presenceList.tooltip && !active), onOpen?.(), addPresence("tooltip");
      }, [addPresence, presenceList.tooltip, onOpen, active]), handleClose = React2.useCallback(() => {
        onClose?.(), setShouldAnimate(!1), hoverOutTimeout.current = setTimeout(() => {
          removePresence("tooltip");
        }, HOVER_OUT_TIMEOUT);
      }, [removePresence, onClose]), handleKeyUp = React2.useCallback((event) => {
        event.key === "Escape" && (handleClose?.(), handleBlur(), persistOnClick && togglePersisting());
      }, [handleBlur, handleClose, persistOnClick, togglePersisting]);
      React2.useEffect(() => {
        originalActive === !1 && active && (handleClose(), handleBlur());
      }, [originalActive, active, handleClose, handleBlur]);
      let portal = activatorNode ? /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "tooltip"
      }, /* @__PURE__ */ React2.createElement(TooltipOverlay.TooltipOverlay, {
        id,
        preferredPosition,
        activator: activatorNode,
        active,
        accessibilityLabel,
        onClose: noop,
        preventInteraction: dismissOnMouseOut,
        width,
        padding,
        borderRadius,
        zIndexOverride,
        instant: !shouldAnimate
      }, content)) : null, wrapperClassNames = css.classNames(activatorWrapper === "div" && Tooltip_module.default.TooltipContainer, hasUnderline && Tooltip_module.default.HasUnderline);
      return /* @__PURE__ */ React2.createElement(WrapperComponent, {
        onFocus: () => {
          handleOpen(), handleFocus();
        },
        onBlur: () => {
          handleClose(), handleBlur(), persistOnClick && togglePersisting();
        },
        onMouseLeave: handleMouseLeave,
        onMouseOver: handleMouseEnterFix,
        onMouseDown: persistOnClick ? togglePersisting : void 0,
        ref: setActivator,
        onKeyUp: handleKeyUp,
        className: wrapperClassNames
      }, children, portal);
      function setActivator(node) {
        let activatorContainerRef = activatorContainer;
        if (node == null) {
          activatorContainerRef.current = null, setActivatorNode(null);
          return;
        }
        node.firstElementChild instanceof HTMLElement && setActivatorNode(node.firstElementChild), activatorContainerRef.current = node;
      }
      function handleMouseEnter() {
        mouseEntered.current = !0, hoverDelay && !presenceList.tooltip ? hoverDelayTimeout.current = setTimeout(() => {
          handleOpen(), handleFocus();
        }, hoverDelay) : (handleOpen(), handleFocus());
      }
      function handleMouseLeave() {
        hoverDelayTimeout.current && (clearTimeout(hoverDelayTimeout.current), hoverDelayTimeout.current = null), mouseEntered.current = !1, handleClose(), persist || handleBlur();
      }
      function handleMouseEnterFix() {
        !mouseEntered.current && handleMouseEnter();
      }
    }
    function noop() {
    }
    exports.Tooltip = Tooltip;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Item/Item.js
var require_Item = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), ActionList_module = require_ActionList_scss(), focus = require_focus(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), useTheme = require_use_theme(), Badge = require_Badge(), Tooltip = require_Tooltip(), Icon = require_Icon(), Box = require_Box(), Text2 = require_Text(), Scrollable = require_Scrollable(), UnstyledLink = require_UnstyledLink(), InlineStack = require_InlineStack();
    function Item({
      id,
      badge,
      content,
      accessibilityLabel,
      helpText,
      url,
      onAction,
      onMouseEnter,
      icon,
      image,
      prefix,
      suffix,
      disabled,
      external,
      destructive,
      ellipsis,
      truncate,
      active,
      role,
      variant = "default"
    }) {
      let className = css.classNames(ActionList_module.default.Item, disabled && ActionList_module.default.disabled, destructive && ActionList_module.default.destructive, active && ActionList_module.default.active, variant === "default" && ActionList_module.default.default, variant === "indented" && ActionList_module.default.indented, variant === "menu" && ActionList_module.default.menu), prefixMarkup = null;
      prefix ? prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Prefix
      }, prefix) : icon ? prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Prefix
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: icon
      })) : image && (prefixMarkup = /* @__PURE__ */ React2.createElement("span", {
        role: "presentation",
        className: ActionList_module.default.Prefix,
        style: {
          backgroundImage: `url(${image}`
        }
      }));
      let contentText = content || "";
      truncate && content ? contentText = /* @__PURE__ */ React2.createElement(TruncateText, null, content) : ellipsis && (contentText = `${content}\u2026`);
      let contentMarkup = helpText ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Box.Box, null, contentText), /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "bodySm",
        tone: active || disabled ? void 0 : "subdued"
      }, helpText)) : contentText, badgeMarkup = badge && /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Suffix
      }, /* @__PURE__ */ React2.createElement(Badge.Badge, {
        tone: badge.tone
      }, badge.content)), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement(Box.Box, null, /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Suffix
      }, suffix)), textMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: ActionList_module.default.Text
      }, contentMarkup), contentElement = /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        blockAlign: "center",
        gap: "150",
        wrap: !truncate
      }, prefixMarkup, textMarkup, badgeMarkup, suffixMarkup), contentWrapper = /* @__PURE__ */ React2.createElement(Box.Box, {
        width: "100%"
      }, contentElement), scrollMarkup = active ? /* @__PURE__ */ React2.createElement(Scrollable.Scrollable.ScrollTo, null) : null, control = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        id,
        url: disabled ? null : url,
        className,
        external,
        "aria-label": accessibilityLabel,
        onClick: disabled ? null : onAction,
        role
      }, contentWrapper) : /* @__PURE__ */ React2.createElement("button", {
        id,
        type: "button",
        className,
        disabled,
        "aria-label": accessibilityLabel,
        onClick: onAction,
        onMouseUp: focus.handleMouseUpByBlurring,
        role,
        onMouseEnter
      }, contentWrapper);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, scrollMarkup, control);
    }
    var TruncateText = ({
      children
    }) => {
      let theme = useTheme.useTheme(), textRef = React2.useRef(null), [isOverflowing, setIsOverflowing] = React2.useState(!1);
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        textRef.current && setIsOverflowing(textRef.current.scrollWidth > textRef.current.offsetWidth);
      }, [children]);
      let text = /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        truncate: !0
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        width: "100%",
        ref: textRef
      }, children));
      return isOverflowing ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        zIndexOverride: Number(theme.zIndex["z-index-11"]),
        preferredPosition: "above",
        hoverDelay: 1e3,
        content: children,
        dismissOnMouseOut: !0
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        truncate: !0
      }, children)) : text;
    };
    exports.Item = Item;
    exports.TruncateText = TruncateText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Section/Section.js
var require_Section = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require("react"), Item = require_Item(), Box = require_Box(), InlineStack = require_InlineStack(), Text2 = require_Text(), BlockStack2 = require_BlockStack();
    function Section({
      section,
      hasMultipleSections,
      isFirst,
      actionRole,
      onActionAnyItem
    }) {
      let handleAction = (itemOnAction) => () => {
        itemOnAction && itemOnAction(), onActionAnyItem && onActionAnyItem();
      }, actionMarkup = section.items.map(({
        content,
        helpText,
        onAction,
        ...item
      }, index) => {
        let itemMarkup = /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
          content,
          helpText,
          role: actionRole,
          onAction: handleAction(onAction)
        }, item));
        return /* @__PURE__ */ React2.createElement(Box.Box, {
          as: "li",
          key: `${content}-${index}`,
          role: actionRole === "menuitem" ? "presentation" : void 0
        }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
          wrap: !1
        }, itemMarkup));
      }), titleMarkup = null;
      section.title && (titleMarkup = typeof section.title == "string" ? /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockStart: "300",
        paddingBlockEnd: "100",
        paddingInlineStart: "300",
        paddingInlineEnd: "300"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "p",
        variant: "headingSm"
      }, section.title)) : /* @__PURE__ */ React2.createElement(Box.Box, {
        padding: "200",
        paddingInlineEnd: "150"
      }, section.title));
      let sectionRole;
      switch (actionRole) {
        case "option":
          sectionRole = "presentation";
          break;
        case "menuitem":
          sectionRole = hasMultipleSections ? "presentation" : "menu";
          break;
        default:
          sectionRole = void 0;
          break;
      }
      let sectionMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, titleMarkup, /* @__PURE__ */ React2.createElement(Box.Box, Object.assign({
        as: "div",
        padding: "150"
      }, hasMultipleSections && {
        paddingBlockStart: "0"
      }, {
        tabIndex: hasMultipleSections ? void 0 : -1
      }), /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, Object.assign({
        gap: "100",
        as: "ul"
      }, sectionRole && {
        role: sectionRole
      }), actionMarkup)));
      return hasMultipleSections ? /* @__PURE__ */ React2.createElement(Box.Box, Object.assign({
        as: "li",
        role: "presentation",
        borderColor: "border-secondary"
      }, !isFirst && {
        borderBlockStartWidth: "025"
      }, !section.title && {
        paddingBlockStart: "150"
      }), sectionMarkup) : sectionMarkup;
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeypressListener/KeypressListener.js
var require_KeypressListener = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeypressListener/KeypressListener.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect();
    function KeypressListener({
      keyCode,
      handler,
      keyEvent = "keyup",
      options,
      useCapture
    }) {
      let tracked = React2.useRef({
        handler,
        keyCode
      });
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        tracked.current = {
          handler,
          keyCode
        };
      }, [handler, keyCode]);
      let handleKeyEvent = React2.useCallback((event) => {
        let {
          handler: handler2,
          keyCode: keyCode2
        } = tracked.current;
        event.keyCode === keyCode2 && handler2(event);
      }, []);
      return React2.useEffect(() => (document.addEventListener(keyEvent, handleKeyEvent, useCapture || options), () => {
        document.removeEventListener(keyEvent, handleKeyEvent, useCapture || options);
      }), [keyEvent, handleKeyEvent, useCapture, options]), null;
    }
    exports.KeypressListener = KeypressListener;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.scss.js
var require_TextField_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextField: "Polaris-TextField",
      ClearButton: "Polaris-TextField__ClearButton",
      disabled: "Polaris-TextField--disabled",
      error: "Polaris-TextField--error",
      readOnly: "Polaris-TextField--readOnly",
      Input: "Polaris-TextField__Input",
      Backdrop: "Polaris-TextField__Backdrop",
      multiline: "Polaris-TextField--multiline",
      hasValue: "Polaris-TextField--hasValue",
      focus: "Polaris-TextField--focus",
      VerticalContent: "Polaris-TextField__VerticalContent",
      toneMagic: "Polaris-TextField--toneMagic",
      Prefix: "Polaris-TextField__Prefix",
      Suffix: "Polaris-TextField__Suffix",
      suggestion: "Polaris-TextField--suggestion",
      borderless: "Polaris-TextField--borderless",
      slim: "Polaris-TextField--slim",
      "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
      "Input-suffixed": "Polaris-TextField__Input--suffixed",
      "Input-alignRight": "Polaris-TextField__Input--alignRight",
      "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
      "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
      PrefixIcon: "Polaris-TextField__PrefixIcon",
      CharacterCount: "Polaris-TextField__CharacterCount",
      AlignFieldBottom: "Polaris-TextField__AlignFieldBottom",
      Spinner: "Polaris-TextField__Spinner",
      SpinnerIcon: "Polaris-TextField__SpinnerIcon",
      Resizer: "Polaris-TextField__Resizer",
      DummyInput: "Polaris-TextField__DummyInput",
      Segment: "Polaris-TextField__Segment",
      monospaced: "Polaris-TextField--monospaced"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/components/Spinner/Spinner.js
var require_Spinner2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/components/Spinner/Spinner.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), TextField_module = require_TextField_scss(), Icon = require_Icon(), Spinner = /* @__PURE__ */ React2.forwardRef(function({
      onChange,
      onClick,
      onMouseDown,
      onMouseUp,
      onBlur
    }, ref) {
      function handleStep(step) {
        return () => onChange(step);
      }
      function handleMouseDown(onChange2) {
        return (event) => {
          event.button === 0 && onMouseDown?.(onChange2);
        };
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.Spinner,
        onClick,
        "aria-hidden": !0,
        ref
      }, /* @__PURE__ */ React2.createElement("div", {
        role: "button",
        className: TextField_module.default.Segment,
        tabIndex: -1,
        onClick: handleStep(1),
        onMouseDown: handleMouseDown(handleStep(1)),
        onMouseUp,
        onBlur
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.SpinnerIcon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.ChevronUpIcon
      }))), /* @__PURE__ */ React2.createElement("div", {
        role: "button",
        className: TextField_module.default.Segment,
        tabIndex: -1,
        onClick: handleStep(-1),
        onMouseDown: handleMouseDown(handleStep(-1)),
        onMouseUp,
        onBlur
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.SpinnerIcon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.ChevronDownIcon
      }))));
    });
    exports.Spinner = Spinner;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.scss.js
var require_Labelled_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      hidden: "Polaris-Labelled--hidden",
      LabelWrapper: "Polaris-Labelled__LabelWrapper",
      disabled: "Polaris-Labelled--disabled",
      HelpText: "Polaris-Labelled__HelpText",
      readOnly: "Polaris-Labelled--readOnly",
      Error: "Polaris-Labelled__Error",
      Action: "Polaris-Labelled__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.scss.js
var require_InlineError_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineError: "Polaris-InlineError",
      Icon: "Polaris-InlineError__Icon"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.js
var require_InlineError = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineError/InlineError.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), InlineError_module = require_InlineError_scss(), Icon = require_Icon();
    function InlineError({
      message,
      fieldID
    }) {
      return message ? /* @__PURE__ */ React2.createElement("div", {
        id: errorTextID(fieldID),
        className: InlineError_module.default.InlineError
      }, /* @__PURE__ */ React2.createElement("div", {
        className: InlineError_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.AlertCircleIcon
      })), message) : null;
    }
    function errorTextID(id) {
      return `${id}Error`;
    }
    exports.InlineError = InlineError;
    exports.errorTextID = errorTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Label/Label.scss.js
var require_Label_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Label/Label.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Label: "Polaris-Label",
      hidden: "Polaris-Label--hidden",
      Text: "Polaris-Label__Text",
      RequiredIndicator: "Polaris-Label__RequiredIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Label/Label.js
var require_Label = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Label/Label.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Label_module = require_Label_scss();
    function labelID(id) {
      return `${id}Label`;
    }
    function Label({
      children,
      id,
      hidden,
      requiredIndicator
    }) {
      let className = css.classNames(Label_module.default.Label, hidden && Label_module.default.hidden);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("label", {
        id: labelID(id),
        htmlFor: id,
        className: css.classNames(Label_module.default.Text, requiredIndicator && Label_module.default.RequiredIndicator)
      }, children));
    }
    exports.Label = Label;
    exports.labelID = labelID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.js
var require_Labelled = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Labelled/Labelled.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Labelled_module = require_Labelled_scss(), InlineError = require_InlineError(), Label = require_Label(), utils = require_utils(), Text2 = require_Text();
    function Labelled({
      id,
      label,
      error,
      action,
      helpText,
      children,
      labelHidden,
      requiredIndicator,
      disabled,
      readOnly,
      ...rest
    }) {
      let className = css.classNames(labelHidden && Labelled_module.default.hidden, disabled && Labelled_module.default.disabled, readOnly && Labelled_module.default.readOnly), actionMarkup = action ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.Action
      }, utils.buttonFrom(action, {
        variant: "plain"
      })) : null, helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.HelpText,
        id: helpTextID(id),
        "aria-disabled": disabled
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        tone: "subdued",
        breakWord: !0
      }, helpText)) : null, errorMarkup = error && typeof error != "boolean" && /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.Error
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: id
      })), labelMarkup = label ? /* @__PURE__ */ React2.createElement("div", {
        className: Labelled_module.default.LabelWrapper
      }, /* @__PURE__ */ React2.createElement(Label.Label, Object.assign({
        id,
        requiredIndicator
      }, rest, {
        hidden: !1
      }), label), actionMarkup) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, labelMarkup, children, errorMarkup, helpTextMarkup);
    }
    function helpTextID(id) {
      return `${id}HelpText`;
    }
    exports.labelID = Label.labelID;
    exports.Labelled = Labelled;
    exports.helpTextID = helpTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.scss.js
var require_Connected_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Connected: "Polaris-Connected",
      Item: "Polaris-Connected__Item",
      "Item-primary": "Polaris-Connected__Item--primary",
      "Item-focused": "Polaris-Connected__Item--focused"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/components/Item/Item.js
var require_Item2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), useToggle = require_use_toggle(), Connected_module = require_Connected_scss();
    function Item({
      children,
      position
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(Connected_module.default.Item, focused && Connected_module.default["Item-focused"], position === "primary" ? Connected_module.default["Item-primary"] : Connected_module.default["Item-connection"]);
      return /* @__PURE__ */ React2.createElement("div", {
        onBlur: forceFalseFocused,
        onFocus: forceTrueFocused,
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.js
var require_Connected = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Connected/Connected.js"(exports) {
    "use strict";
    var React2 = require("react"), Connected_module = require_Connected_scss(), Item = require_Item2();
    function Connected({
      children,
      left,
      right
    }) {
      let leftConnectionMarkup = left ? /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "left"
      }, left) : null, rightConnectionMarkup = right ? /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "right"
      }, right) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Connected_module.default.Connected
      }, leftConnectionMarkup, /* @__PURE__ */ React2.createElement(Item.Item, {
        position: "primary"
      }, children), rightConnectionMarkup);
    }
    exports.Connected = Connected;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/components/Resizer/Resizer.js
var require_Resizer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/components/Resizer/Resizer.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), TextField_module = require_TextField_scss(), EventListener = require_EventListener();
    function Resizer({
      contents,
      currentHeight: currentHeightProp = null,
      minimumLines,
      onHeightChange
    }) {
      let contentNode = React2.useRef(null), minimumLinesNode = React2.useRef(null), animationFrame = React2.useRef(), currentHeight = React2.useRef(currentHeightProp);
      currentHeightProp !== currentHeight.current && (currentHeight.current = currentHeightProp), React2.useEffect(() => () => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current);
      }, []);
      let minimumLinesMarkup = minimumLines ? /* @__PURE__ */ React2.createElement("div", {
        ref: minimumLinesNode,
        className: TextField_module.default.DummyInput,
        dangerouslySetInnerHTML: {
          __html: getContentsForMinimumLines(minimumLines)
        }
      }) : null, handleHeightCheck = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!contentNode.current || !minimumLinesNode.current)
            return;
          let newHeight = Math.max(contentNode.current.offsetHeight, minimumLinesNode.current.offsetHeight);
          newHeight !== currentHeight.current && onHeightChange(newHeight);
        });
      }, [onHeightChange]);
      return useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        handleHeightCheck();
      }), /* @__PURE__ */ React2.createElement("div", {
        "aria-hidden": !0,
        className: TextField_module.default.Resizer
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleHeightCheck
      }), /* @__PURE__ */ React2.createElement("div", {
        ref: contentNode,
        className: TextField_module.default.DummyInput,
        dangerouslySetInnerHTML: {
          __html: getFinalContents(contents)
        }
      }), minimumLinesMarkup);
    }
    var ENTITIES_TO_REPLACE = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "\n": "<br>",
      "\r": ""
    }, REPLACE_REGEX = new RegExp(`[${Object.keys(ENTITIES_TO_REPLACE).join()}]`, "g");
    function replaceEntity(entity) {
      return ENTITIES_TO_REPLACE[entity];
    }
    function getContentsForMinimumLines(minimumLines) {
      let content = "";
      for (let line = 0; line < minimumLines; line++)
        content += "<br>";
      return content;
    }
    function getFinalContents(contents) {
      return contents ? `${contents.replace(REPLACE_REGEX, replaceEntity)}<br>` : "<br>";
    }
    exports.Resizer = Resizer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.js
var require_TextField = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextField/TextField.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useIsAfterInitialMount = require_use_is_after_initial_mount(), types = require_types(), useEventListener = require_use_event_listener(), TextField_module = require_TextField_scss(), Spinner = require_Spinner2(), Labelled = require_Labelled(), Connected = require_Connected(), Resizer = require_Resizer(), Label = require_Label(), hooks = require_hooks2(), Icon = require_Icon(), Text2 = require_Text();
    function TextField2({
      prefix,
      suffix,
      verticalContent,
      placeholder,
      value = "",
      helpText,
      label,
      labelAction,
      labelHidden,
      disabled,
      clearButton,
      readOnly,
      autoFocus,
      focused,
      multiline,
      error,
      connectedRight,
      connectedLeft,
      type = "text",
      name,
      id: idProp,
      role,
      step,
      largeStep,
      autoComplete,
      max,
      maxLength,
      maxHeight,
      min,
      minLength,
      pattern,
      inputMode,
      spellCheck,
      ariaOwns,
      ariaControls,
      ariaExpanded,
      ariaActiveDescendant,
      ariaAutocomplete,
      showCharacterCount,
      align,
      requiredIndicator,
      monospaced,
      selectTextOnFocus,
      suggestion,
      variant = "inherit",
      size = "medium",
      onClearButtonClick,
      onChange,
      onSpinnerChange,
      onFocus,
      onBlur,
      tone
    }) {
      let i18n = hooks.useI18n(), [height, setHeight] = React2.useState(null), [focus, setFocus] = React2.useState(Boolean(focused)), isAfterInitial = useIsAfterInitialMount.useIsAfterInitialMount(), uniqId = React2.useId(), id = idProp ?? uniqId, textFieldRef = React2.useRef(null), inputRef = React2.useRef(null), textAreaRef = React2.useRef(null), prefixRef = React2.useRef(null), suffixRef = React2.useRef(null), verticalContentRef = React2.useRef(null), buttonPressTimer = React2.useRef(), spinnerRef = React2.useRef(null), getInputRef = React2.useCallback(() => multiline ? textAreaRef.current : inputRef.current, [multiline]);
      React2.useEffect(() => {
        let input2 = getInputRef();
        !input2 || focused === void 0 || (focused ? input2.focus() : input2.blur());
      }, [focused, verticalContent, getInputRef]), React2.useEffect(() => {
        let input2 = inputRef.current;
        !input2 || !(type === "text" || type === "tel" || type === "search" || type === "url" || type === "password") || !suggestion || input2.setSelectionRange(value.length, suggestion.length);
      }, [focus, value, type, suggestion]);
      let normalizedValue = suggestion || value, normalizedStep = step ?? 1, normalizedMax = max ?? 1 / 0, normalizedMin = min ?? -1 / 0, className = css.classNames(TextField_module.default.TextField, Boolean(normalizedValue) && TextField_module.default.hasValue, disabled && TextField_module.default.disabled, readOnly && TextField_module.default.readOnly, error && TextField_module.default.error, tone && TextField_module.default[css.variationName("tone", tone)], multiline && TextField_module.default.multiline, focus && !disabled && TextField_module.default.focus, variant !== "inherit" && TextField_module.default[variant], size === "slim" && TextField_module.default.slim), inputType = type === "currency" ? "text" : type, isNumericType = type === "number" || type === "integer", iconPrefix = /* @__PURE__ */ React2.isValidElement(prefix) && prefix.type === Icon.Icon, prefixMarkup = prefix ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(TextField_module.default.Prefix, iconPrefix && TextField_module.default.PrefixIcon),
        id: `${id}-Prefix`,
        ref: prefixRef
      }, prefix) : null, suffixMarkup = suffix ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.Suffix,
        id: `${id}-Suffix`,
        ref: suffixRef
      }, suffix) : null, characterCountMarkup = null;
      if (showCharacterCount) {
        let characterCount = normalizedValue.length, characterCountLabel = maxLength ? i18n.translate("Polaris.TextField.characterCountWithMaxLength", {
          count: characterCount,
          limit: maxLength
        }) : i18n.translate("Polaris.TextField.characterCount", {
          count: characterCount
        }), characterCountClassName = css.classNames(TextField_module.default.CharacterCount, multiline && TextField_module.default.AlignFieldBottom), characterCountText = maxLength ? `${characterCount}/${maxLength}` : characterCount;
        characterCountMarkup = /* @__PURE__ */ React2.createElement("div", {
          id: `${id}-CharacterCounter`,
          className: characterCountClassName,
          "aria-label": characterCountLabel,
          "aria-live": focus ? "polite" : "off",
          "aria-atomic": "true",
          onClick: handleClickChild
        }, characterCountText);
      }
      let clearButtonMarkup = clearButton && normalizedValue !== "" ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: TextField_module.default.ClearButton,
        onClick: handleClearButtonPress,
        disabled
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, i18n.translate("Polaris.Common.clear")), /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.XCircleIcon,
        tone: "base"
      })) : null, handleNumberChange = React2.useCallback((steps, stepAmount = normalizedStep) => {
        if (onChange == null && onSpinnerChange == null)
          return;
        let dpl = (num) => (num.toString().split(".")[1] || []).length, numericValue = value ? parseFloat(value) : 0;
        if (isNaN(numericValue))
          return;
        let decimalPlaces = type === "integer" ? 0 : Math.max(dpl(numericValue), dpl(stepAmount)), newValue = Math.min(Number(normalizedMax), Math.max(numericValue + steps * stepAmount, Number(normalizedMin)));
        onSpinnerChange != null ? onSpinnerChange(String(newValue.toFixed(decimalPlaces)), id) : onChange?.(String(newValue.toFixed(decimalPlaces)), id);
      }, [id, normalizedMax, normalizedMin, onChange, onSpinnerChange, normalizedStep, type, value]), handleSpinnerButtonRelease = React2.useCallback(() => {
        clearTimeout(buttonPressTimer.current);
      }, []), handleSpinnerButtonPress = React2.useCallback((onChange2) => {
        let interval = 200, onChangeInterval = () => {
          interval > 50 && (interval -= 10), onChange2(0), buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
        };
        buttonPressTimer.current = window.setTimeout(onChangeInterval, interval), document.addEventListener("mouseup", handleSpinnerButtonRelease, {
          once: !0
        });
      }, [handleSpinnerButtonRelease]), spinnerMarkup = isNumericType && step !== 0 && !disabled && !readOnly ? /* @__PURE__ */ React2.createElement(Spinner.Spinner, {
        onClick: handleClickChild,
        onChange: handleNumberChange,
        onMouseDown: handleSpinnerButtonPress,
        onMouseUp: handleSpinnerButtonRelease,
        ref: spinnerRef,
        onBlur: handleOnBlur
      }) : null, style = multiline && height ? {
        height,
        maxHeight
      } : null, handleExpandingResize = React2.useCallback((height2) => {
        setHeight(height2);
      }, []), resizer = multiline && isAfterInitial ? /* @__PURE__ */ React2.createElement(Resizer.Resizer, {
        contents: normalizedValue || placeholder,
        currentHeight: height,
        minimumLines: typeof multiline == "number" ? multiline : 1,
        onHeightChange: handleExpandingResize
      }) : null, describedBy = [];
      error && describedBy.push(`${id}Error`), helpText && describedBy.push(Labelled.helpTextID(id)), showCharacterCount && describedBy.push(`${id}-CharacterCounter`);
      let labelledBy = [];
      prefix && labelledBy.push(`${id}-Prefix`), suffix && labelledBy.push(`${id}-Suffix`), verticalContent && labelledBy.push(`${id}-VerticalContent`), labelledBy.unshift(Label.labelID(id));
      let inputClassName = css.classNames(TextField_module.default.Input, align && TextField_module.default[css.variationName("Input-align", align)], suffix && TextField_module.default["Input-suffixed"], clearButton && TextField_module.default["Input-hasClearButton"], monospaced && TextField_module.default.monospaced, suggestion && TextField_module.default.suggestion), handleOnFocus = (event) => {
        setFocus(!0), selectTextOnFocus && !suggestion && getInputRef()?.select(), onFocus && onFocus(event);
      };
      useEventListener.useEventListener("wheel", handleOnWheel, inputRef);
      function handleOnWheel(event) {
        document.activeElement === event.target && isNumericType && event.stopPropagation();
      }
      let input = /* @__PURE__ */ React2.createElement(multiline ? "textarea" : "input", {
        name,
        id,
        disabled,
        readOnly,
        role,
        autoFocus,
        value: normalizedValue,
        placeholder,
        style,
        autoComplete,
        className: inputClassName,
        ref: multiline ? textAreaRef : inputRef,
        min,
        max,
        step,
        minLength,
        maxLength,
        spellCheck,
        pattern,
        inputMode,
        type: inputType,
        rows: getRows(multiline),
        "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
        "aria-labelledby": labelledBy.join(" "),
        "aria-invalid": Boolean(error),
        "aria-owns": ariaOwns,
        "aria-activedescendant": ariaActiveDescendant,
        "aria-autocomplete": ariaAutocomplete,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-required": requiredIndicator,
        ...normalizeAriaMultiline(multiline),
        onFocus: handleOnFocus,
        onBlur: handleOnBlur,
        onClick: handleClickChild,
        onKeyPress: handleKeyPress,
        onKeyDown: handleKeyDown,
        onChange: suggestion ? void 0 : handleChange,
        onInput: suggestion ? handleChange : void 0,
        // 1Password disable data attribute
        "data-1p-ignore": autoComplete === "off" || void 0,
        // LastPass disable data attribute
        "data-lpignore": autoComplete === "off" || void 0,
        // Dashlane disable data attribute
        "data-form-type": autoComplete === "off" ? "other" : void 0
      }), inputWithVerticalContentMarkup = verticalContent ? /* @__PURE__ */ React2.createElement("div", {
        className: TextField_module.default.VerticalContent,
        id: `${id}-VerticalContent`,
        ref: verticalContentRef,
        onClick: handleClickChild
      }, verticalContent, input) : null, inputMarkup = verticalContent ? inputWithVerticalContentMarkup : input, backdropMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(TextField_module.default.Backdrop, connectedLeft && TextField_module.default["Backdrop-connectedLeft"], connectedRight && TextField_module.default["Backdrop-connectedRight"])
      });
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        label,
        id,
        error,
        action: labelAction,
        labelHidden,
        helpText,
        requiredIndicator,
        disabled,
        readOnly
      }, /* @__PURE__ */ React2.createElement(Connected.Connected, {
        left: connectedLeft,
        right: connectedRight
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        onClick: handleClick,
        ref: textFieldRef
      }, prefixMarkup, inputMarkup, suffixMarkup, characterCountMarkup, clearButtonMarkup, spinnerMarkup, backdropMarkup, resizer)));
      function handleChange(event) {
        onChange && onChange(event.currentTarget.value, id);
      }
      function handleClick(event) {
        let {
          target
        } = event, inputRefRole = inputRef?.current?.getAttribute("role");
        if (target === inputRef.current && inputRefRole === "combobox") {
          inputRef.current?.focus(), handleOnFocus(event);
          return;
        }
        isPrefixOrSuffix(target) || isVerticalContent(target) || isInput(target) || isSpinner(target) || focus || getInputRef()?.focus();
      }
      function handleClickChild(event) {
        !isSpinner(event.target) && !isInput(event.target) && event.stopPropagation(), !(isPrefixOrSuffix(event.target) || isVerticalContent(event.target) || isInput(event.target) || focus) && (setFocus(!0), getInputRef()?.focus());
      }
      function handleClearButtonPress() {
        onClearButtonClick && onClearButtonClick(id);
      }
      function handleKeyPress(event) {
        let {
          key,
          which
        } = event, numbersSpec = /[\d.,eE+-]$/, integerSpec = /[\deE+-]$/;
        !isNumericType || which === types.Key.Enter || type === "number" && numbersSpec.test(key) || type === "integer" && integerSpec.test(key) || event.preventDefault();
      }
      function handleKeyDown(event) {
        if (!isNumericType)
          return;
        let {
          key,
          which
        } = event;
        type === "integer" && (key === "ArrowUp" || which === types.Key.UpArrow) && (handleNumberChange(1), event.preventDefault()), type === "integer" && (key === "ArrowDown" || which === types.Key.DownArrow) && (handleNumberChange(-1), event.preventDefault()), (which === types.Key.Home || key === "Home") && min !== void 0 && (onSpinnerChange != null ? onSpinnerChange(String(min), id) : onChange?.(String(min), id)), (which === types.Key.End || key === "End") && max !== void 0 && (onSpinnerChange != null ? onSpinnerChange(String(max), id) : onChange?.(String(max), id)), (which === types.Key.PageUp || key === "PageUp") && largeStep !== void 0 && handleNumberChange(1, largeStep), (which === types.Key.PageDown || key === "PageDown") && largeStep !== void 0 && handleNumberChange(-1, largeStep);
      }
      function handleOnBlur(event) {
        setFocus(!1), !textFieldRef.current?.contains(event?.relatedTarget) && onBlur && onBlur(event);
      }
      function isInput(target) {
        let input2 = getInputRef();
        return target instanceof HTMLElement && input2 && (input2.contains(target) || input2.contains(document.activeElement));
      }
      function isPrefixOrSuffix(target) {
        return target instanceof Element && (prefixRef.current && prefixRef.current.contains(target) || suffixRef.current && suffixRef.current.contains(target));
      }
      function isSpinner(target) {
        return target instanceof Element && spinnerRef.current && spinnerRef.current.contains(target);
      }
      function isVerticalContent(target) {
        return target instanceof Element && verticalContentRef.current && (verticalContentRef.current.contains(target) || verticalContentRef.current.contains(document.activeElement));
      }
    }
    function getRows(multiline) {
      if (multiline)
        return typeof multiline == "number" ? multiline : 1;
    }
    function normalizeAriaMultiline(multiline) {
      if (multiline)
        return Boolean(multiline) || typeof multiline == "number" && multiline > 0 ? {
          "aria-multiline": !0
        } : void 0;
    }
    exports.TextField = TextField2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.js
var require_ActionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionList/ActionList.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), types = require_types(), focus = require_focus(), FilterActionsProvider = require_FilterActionsProvider(), Section = require_Section(), KeypressListener = require_KeypressListener(), TextField2 = require_TextField(), hooks = require_hooks2(), Box = require_Box(), Icon = require_Icon(), Item = require_Item(), FILTER_ACTIONS_THRESHOLD = 8;
    function ActionList({
      items,
      sections = [],
      actionRole,
      allowFiltering,
      onActionAnyItem
    }) {
      let i18n = hooks.useI18n(), filterActions = React2.useContext(FilterActionsProvider.FilterActionsContext), finalSections = [], actionListRef = React2.useRef(null), [searchText, setSeachText] = React2.useState("");
      items ? finalSections = [{
        items
      }, ...sections] : sections && (finalSections = sections);
      let isFilterable = finalSections?.some((section) => section.items.some((item) => typeof item.content == "string")), hasMultipleSections = finalSections.length > 1, elementRole = hasMultipleSections && actionRole === "menuitem" ? "menu" : void 0, elementTabIndex = hasMultipleSections && actionRole === "menuitem" ? -1 : void 0, filteredSections = finalSections?.map((section) => ({
        ...section,
        items: section.items.filter(({
          content
        }) => typeof content == "string" ? content?.toLowerCase().includes(searchText.toLowerCase()) : content)
      })), sectionMarkup = filteredSections.map((section, index) => section.items.length > 0 ? /* @__PURE__ */ React2.createElement(Section.Section, {
        key: typeof section.title == "string" ? section.title : index,
        section,
        hasMultipleSections,
        actionRole,
        onActionAnyItem,
        isFirst: index === 0
      }) : null), handleFocusPreviousItem = (evt) => {
        evt.preventDefault(), actionListRef.current && evt.target && actionListRef.current.contains(evt.target) && focus.wrapFocusPreviousFocusableMenuItem(actionListRef.current, evt.target);
      }, handleFocusNextItem = (evt) => {
        evt.preventDefault(), actionListRef.current && evt.target && actionListRef.current.contains(evt.target) && focus.wrapFocusNextFocusableMenuItem(actionListRef.current, evt.target);
      }, listeners = actionRole === "menuitem" ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.DownArrow,
        handler: handleFocusNextItem
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.UpArrow,
        handler: handleFocusPreviousItem
      })) : null, totalFilteredActions = React2.useMemo(() => filteredSections?.reduce((acc, section) => acc + section.items.length, 0) || 0, [filteredSections]), hasManyActions = (finalSections?.reduce((acc, section) => acc + section.items.length, 0) || 0) >= FILTER_ACTIONS_THRESHOLD;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, (allowFiltering || filterActions) && hasManyActions && isFilterable && /* @__PURE__ */ React2.createElement(Box.Box, {
        padding: "200",
        paddingBlockEnd: totalFilteredActions > 0 ? "0" : "200"
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        clearButton: !0,
        labelHidden: !0,
        label: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
        placeholder: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
        autoComplete: "off",
        value: searchText,
        onChange: (value) => setSeachText(value),
        prefix: /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: polarisIcons.SearchIcon
        }),
        onClearButtonClick: () => setSeachText("")
      })), /* @__PURE__ */ React2.createElement(Box.Box, {
        as: hasMultipleSections ? "ul" : "div",
        ref: actionListRef,
        role: elementRole,
        tabIndex: elementTabIndex
      }, listeners, sectionMarkup));
    }
    ActionList.Item = Item.Item;
    exports.ActionList = ActionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.scss.js
var require_ActionMenu_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionMenu: "Polaris-ActionMenu"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.scss.js
var require_RollupActions_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      RollupActivator: "Polaris-ActionMenu-RollupActions__RollupActivator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/set-activator-attributes.js
var require_set_activator_attributes = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/set-activator-attributes.js"(exports) {
    "use strict";
    function setActivatorAttributes(activator, {
      id,
      active = !1,
      ariaHaspopup,
      activatorDisabled = !1
    }) {
      activatorDisabled || (activator.tabIndex = activator.tabIndex || 0), activator.setAttribute("aria-controls", id), activator.setAttribute("aria-owns", id), activator.setAttribute("aria-expanded", String(active)), activator.setAttribute("data-state", active ? "open" : "closed"), ariaHaspopup != null && activator.setAttribute("aria-haspopup", String(ariaHaspopup));
    }
    exports.setActivatorAttributes = setActivatorAttributes;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/components.js
var require_components = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/components.js"(exports) {
    "use strict";
    var React2 = require("react");
    function wrapWithComponent(element, Component, props) {
      return element == null ? null : isElementOfType(element, Component) ? element : /* @__PURE__ */ React2.createElement(Component, props, element);
    }
    var isComponent = (AComponent, AnotherComponent) => AComponent === AnotherComponent;
    function isElementOfType(element, Component) {
      if (element == null || !/* @__PURE__ */ React2.isValidElement(element) || typeof element.type == "string")
        return !1;
      let {
        type: defaultType
      } = element, type = element.props?.__type__ || defaultType;
      return (Array.isArray(Component) ? Component : [Component]).some((AComponent) => typeof type != "string" && isComponent(AComponent, type));
    }
    function elementChildren(children, predicate = () => !0) {
      return React2.Children.toArray(children).filter((child) => /* @__PURE__ */ React2.isValidElement(child) && predicate(child));
    }
    function ConditionalWrapper({
      condition,
      wrapper,
      children
    }) {
      return condition ? wrapper(children) : children;
    }
    function ConditionalRender({
      condition,
      children
    }) {
      return condition ? children : null;
    }
    exports.ConditionalRender = ConditionalRender;
    exports.ConditionalWrapper = ConditionalWrapper;
    exports.elementChildren = elementChildren;
    exports.isElementOfType = isElementOfType;
    exports.wrapWithComponent = wrapWithComponent;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.scss.js
var require_Popover_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Popover: "Polaris-Popover",
      PopoverOverlay: "Polaris-Popover__PopoverOverlay",
      "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
      "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
      measuring: "Polaris-Popover--measuring",
      "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
      fullWidth: "Polaris-Popover--fullWidth",
      Content: "Polaris-Popover__Content",
      positionedAbove: "Polaris-Popover--positionedAbove",
      ContentContainer: "Polaris-Popover__ContentContainer",
      "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
      "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
      Pane: "Polaris-Popover__Pane",
      "Pane-fixed": "Polaris-Popover__Pane--fixed",
      "Pane-subdued": "Polaris-Popover__Pane--subdued",
      "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
      Section: "Polaris-Popover__Section",
      FocusTracker: "Polaris-Popover__FocusTracker",
      "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/Section/Section.js
var require_Section2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require("react"), Popover_module = require_Popover_scss(), Box = require_Box();
    function Section({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: Popover_module.default.Section
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingInlineStart: "300",
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "150"
      }, children));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/Pane/Pane.js
var require_Pane = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/Pane/Pane.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), components = require_components(), Popover_module = require_Popover_scss(), Section = require_Section2(), Scrollable = require_Scrollable();
    function Pane({
      captureOverscroll = !1,
      fixed,
      sectioned,
      children,
      height,
      subdued,
      onScrolledToBottom
    }) {
      let className = css.classNames(Popover_module.default.Pane, fixed && Popover_module.default["Pane-fixed"], subdued && Popover_module.default["Pane-subdued"], captureOverscroll && Popover_module.default["Pane-captureOverscroll"]), content = sectioned ? components.wrapWithComponent(children, Section.Section, {}) : children, style = height ? {
        height,
        maxHeight: height,
        minHeight: height
      } : void 0;
      return fixed ? /* @__PURE__ */ React2.createElement("div", {
        style,
        className
      }, content) : /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
        shadow: !0,
        className,
        style,
        onScrolledToBottom
      }, content);
    }
    exports.Pane = Pane;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/components/PopoverOverlay/PopoverOverlay.js
var require_PopoverOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/components/PopoverOverlay/PopoverOverlay.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisTokens = require("@shopify/polaris-tokens"), focus = require_focus(), css = require_css(), components = require_components(), types = require_types(), shared = require_shared(), Popover_module = require_Popover_scss(), Pane = require_Pane(), context = require_context7(), EventListener = require_EventListener(), KeypressListener = require_KeypressListener(), PositionedOverlay = require_PositionedOverlay();
    exports.PopoverCloseSource = void 0;
    (function(PopoverCloseSource) {
      PopoverCloseSource[PopoverCloseSource.Click = 0] = "Click", PopoverCloseSource[PopoverCloseSource.EscapeKeypress = 1] = "EscapeKeypress", PopoverCloseSource[PopoverCloseSource.FocusOut = 2] = "FocusOut", PopoverCloseSource[PopoverCloseSource.ScrollOut = 3] = "ScrollOut";
    })(exports.PopoverCloseSource || (exports.PopoverCloseSource = {}));
    var TransitionStatus;
    (function(TransitionStatus2) {
      TransitionStatus2.Entering = "entering", TransitionStatus2.Entered = "entered", TransitionStatus2.Exiting = "exiting", TransitionStatus2.Exited = "exited";
    })(TransitionStatus || (TransitionStatus = {}));
    var PopoverOverlay = class extends React2.PureComponent {
      constructor(props) {
        super(props), this.state = {
          transitionStatus: this.props.active ? TransitionStatus.Entering : TransitionStatus.Exited
        }, this.contentNode = /* @__PURE__ */ React2.createRef(), this.renderPopover = (overlayDetails) => {
          let {
            measuring,
            desiredHeight,
            positioning
          } = overlayDetails, {
            id,
            children,
            sectioned,
            fullWidth,
            fullHeight,
            fluidContent,
            hideOnPrint,
            autofocusTarget,
            captureOverscroll
          } = this.props, className = css.classNames(Popover_module.default.Popover, positioning === "above" && Popover_module.default.positionedAbove, fullWidth && Popover_module.default.fullWidth, measuring && Popover_module.default.measuring, hideOnPrint && Popover_module.default["PopoverOverlay-hideOnPrint"]), contentStyles = measuring ? void 0 : {
            height: desiredHeight
          }, contentClassNames = css.classNames(Popover_module.default.Content, fullHeight && Popover_module.default["Content-fullHeight"], fluidContent && Popover_module.default["Content-fluidContent"]);
          return /* @__PURE__ */ React2.createElement("div", Object.assign({
            className
          }, shared.overlay.props), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
            event: "click",
            handler: this.handleClick
          }), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
            event: "touchstart",
            handler: this.handleClick
          }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
            keyCode: types.Key.Escape,
            handler: this.handleEscape
          }), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.FocusTracker,
            tabIndex: 0,
            onFocus: this.handleFocusFirstItem
          }), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.ContentContainer
          }, /* @__PURE__ */ React2.createElement("div", {
            id,
            tabIndex: autofocusTarget === "none" ? void 0 : -1,
            className: contentClassNames,
            style: contentStyles,
            ref: this.contentNode
          }, renderPopoverContent(children, {
            captureOverscroll,
            sectioned
          }))), /* @__PURE__ */ React2.createElement("div", {
            className: Popover_module.default.FocusTracker,
            tabIndex: 0,
            onFocus: this.handleFocusLastItem
          }));
        }, this.handleClick = (event) => {
          let target = event.target, {
            contentNode,
            props: {
              activator,
              onClose,
              preventCloseOnChildOverlayClick
            }
          } = this, composedPath = event.composedPath(), wasDescendant = preventCloseOnChildOverlayClick ? wasPolarisPortalDescendant(composedPath, this.context.container) : wasContentNodeDescendant(composedPath, contentNode), isActivatorDescendant = nodeContainsDescendant(activator, target);
          wasDescendant || isActivatorDescendant || this.state.transitionStatus !== TransitionStatus.Entered || onClose(exports.PopoverCloseSource.Click);
        }, this.handleScrollOut = () => {
          this.props.onClose(exports.PopoverCloseSource.ScrollOut);
        }, this.handleEscape = (event) => {
          let target = event.target, {
            contentNode,
            props: {
              activator
            }
          } = this, composedPath = event.composedPath(), wasDescendant = wasContentNodeDescendant(composedPath, contentNode), isActivatorDescendant = nodeContainsDescendant(activator, target);
          (wasDescendant || isActivatorDescendant) && this.props.onClose(exports.PopoverCloseSource.EscapeKeypress);
        }, this.handleFocusFirstItem = () => {
          this.props.onClose(exports.PopoverCloseSource.FocusOut);
        }, this.handleFocusLastItem = () => {
          this.props.onClose(exports.PopoverCloseSource.FocusOut);
        }, this.overlayRef = /* @__PURE__ */ React2.createRef();
      }
      forceUpdatePosition() {
        this.overlayRef.current?.forceUpdatePosition();
      }
      changeTransitionStatus(transitionStatus, cb) {
        this.setState({
          transitionStatus
        }, cb), this.contentNode.current && this.contentNode.current.getBoundingClientRect();
      }
      componentDidMount() {
        this.props.active && (this.focusContent(), this.changeTransitionStatus(TransitionStatus.Entered));
      }
      componentDidUpdate(oldProps) {
        this.props.active && !oldProps.active && (this.focusContent(), this.changeTransitionStatus(TransitionStatus.Entering, () => {
          this.clearTransitionTimeout(), this.enteringTimer = window.setTimeout(() => {
            this.setState({
              transitionStatus: TransitionStatus.Entered
            });
          }, parseInt(polarisTokens.themeDefault.motion["motion-duration-100"], 10));
        })), !this.props.active && oldProps.active && (this.clearTransitionTimeout(), this.setState({
          transitionStatus: TransitionStatus.Exited
        }));
      }
      componentWillUnmount() {
        this.clearTransitionTimeout();
      }
      render() {
        let {
          active,
          activator,
          fullWidth,
          preferredPosition = "below",
          preferredAlignment = "center",
          preferInputActivator = !0,
          fixed,
          zIndexOverride
        } = this.props, {
          transitionStatus
        } = this.state;
        if (transitionStatus === TransitionStatus.Exited && !active)
          return null;
        let className = css.classNames(Popover_module.default.PopoverOverlay, transitionStatus === TransitionStatus.Entering && Popover_module.default["PopoverOverlay-entering"], transitionStatus === TransitionStatus.Entered && Popover_module.default["PopoverOverlay-open"], transitionStatus === TransitionStatus.Exiting && Popover_module.default["PopoverOverlay-exiting"]);
        return /* @__PURE__ */ React2.createElement(PositionedOverlay.PositionedOverlay, {
          ref: this.overlayRef,
          fullWidth,
          active,
          activator,
          preferInputActivator,
          preferredPosition,
          preferredAlignment,
          render: this.renderPopover.bind(this),
          fixed,
          onScrollOut: this.handleScrollOut,
          classNames: className,
          zIndexOverride
        });
      }
      clearTransitionTimeout() {
        this.enteringTimer && window.clearTimeout(this.enteringTimer);
      }
      focusContent() {
        let {
          autofocusTarget = "container"
        } = this.props;
        autofocusTarget === "none" || this.contentNode == null || requestAnimationFrame(() => {
          if (this.contentNode.current == null)
            return;
          let focusableChild = focus.findFirstKeyboardFocusableNode(this.contentNode.current);
          focusableChild && autofocusTarget === "first-node" ? focusableChild.focus({
            preventScroll: !1
          }) : this.contentNode.current.focus({
            preventScroll: !1
          });
        });
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    PopoverOverlay.contextType = context.PortalsManagerContext;
    function renderPopoverContent(children, props) {
      let childrenArray = React2.Children.toArray(children);
      return components.isElementOfType(childrenArray[0], Pane.Pane) ? childrenArray : components.wrapWithComponent(childrenArray, Pane.Pane, props);
    }
    function nodeContainsDescendant(rootNode, descendant) {
      if (rootNode === descendant)
        return !0;
      let parent = descendant.parentNode;
      for (; parent != null; ) {
        if (parent === rootNode)
          return !0;
        parent = parent.parentNode;
      }
      return !1;
    }
    function wasContentNodeDescendant(composedPath, contentNode) {
      return contentNode.current != null && composedPath.includes(contentNode.current);
    }
    function wasPolarisPortalDescendant(composedPath, portalsContainerElement) {
      return composedPath.some((eventTarget) => eventTarget instanceof Node && portalsContainerElement?.contains(eventTarget));
    }
    exports.PopoverOverlay = PopoverOverlay;
    exports.nodeContainsDescendant = nodeContainsDescendant;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.js
var require_Popover = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Popover/Popover.js"(exports) {
    "use strict";
    var React2 = require("react"), focus = require_focus(), shared = require_shared(), setActivatorAttributes = require_set_activator_attributes(), PopoverOverlay = require_PopoverOverlay(), Pane = require_Pane(), Section = require_Section2(), Portal = require_Portal(), PopoverComponent = /* @__PURE__ */ React2.forwardRef(function({
      activatorWrapper = "div",
      children,
      onClose,
      activator,
      preventFocusOnClose,
      active,
      fixed,
      ariaHaspopup,
      preferInputActivator = !0,
      zIndexOverride,
      ...rest
    }, ref) {
      let [activatorNode, setActivatorNode] = React2.useState(), overlayRef = React2.useRef(null), activatorContainer = React2.useRef(null), WrapperComponent = activatorWrapper, id = React2.useId();
      function forceUpdatePosition() {
        overlayRef.current?.forceUpdatePosition();
      }
      React2.useImperativeHandle(ref, () => ({
        forceUpdatePosition
      }));
      let setAccessibilityAttributes = React2.useCallback(() => {
        if (activatorContainer.current == null)
          return;
        let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current, activatorDisabled = "disabled" in focusableActivator && Boolean(focusableActivator.disabled);
        setActivatorAttributes.setActivatorAttributes(focusableActivator, {
          id,
          active,
          ariaHaspopup,
          activatorDisabled
        });
      }, [id, active, ariaHaspopup]), handleClose = (source) => {
        if (onClose(source), !(activatorContainer.current == null || preventFocusOnClose)) {
          if (source === PopoverOverlay.PopoverCloseSource.FocusOut && activatorNode) {
            let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorNode) || focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
            focus.focusNextFocusableNode(focusableActivator, isInPortal) || focusableActivator.focus();
          } else if (source === PopoverOverlay.PopoverCloseSource.EscapeKeypress && activatorNode) {
            let focusableActivator = focus.findFirstFocusableNodeIncludingDisabled(activatorNode) || focus.findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
            focusableActivator ? focusableActivator.focus() : focus.focusNextFocusableNode(focusableActivator, isInPortal);
          }
        }
      };
      React2.useEffect(() => {
        (!activatorNode && activatorContainer.current || activatorNode && activatorContainer.current && !activatorContainer.current.contains(activatorNode)) && setActivatorNode(activatorContainer.current.firstElementChild), setAccessibilityAttributes();
      }, [activatorNode, setAccessibilityAttributes]), React2.useEffect(() => {
        activatorNode && activatorContainer.current && setActivatorNode(activatorContainer.current.firstElementChild), setAccessibilityAttributes();
      }, [activatorNode, setAccessibilityAttributes]);
      let portal = activatorNode ? /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "popover"
      }, /* @__PURE__ */ React2.createElement(PopoverOverlay.PopoverOverlay, Object.assign({
        ref: overlayRef,
        id,
        activator: activatorNode,
        preferInputActivator,
        onClose: handleClose,
        active,
        fixed,
        zIndexOverride
      }, rest), children)) : null;
      return /* @__PURE__ */ React2.createElement(WrapperComponent, {
        ref: activatorContainer
      }, React2.Children.only(activator), portal);
    });
    function isInPortal(element) {
      let parentElement = element.parentElement;
      for (; parentElement; ) {
        if (parentElement.matches(shared.portal.selector))
          return !1;
        parentElement = parentElement.parentElement;
      }
      return !0;
    }
    var Popover = Object.assign(PopoverComponent, {
      Pane: Pane.Pane,
      Section: Section.Section
    });
    Object.defineProperty(exports, "PopoverCloseSource", {
      enumerable: !0,
      get: function() {
        return PopoverOverlay.PopoverCloseSource;
      }
    });
    exports.Popover = Popover;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.js
var require_RollupActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/RollupActions/RollupActions.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), RollupActions_module = require_RollupActions_scss(), hooks = require_hooks2(), Button2 = require_Button(), Popover = require_Popover(), ActionList = require_ActionList();
    function RollupActions({
      accessibilityLabel,
      items = [],
      sections = []
    }) {
      let i18n = hooks.useI18n(), {
        value: rollupOpen,
        toggle: toggleRollupOpen
      } = useToggle.useToggle(!1);
      if (items.length === 0 && sections.length === 0)
        return null;
      let activatorMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: RollupActions_module.default.RollupActivator
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        icon: polarisIcons.MenuHorizontalIcon,
        accessibilityLabel: accessibilityLabel || i18n.translate("Polaris.ActionMenu.RollupActions.rollupButton"),
        onClick: toggleRollupOpen
      }));
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: rollupOpen,
        activator: activatorMarkup,
        preferredAlignment: "right",
        onClose: toggleRollupOpen,
        hideOnPrint: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items,
        sections,
        onActionAnyItem: toggleRollupOpen
      }));
    }
    exports.RollupActions = RollupActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.scss.js
var require_Actions_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionsLayout: "Polaris-ActionMenu-Actions__ActionsLayout"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.scss.js
var require_MenuGroup_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Details: "Polaris-ActionMenu-MenuGroup__Details"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.scss.js
var require_SecondaryAction_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SecondaryAction: "Polaris-ActionMenu-SecondaryAction",
      critical: "Polaris-ActionMenu-SecondaryAction--critical"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.js
var require_SecondaryAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/SecondaryAction/SecondaryAction.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), SecondaryAction_module = require_SecondaryAction_scss(), Button2 = require_Button(), Tooltip = require_Tooltip();
    function SecondaryAction({
      children,
      tone,
      helpText,
      onAction,
      getOffsetWidth,
      destructive,
      ...rest
    }) {
      let secondaryActionsRef = React2.useRef(null);
      React2.useEffect(() => {
        !getOffsetWidth || !secondaryActionsRef.current || getOffsetWidth(secondaryActionsRef.current?.offsetWidth);
      }, [getOffsetWidth]);
      let buttonMarkup = /* @__PURE__ */ React2.createElement(Button2.Button, Object.assign({
        onClick: onAction,
        tone: destructive ? "critical" : void 0
      }, rest), children), actionMarkup = helpText ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        preferredPosition: "below",
        content: helpText
      }, buttonMarkup) : buttonMarkup;
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SecondaryAction_module.default.SecondaryAction, tone === "critical" && SecondaryAction_module.default.critical),
        ref: secondaryActionsRef
      }, actionMarkup);
    }
    exports.SecondaryAction = SecondaryAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.js
var require_MenuGroup = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/MenuGroup/MenuGroup.js"(exports) {
    "use strict";
    var React2 = require("react"), MenuGroup_module = require_MenuGroup_scss(), Popover = require_Popover(), ActionList = require_ActionList(), SecondaryAction = require_SecondaryAction();
    function MenuGroup({
      accessibilityLabel,
      active,
      actions,
      details,
      title,
      icon,
      disabled,
      onClick,
      onClose,
      onOpen,
      getOffsetWidth,
      sections
    }) {
      let handleClose = React2.useCallback(() => {
        onClose(title);
      }, [onClose, title]), handleOpen = React2.useCallback(() => {
        onOpen(title);
      }, [onOpen, title]), handleClick = React2.useCallback(() => {
        onClick ? onClick(handleOpen) : handleOpen();
      }, [onClick, handleOpen]), handleOffsetWidth = React2.useCallback((width) => {
        getOffsetWidth && getOffsetWidth(width);
      }, [getOffsetWidth]), popoverActivator = /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, {
        disclosure: !0,
        disabled,
        icon,
        accessibilityLabel,
        onClick: handleClick,
        getOffsetWidth: handleOffsetWidth
      }, title);
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: Boolean(active),
        activator: popoverActivator,
        preferredAlignment: "left",
        onClose: handleClose,
        hideOnPrint: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: actions,
        sections,
        onActionAnyItem: handleClose
      }), details && /* @__PURE__ */ React2.createElement("div", {
        className: MenuGroup_module.default.Details
      }, details));
    }
    exports.MenuGroup = MenuGroup;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.scss.js
var require_ButtonGroup_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ButtonGroup: "Polaris-ButtonGroup",
      Item: "Polaris-ButtonGroup__Item",
      "Item-plain": "Polaris-ButtonGroup__Item--plain",
      variantSegmented: "Polaris-ButtonGroup--variantSegmented",
      "Item-focused": "Polaris-ButtonGroup__Item--focused",
      fullWidth: "Polaris-ButtonGroup--fullWidth",
      extraTight: "Polaris-ButtonGroup--extraTight",
      tight: "Polaris-ButtonGroup--tight",
      loose: "Polaris-ButtonGroup--loose",
      noWrap: "Polaris-ButtonGroup--noWrap"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/components/Item/Item.js
var require_Item3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), useToggle = require_use_toggle(), css = require_css(), ButtonGroup_module = require_ButtonGroup_scss();
    function Item({
      button
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(ButtonGroup_module.default.Item, focused && ButtonGroup_module.default["Item-focused"], button.props.variant === "plain" && ButtonGroup_module.default["Item-plain"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        onFocus: forceTrueFocused,
        onBlur: forceFalseFocused
      }, button);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.js
var require_ButtonGroup = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ButtonGroup/ButtonGroup.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), components = require_components(), ButtonGroup_module = require_ButtonGroup_scss(), Item = require_Item3();
    function ButtonGroup({
      children,
      gap,
      variant,
      fullWidth,
      connectedTop,
      noWrap
    }) {
      let className = css.classNames(ButtonGroup_module.default.ButtonGroup, gap && ButtonGroup_module.default[gap], variant && ButtonGroup_module.default[css.variationName("variant", variant)], fullWidth && ButtonGroup_module.default.fullWidth, noWrap && ButtonGroup_module.default.noWrap), contents = components.elementChildren(children).map((child, index) => /* @__PURE__ */ React2.createElement(Item.Item, {
        button: child,
        key: index
      }));
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        "data-buttongroup-variant": variant,
        "data-buttongroup-connected-top": connectedTop,
        "data-buttongroup-full-width": fullWidth,
        "data-buttongroup-no-wrap": noWrap
      }, contents);
    }
    exports.ButtonGroup = ButtonGroup;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.js
var require_Actions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/components/Actions/Actions.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), useEventListener = require_use_event_listener(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), Actions_module = require_Actions_scss(), MenuGroup = require_MenuGroup(), ButtonGroup = require_ButtonGroup(), hooks = require_hooks2(), SecondaryAction = require_SecondaryAction(), ACTION_SPACING = 8;
    function Actions({
      actions = [],
      groups = [],
      onActionRollup
    }) {
      let i18n = hooks.useI18n(), actionsLayoutRef = React2.useRef(null), menuGroupWidthRef = React2.useRef(0), availableWidthRef = React2.useRef(0), actionsAndGroupsLengthRef = React2.useRef(0), timesMeasured = React2.useRef(0), actionWidthsRef = React2.useRef([]), rollupActiveRef = React2.useRef(null), [activeMenuGroup, setActiveMenuGroup] = React2.useState(void 0), [measuredActions, setMeasuredActions] = React2.useState({
        showable: [],
        rolledUp: []
      }), defaultRollupGroup = {
        title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
        actions: []
      }, lastMenuGroup = [...groups].pop(), lastMenuGroupWidth = [...actionWidthsRef.current].pop() || 0, handleActionsOffsetWidth = React2.useCallback((width) => {
        actionWidthsRef.current = [...actionWidthsRef.current, width];
      }, []), handleMenuGroupToggle = React2.useCallback((group) => setActiveMenuGroup(activeMenuGroup ? void 0 : group), [activeMenuGroup]), handleMenuGroupClose = React2.useCallback(() => setActiveMenuGroup(void 0), []), updateActions = React2.useCallback(() => {
        let actionsAndGroups = [...actions, ...groups];
        groups.length > 0 && (actionsAndGroups = [...actionsAndGroups].slice(0, actionsAndGroups.length - 1)), setMeasuredActions((currentMeasuredActions) => {
          let showable = actionsAndGroups.slice(0, currentMeasuredActions.showable.length), rolledUp = actionsAndGroups.slice(currentMeasuredActions.showable.length, actionsAndGroups.length);
          return {
            showable,
            rolledUp
          };
        });
      }, [actions, groups]), measureActions = React2.useCallback(() => {
        if (actionWidthsRef.current.length === 0 || availableWidthRef.current === 0)
          return;
        let actionsAndGroups = [...actions, ...groups];
        if (actionsAndGroups.length === 1) {
          setMeasuredActions({
            showable: actionsAndGroups,
            rolledUp: []
          });
          return;
        }
        let currentAvailableWidth = availableWidthRef.current, newShowableActions = [], newRolledUpActions = [];
        if (actionsAndGroups.forEach((action, index) => {
          if (actionWidthsRef.current[index] + menuGroupWidthRef.current + ACTION_SPACING + lastMenuGroupWidth <= currentAvailableWidth)
            currentAvailableWidth -= actionWidthsRef.current[index] + ACTION_SPACING * 2, newShowableActions = [...newShowableActions, action];
          else {
            if (currentAvailableWidth = 0, action === lastMenuGroup)
              return;
            newRolledUpActions = [...newRolledUpActions, action];
          }
        }), onActionRollup) {
          let isRollupActive = newShowableActions.length < actionsAndGroups.length - 1;
          rollupActiveRef.current !== isRollupActive && (onActionRollup(isRollupActive), rollupActiveRef.current = isRollupActive);
        }
        setMeasuredActions({
          showable: newShowableActions,
          rolledUp: newRolledUpActions
        }), timesMeasured.current += 1, actionsAndGroupsLengthRef.current = actionsAndGroups.length;
      }, [actions, groups, lastMenuGroup, lastMenuGroupWidth, onActionRollup]), handleResize = React2.useMemo(() => debounce.debounce(() => {
        actionsLayoutRef.current && (availableWidthRef.current = actionsLayoutRef.current.offsetWidth, timesMeasured.current = 0, measureActions());
      }, 50, {
        leading: !1,
        trailing: !0
      }), [measureActions]);
      useEventListener.useEventListener("resize", handleResize), useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        if (actionsLayoutRef.current) {
          if (availableWidthRef.current = actionsLayoutRef.current.offsetWidth, // Allow measuring twice
          // This accounts for the initial paint and re-flow
          timesMeasured.current >= 2 && [...actions, ...groups].length === actionsAndGroupsLengthRef.current) {
            updateActions();
            return;
          }
          measureActions();
        }
      }, [actions, groups, measureActions, updateActions]);
      let actionsMarkup = actions.map((action) => {
        if (measuredActions.showable.length > 0 || measuredActions.rolledUp.includes(action))
          return null;
        let {
          content,
          onAction,
          ...rest
        } = action;
        return /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, Object.assign({
          key: content,
          onClick: onAction
        }, rest, {
          getOffsetWidth: handleActionsOffsetWidth
        }), content);
      }), rollUppableActionsMarkup = measuredActions.showable.length > 0 ? measuredActions.showable.map((action) => action.content && /* @__PURE__ */ React2.createElement(SecondaryAction.SecondaryAction, Object.assign({
        key: action.content
      }, action, {
        getOffsetWidth: handleActionsOffsetWidth
      }), action.content)) : null, groupsMarkup = [...groups, defaultRollupGroup].filter((group) => groups.length === 0 ? group : group === lastMenuGroup || !measuredActions.rolledUp.some((rolledUpGroup) => isMenuGroup(rolledUpGroup) && rolledUpGroup.title === group.title)).map((group) => {
        let {
          title,
          actions: groupActions,
          ...rest
        } = group, isDefaultGroup = group === defaultRollupGroup, isLastMenuGroup = group === lastMenuGroup, [finalRolledUpActions, finalRolledUpSectionGroups] = measuredActions.rolledUp.reduce(([actions2, sections], action) => (isMenuGroup(action) ? sections.push({
          title: action.title,
          items: action.actions.map((sectionAction) => ({
            ...sectionAction,
            disabled: action.disabled || sectionAction.disabled
          }))
        }) : actions2.push(action), [actions2, sections]), [[], []]);
        if (!isDefaultGroup && !isLastMenuGroup)
          return /* @__PURE__ */ React2.createElement(MenuGroup.MenuGroup, Object.assign({
            key: title,
            title,
            active: title === activeMenuGroup,
            actions: groupActions
          }, rest, {
            onOpen: handleMenuGroupToggle,
            onClose: handleMenuGroupClose,
            getOffsetWidth: handleActionsOffsetWidth
          }));
        if (!isDefaultGroup && isLastMenuGroup)
          return /* @__PURE__ */ React2.createElement(MenuGroup.MenuGroup, Object.assign({
            key: title,
            title,
            active: title === activeMenuGroup,
            actions: [...finalRolledUpActions, ...groupActions],
            sections: finalRolledUpSectionGroups
          }, rest, {
            onOpen: handleMenuGroupToggle,
            onClose: handleMenuGroupClose,
            getOffsetWidth: handleActionsOffsetWidth
          }));
        if (isDefaultGroup && groups.length === 0 && finalRolledUpActions.length)
          return /* @__PURE__ */ React2.createElement(MenuGroup.MenuGroup, Object.assign({
            key: title,
            title,
            active: title === activeMenuGroup,
            actions: finalRolledUpActions,
            sections: finalRolledUpSectionGroups
          }, rest, {
            onOpen: handleMenuGroupToggle,
            onClose: handleMenuGroupClose,
            getOffsetWidth: handleActionsOffsetWidth
          }));
      }), groupedActionsMarkup = /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, {
        gap: "tight"
      }, rollUppableActionsMarkup, actionsMarkup, groupsMarkup);
      return /* @__PURE__ */ React2.createElement("div", {
        className: Actions_module.default.ActionsLayout,
        ref: actionsLayoutRef
      }, groupedActionsMarkup);
    }
    function isMenuGroup(actionOrMenuGroup) {
      return "title" in actionOrMenuGroup;
    }
    exports.Actions = Actions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.js
var require_ActionMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ActionMenu/ActionMenu.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), ActionMenu_module = require_ActionMenu_scss(), RollupActions = require_RollupActions(), Actions = require_Actions();
    function ActionMenu({
      actions = [],
      groups = [],
      rollup,
      rollupActionsLabel,
      onActionRollup
    }) {
      if (actions.length === 0 && groups.length === 0)
        return null;
      let actionMenuClassNames = css.classNames(ActionMenu_module.default.ActionMenu, rollup && ActionMenu_module.default.rollup), rollupSections = groups.map((group) => convertGroupToSection(group));
      return /* @__PURE__ */ React2.createElement("div", {
        className: actionMenuClassNames
      }, rollup ? /* @__PURE__ */ React2.createElement(RollupActions.RollupActions, {
        accessibilityLabel: rollupActionsLabel,
        items: actions,
        sections: rollupSections
      }) : /* @__PURE__ */ React2.createElement(Actions.Actions, {
        actions,
        groups,
        onActionRollup
      }));
    }
    function hasGroupsWithActions(groups = []) {
      return groups.length === 0 ? !1 : groups.some((group) => group.actions.length > 0);
    }
    function convertGroupToSection({
      title,
      actions,
      disabled
    }) {
      return {
        title,
        items: actions.map((action) => ({
          ...action,
          disabled: disabled || action.disabled
        }))
      };
    }
    exports.ActionMenu = ActionMenu;
    exports.hasGroupsWithActions = hasGroupsWithActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/options.js
var require_options = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/options.js"(exports) {
    "use strict";
    function isSection(arr) {
      return typeof arr[0] == "object" && Object.prototype.hasOwnProperty.call(arr[0], "options");
    }
    exports.isSection = isSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.scss.js
var require_Autocomplete_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Loading: "Polaris-Autocomplete__Loading",
      SectionWrapper: "Polaris-Autocomplete__SectionWrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.scss.js
var require_MappedOption_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Content: "Polaris-Autocomplete-MappedOption__Content",
      Media: "Polaris-Autocomplete-MappedOption__Media",
      singleSelectionMedia: "Polaris-Autocomplete-MappedOption--singleSelectionMedia",
      disabledMedia: "Polaris-Autocomplete-MappedOption--disabledMedia"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.scss.js
var require_Listbox_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Listbox: "Polaris-Listbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/combobox/context.js
var require_context11 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/combobox/context.js"(exports) {
    "use strict";
    var React2 = require("react"), ComboboxTextFieldContext = /* @__PURE__ */ React2.createContext(void 0), ComboboxListboxContext = /* @__PURE__ */ React2.createContext({}), ComboboxListboxOptionContext = /* @__PURE__ */ React2.createContext({});
    exports.ComboboxListboxContext = ComboboxListboxContext;
    exports.ComboboxListboxOptionContext = ComboboxListboxOptionContext;
    exports.ComboboxTextFieldContext = ComboboxTextFieldContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/combobox/hooks.js
var require_hooks5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/combobox/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context11();
    function useComboboxTextField() {
      let context$1 = React2.useContext(context.ComboboxTextFieldContext);
      if (!context$1)
        throw new Error("No Combobox was provided. Your component must be wrapped in a <Combobox> component.");
      return context$1;
    }
    function useComboboxListbox() {
      return React2.useContext(context.ComboboxListboxContext);
    }
    exports.useComboboxListbox = useComboboxListbox;
    exports.useComboboxTextField = useComboboxTextField;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/utilities.js
var require_utilities = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/utilities.js"(exports) {
    "use strict";
    function scrollOptionIntoView(option, scrollable) {
      let listTop = scrollable.scrollTop, listBottom = listTop + scrollable.clientHeight, {
        offsetHeight: optionHeight
      } = option, {
        offsetTop: optionTop
      } = option, optionBottom = optionTop + optionHeight;
      if (!(optionTop > listTop && optionBottom < listBottom)) {
        let top = 0;
        optionBottom > listBottom ? top = optionBottom + optionHeight * 0.85 - listBottom : optionTop < listTop && (top = optionTop - optionHeight * 0.15 - listTop), requestAnimationFrame(() => {
          scrollable.scrollBy({
            top,
            behavior: "auto"
          });
        });
      }
    }
    exports.scrollOptionIntoView = scrollOptionIntoView;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/context.js
var require_context12 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/context.js"(exports) {
    "use strict";
    var React2 = require("react"), ListboxContext = /* @__PURE__ */ React2.createContext(void 0), WithinListboxContext = /* @__PURE__ */ React2.createContext(!1), ActionContext = /* @__PURE__ */ React2.createContext(!1);
    exports.ActionContext = ActionContext;
    exports.ListboxContext = ListboxContext;
    exports.WithinListboxContext = WithinListboxContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.scss.js
var require_TextOption_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextOption: "Polaris-Listbox-TextOption",
      allowMultiple: "Polaris-Listbox-TextOption--allowMultiple",
      isAction: "Polaris-Listbox-TextOption--isAction",
      disabled: "Polaris-Listbox-TextOption--disabled",
      selected: "Polaris-Listbox-TextOption--selected",
      Content: "Polaris-Listbox-TextOption__Content",
      Checkbox: "Polaris-Listbox-TextOption__Checkbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.scss.js
var require_Checkbox_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Checkbox: "Polaris-Checkbox",
      ChoiceLabel: "Polaris-Checkbox__ChoiceLabel",
      Backdrop: "Polaris-Checkbox__Backdrop",
      Input: "Polaris-Checkbox__Input",
      "Input-indeterminate": "Polaris-Checkbox__Input--indeterminate",
      Icon: "Polaris-Checkbox__Icon",
      animated: "Polaris-Checkbox--animated",
      toneMagic: "Polaris-Checkbox--toneMagic",
      hover: "Polaris-Checkbox--hover",
      error: "Polaris-Checkbox--error",
      checked: "Polaris-Checkbox--checked",
      pathAnimation: "Polaris-Checkbox--pathAnimation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.scss.js
var require_Choice_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Choice: "Polaris-Choice",
      labelHidden: "Polaris-Choice--labelHidden",
      Label: "Polaris-Choice__Label",
      Control: "Polaris-Choice__Control",
      disabled: "Polaris-Choice--disabled",
      toneMagic: "Polaris-Choice--toneMagic",
      Descriptions: "Polaris-Choice__Descriptions",
      HelpText: "Polaris-Choice__HelpText"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.js
var require_Choice = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Choice/Choice.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Choice_module = require_Choice_scss(), Text2 = require_Text(), InlineError = require_InlineError();
    function Choice({
      id,
      label,
      disabled,
      error,
      children,
      labelHidden,
      helpText,
      onClick,
      labelClassName,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }) {
      let className = css.classNames(Choice_module.default.Choice, labelHidden && Choice_module.default.labelHidden, disabled && Choice_module.default.disabled, tone && Choice_module.default[css.variationName("tone", tone)], labelClassName), labelStyle = {
        // Pass through overrides for bleed values if they're set by the prop
        ...css.getResponsiveProps("choice", "bleed-block-end", "space", bleedBlockEnd || bleed),
        ...css.getResponsiveProps("choice", "bleed-block-start", "space", bleedBlockStart || bleed),
        ...css.getResponsiveProps("choice", "bleed-inline-start", "space", bleedInlineStart || bleed),
        ...css.getResponsiveProps("choice", "bleed-inline-end", "space", bleedInlineEnd || bleed),
        ...Object.fromEntries(Object.entries(css.getResponsiveValue("choice", "fill", fill)).map(
          // Map "true" => "100%" and "false" => "auto" for use in
          // inline/block-size calc()
          ([key, value]) => [key, value ? "100%" : "auto"]
        ))
      }, labelMarkup = (
        // NOTE: Can't use a Box here for a few reasons:
        // - as="label" fails `Element` typecheck (even though the JS works)
        // - Can't pass hard coded values to padding (forced to tokens)
        // - Can't pass negative values to padding
        // - Can't pass margins at all
        /* @__PURE__ */ React2.createElement("label", {
          className,
          htmlFor: id,
          onClick,
          style: css.sanitizeCustomProperties(labelStyle)
        }, /* @__PURE__ */ React2.createElement("span", {
          className: Choice_module.default.Control
        }, children), /* @__PURE__ */ React2.createElement("span", {
          className: Choice_module.default.Label
        }, /* @__PURE__ */ React2.createElement("span", null, label)))
      ), helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.HelpText,
        id: helpTextID(id)
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        tone: disabled ? void 0 : "subdued"
      }, helpText)) : null, errorMarkup = error && typeof error != "boolean" && /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.Error
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: id
      })), descriptionMarkup = helpTextMarkup || errorMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: Choice_module.default.Descriptions
      }, errorMarkup, helpTextMarkup) : null;
      return descriptionMarkup ? /* @__PURE__ */ React2.createElement("div", null, labelMarkup, descriptionMarkup) : labelMarkup;
    }
    function helpTextID(id) {
      return `${id}HelpText`;
    }
    exports.Choice = Choice;
    exports.helpTextID = helpTextID;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.js
var require_Checkbox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Checkbox/Checkbox.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), context = require_context12(), Checkbox_module = require_Checkbox_scss(), Choice = require_Choice(), InlineError = require_InlineError(), Icon = require_Icon(), Checkbox = /* @__PURE__ */ React2.forwardRef(function({
      ariaControls,
      ariaDescribedBy: ariaDescribedByProp,
      label,
      labelHidden,
      checked = !1,
      helpText,
      disabled,
      id: idProp,
      name,
      value,
      error,
      onChange,
      onFocus,
      onBlur,
      labelClassName,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }, ref) {
      let inputNode = React2.useRef(null), uniqId = React2.useId(), id = idProp ?? uniqId, isWithinListbox = React2.useContext(context.WithinListboxContext);
      React2.useImperativeHandle(ref, () => ({
        focus: () => {
          inputNode.current && inputNode.current.focus();
        }
      }));
      let handleBlur = () => {
        onBlur && onBlur();
      }, handleOnClick = () => {
        onChange == null || inputNode.current == null || disabled || (onChange(inputNode.current.checked, id), inputNode.current.focus());
      }, describedBy = [];
      error && typeof error != "boolean" && describedBy.push(InlineError.errorTextID(id)), helpText && describedBy.push(Choice.helpTextID(id)), ariaDescribedByProp && describedBy.push(ariaDescribedByProp);
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, wrapperClassName = css.classNames(Checkbox_module.default.Checkbox, error && Checkbox_module.default.error), isIndeterminate = checked === "indeterminate", isChecked = !isIndeterminate && Boolean(checked), indeterminateAttributes = isIndeterminate ? {
        indeterminate: "true",
        "aria-checked": "mixed"
      } : {
        "aria-checked": isChecked
      }, iconSource = /* @__PURE__ */ React2.createElement("svg", {
        viewBox: "0 0 16 16",
        shapeRendering: "geometricPrecision",
        textRendering: "geometricPrecision"
      }, /* @__PURE__ */ React2.createElement("path", {
        className: css.classNames(checked && Checkbox_module.default.checked),
        d: "M1.5,5.5L3.44655,8.22517C3.72862,8.62007,4.30578,8.64717,4.62362,8.28044L10.5,1.5",
        transform: "translate(2 2.980376)",
        opacity: "0",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        pathLength: "1"
      })), inputClassName = css.classNames(Checkbox_module.default.Input, isIndeterminate && Checkbox_module.default["Input-indeterminate"], tone && Checkbox_module.default[css.variationName("tone", tone)]), extraChoiceProps = {
        helpText,
        error,
        bleed,
        bleedBlockStart,
        bleedBlockEnd,
        bleedInlineStart,
        bleedInlineEnd
      };
      return /* @__PURE__ */ React2.createElement(Choice.Choice, Object.assign({
        id,
        label,
        labelHidden,
        disabled,
        labelClassName: css.classNames(Checkbox_module.default.ChoiceLabel, labelClassName),
        fill,
        tone
      }, extraChoiceProps), /* @__PURE__ */ React2.createElement("span", {
        className: wrapperClassName
      }, /* @__PURE__ */ React2.createElement("input", Object.assign({
        ref: inputNode,
        id,
        name,
        value,
        type: "checkbox",
        checked: isChecked,
        disabled,
        className: inputClassName,
        onBlur: handleBlur,
        onChange: noop,
        onClick: handleOnClick,
        onFocus,
        "aria-invalid": error != null,
        "aria-controls": ariaControls,
        "aria-describedby": ariaDescribedBy,
        role: isWithinListbox ? "presentation" : "checkbox"
      }, indeterminateAttributes)), /* @__PURE__ */ React2.createElement("span", {
        className: Checkbox_module.default.Backdrop,
        onClick: stopPropagation,
        onKeyUp: stopPropagation
      }), /* @__PURE__ */ React2.createElement("span", {
        className: css.classNames(Checkbox_module.default.Icon, !isIndeterminate && Checkbox_module.default.animated)
      }, isIndeterminate ? /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.MinusIcon
      }) : iconSource)));
    });
    function noop() {
    }
    function stopPropagation(event) {
      event.stopPropagation();
    }
    exports.Checkbox = Checkbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.js
var require_TextOption = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/TextOption/TextOption.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), context = require_context11(), context$1 = require_context12(), TextOption_module = require_TextOption_scss(), Checkbox = require_Checkbox(), Box = require_Box(), InlineStack = require_InlineStack(), Icon = require_Icon(), TextOption = /* @__PURE__ */ React2.memo(function({
      children,
      selected,
      disabled
    }) {
      let {
        allowMultiple
      } = React2.useContext(context.ComboboxListboxOptionContext), isAction = React2.useContext(context$1.ActionContext), textOptionClassName = css.classNames(TextOption_module.default.TextOption, selected && !allowMultiple && TextOption_module.default.selected, disabled && TextOption_module.default.disabled, allowMultiple && TextOption_module.default.allowMultiple, isAction && TextOption_module.default.isAction), optionMarkup = selected ? /* @__PURE__ */ React2.createElement(Box.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        wrap: !1,
        align: "space-between",
        gap: "200"
      }, children, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "end"
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.CheckIcon
      })))) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
      return /* @__PURE__ */ React2.createElement("div", {
        className: textOptionClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TextOption_module.default.Content
      }, allowMultiple && !isAction ? /* @__PURE__ */ React2.createElement("div", {
        className: TextOption_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        disabled,
        checked: selected,
        label: children
      })) : optionMarkup));
    });
    exports.TextOption = TextOption;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.scss.js
var require_Loading_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ListItem: "Polaris-Listbox-Loading__ListItem",
      Loading: "Polaris-Listbox-Loading"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/listbox/hooks.js
var require_hooks6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/listbox/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context12();
    function useListbox() {
      let listbox = React2.useContext(context.ListboxContext);
      if (!listbox)
        throw new Error("No Listbox was provided. Listbox components must be wrapped in a Listbox");
      return listbox;
    }
    exports.useListbox = useListbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.js
var require_Loading = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require("react"), Loading_module = require_Loading_scss(), hooks = require_hooks6(), Spinner = require_Spinner(), Loading = /* @__PURE__ */ React2.memo(function({
      children,
      accessibilityLabel: label
    }) {
      let {
        setLoading
      } = hooks.useListbox();
      return React2.useEffect(() => (setLoading(label), () => {
        setLoading(void 0);
      }), [label, setLoading]), /* @__PURE__ */ React2.createElement("li", {
        className: Loading_module.default.ListItem,
        role: "presentation"
      }, children || /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Loading
      }, /* @__PURE__ */ React2.createElement(Spinner.Spinner, {
        size: "small",
        accessibilityLabel: label
      })));
    });
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/selectors.js
var require_selectors = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/selectors.js"(exports) {
    "use strict";
    var listboxSectionDataSelector = {
      props: {
        "data-polaris-listbox-section-item": !0
      },
      selector: "[data-polaris-listbox-section-item]"
    }, listboxWithinSectionDataSelector = {
      attribute: "data-polaris-listbox-within-section-item"
    };
    exports.listboxSectionDataSelector = listboxSectionDataSelector;
    exports.listboxWithinSectionDataSelector = listboxWithinSectionDataSelector;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/context.js
var require_context13 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/context.js"(exports) {
    "use strict";
    var React2 = require("react"), SectionContext = /* @__PURE__ */ React2.createContext(null);
    exports.SectionContext = SectionContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.scss.js
var require_Section_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SectionGroup: "Polaris-Listbox-Section__SectionGroup",
      noDivider: "Polaris-Listbox-Section--noDivider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.js
var require_Section3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), selectors = require_selectors(), context = require_context13(), Section_module = require_Section_scss();
    function Section({
      children,
      divider = !0,
      title
    }) {
      let id = React2.useId();
      return /* @__PURE__ */ React2.createElement(context.SectionContext.Provider, {
        value: id
      }, /* @__PURE__ */ React2.createElement("li", Object.assign({
        role: "presentation"
      }, selectors.listboxSectionDataSelector.props), title, /* @__PURE__ */ React2.createElement("ul", {
        role: "group",
        "aria-labelledby": id,
        className: css.classNames(Section_module.default.SectionGroup, !divider && Section_module.default.noDivider)
      }, children)));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/hooks.js
var require_hooks7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Section/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context13();
    function useSection() {
      return React2.useContext(context.SectionContext);
    }
    exports.useSection = useSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Header/Header.js
var require_Header = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require("react"), hooks = require_hooks7(), Box = require_Box(), Text2 = require_Text();
    function Header({
      children
    }) {
      let sectionId = hooks.useSection() || "", content = typeof children == "string" ? /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockStart: "200",
        paddingInlineStart: "400",
        paddingBlockEnd: "200",
        paddingInlineEnd: "400"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "headingSm",
        tone: "subdued"
      }, children)) : children;
      return /* @__PURE__ */ React2.createElement("div", {
        "aria-hidden": !0,
        id: sectionId
      }, content);
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.scss.js
var require_Action_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Action: "Polaris-Listbox-Action",
      ActionDivider: "Polaris-Listbox-Action__ActionDivider",
      Icon: "Polaris-Listbox-Action__Icon"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.scss.js
var require_Option_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Option: "Polaris-Listbox-Option",
      divider: "Polaris-Listbox-Option--divider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/autocomplete/context.js
var require_context14 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/autocomplete/context.js"(exports) {
    "use strict";
    var React2 = require("react"), MappedActionContext = /* @__PURE__ */ React2.createContext({});
    exports.MappedActionContext = MappedActionContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.js
var require_Option = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Option/Option.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), context = require_context12(), Option_module = require_Option_scss(), hooks = require_hooks6(), context$1 = require_context14(), hooks$1 = require_hooks7(), selectors = require_selectors(), TextOption = require_TextOption(), UnstyledLink = require_UnstyledLink(), Option = /* @__PURE__ */ React2.memo(function({
      value,
      children,
      selected,
      disabled = !1,
      accessibilityLabel,
      divider
    }) {
      let {
        onOptionSelect
      } = hooks.useListbox(), isAction = React2.useContext(context.ActionContext), {
        role,
        url,
        external,
        onAction,
        destructive
      } = React2.useContext(context$1.MappedActionContext), listItemRef = React2.useRef(null), domId = React2.useId(), sectionId = hooks$1.useSection(), isWithinSection = Boolean(sectionId), handleOptionSelect = React2.useCallback((event) => {
        event.preventDefault(), event.stopPropagation(), onAction && onAction(), listItemRef.current && !onAction && onOptionSelect({
          domId,
          value,
          element: listItemRef.current,
          disabled
        });
      }, [domId, onOptionSelect, value, disabled, onAction]), handleMouseDown = (event) => {
        event.preventDefault();
      }, content = typeof children == "string" ? /* @__PURE__ */ React2.createElement(TextOption.TextOption, {
        selected,
        disabled
      }, children) : children, sectionAttributes = {
        [selectors.listboxWithinSectionDataSelector.attribute]: isWithinSection
      }, legacyRoleSupport = role || "option", contentMarkup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        url,
        external
      }, content) : content;
      return /* @__PURE__ */ React2.createElement("li", Object.assign({}, sectionAttributes, {
        "data-listbox-option": !0,
        "data-listbox-option-action": isAction,
        "data-listbox-option-value": value,
        "data-listbox-option-destructive": destructive,
        "data-within-section": isWithinSection,
        className: css.classNames(Option_module.default.Option, divider && Option_module.default.divider),
        id: domId,
        ref: listItemRef,
        tabIndex: -1,
        role: legacyRoleSupport,
        "aria-label": accessibilityLabel,
        "aria-selected": selected,
        "aria-disabled": disabled,
        onClick: disabled ? void 0 : handleOptionSelect,
        onKeyDown: disabled ? void 0 : handleOptionSelect,
        onMouseDown: handleMouseDown
      }), contentMarkup);
    });
    exports.Option = Option;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.js
var require_Action = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/components/Action/Action.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), context = require_context12(), Action_module = require_Action_scss(), Option = require_Option(), TextOption = require_TextOption(), Icon = require_Icon();
    function Action(props) {
      let {
        selected,
        disabled,
        children,
        icon,
        divider
      } = props, iconMarkup = icon && /* @__PURE__ */ React2.createElement("div", {
        className: Action_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        tone: "subdued",
        source: icon
      })), className = css.classNames(Action_module.default.Action, divider && Action_module.default.ActionDivider);
      return /* @__PURE__ */ React2.createElement(context.ActionContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement(Option.Option, props, /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement(TextOption.TextOption, {
        selected,
        disabled
      }, iconMarkup, children))));
    }
    exports.Action = Action;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.js
var require_Listbox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Listbox/Listbox.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), useToggle = require_use_toggle(), types = require_types(), shared = require_shared(), Listbox_module = require_Listbox_scss(), hooks = require_hooks5(), utilities = require_utilities(), context = require_context12(), TextOption = require_TextOption(), Loading = require_Loading(), Section = require_Section3(), Header = require_Header(), Action = require_Action(), KeypressListener = require_KeypressListener(), Text2 = require_Text(), Option = require_Option();
    exports.AutoSelection = void 0;
    (function(AutoSelection) {
      AutoSelection.FirstSelected = "FIRST_SELECTED", AutoSelection.First = "FIRST", AutoSelection.None = "NONE";
    })(exports.AutoSelection || (exports.AutoSelection = {}));
    var OPTION_SELECTOR = "[data-listbox-option]", OPTION_VALUE_ATTRIBUTE = "data-listbox-option-value", OPTION_ACTION_ATTRIBUTE = "data-listbox-option-action", OPTION_FOCUS_ATTRIBUTE = "data-focused";
    function Listbox({
      children,
      autoSelection = exports.AutoSelection.FirstSelected,
      enableKeyboardControl,
      accessibilityLabel,
      customListId,
      onSelect,
      onActiveOptionChange
    }) {
      let [loading, setLoading] = React2.useState(), [activeOption, setActiveOption] = React2.useState(), [lazyLoading, setLazyLoading] = React2.useState(!1), [currentOptions, setCurrentOptions] = React2.useState([]), {
        value: keyboardEventsEnabled,
        setTrue: enableKeyboardEvents,
        setFalse: disableKeyboardEvents
      } = useToggle.useToggle(Boolean(enableKeyboardControl)), uniqueId = React2.useId(), listId = customListId || uniqueId, scrollableRef = React2.useRef(null), listboxRef = React2.useRef(null), {
        listboxId,
        textFieldLabelId,
        textFieldFocused,
        willLoadMoreOptions,
        setActiveOptionId,
        setListboxId,
        onOptionSelected,
        onKeyToBottom
      } = hooks.useComboboxListbox(), inCombobox = Boolean(setActiveOptionId);
      React2.useEffect(() => {
        setListboxId && !listboxId && setListboxId(listId);
      }, [setListboxId, listboxId, listId]);
      let getNavigableOptions = React2.useCallback(() => listboxRef.current ? [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))] : [], []), getFirstNavigableOption = React2.useCallback((currentOptions2) => {
        let hasSelectedOptions = currentOptions2.some((option) => option.getAttribute("aria-selected") === "true"), elementIndex = 0, element = currentOptions2.find((option, index) => {
          let isInteractable = option.getAttribute("aria-disabled") !== "true", isFirstNavigableOption;
          return hasSelectedOptions && autoSelection === exports.AutoSelection.FirstSelected ? isFirstNavigableOption = option.getAttribute("aria-selected") === "true" && isInteractable : isFirstNavigableOption = isInteractable, isFirstNavigableOption && (elementIndex = index), isFirstNavigableOption;
        });
        if (element)
          return {
            element,
            index: elementIndex
          };
      }, [autoSelection]), handleScrollIntoView = React2.useCallback((option) => {
        let {
          current: scrollable
        } = scrollableRef;
        scrollable && utilities.scrollOptionIntoView(option.element, scrollable);
      }, []), handleScrollIntoViewDebounced = debounce.debounce(handleScrollIntoView, 50), handleKeyToBottom = React2.useCallback(() => {
        if (onKeyToBottom)
          return setLazyLoading(!0), Promise.resolve(onKeyToBottom());
      }, [onKeyToBottom]), handleChangeActiveOption = React2.useCallback((nextOption) => {
        if (!nextOption)
          return setActiveOption(void 0);
        activeOption?.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE), nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, "true"), handleScrollIntoViewDebounced(nextOption), setActiveOption(nextOption), setActiveOptionId?.(nextOption.domId), onActiveOptionChange?.(nextOption.value, nextOption.domId);
      }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]), getFormattedOption = React2.useCallback((element, index) => ({
        element,
        index,
        domId: element.id,
        value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || "",
        disabled: element.getAttribute("aria-disabled") === "true",
        isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === "true"
      }), []), resetActiveOption = React2.useCallback(() => {
        let nextOption, nextOptions = getNavigableOptions(), nextActiveOption = getFirstNavigableOption(nextOptions);
        if (nextOptions.length === 0 && currentOptions.length > 0) {
          setCurrentOptions(nextOptions), handleChangeActiveOption();
          return;
        }
        if (nextActiveOption) {
          let {
            element,
            index
          } = nextActiveOption;
          nextOption = getFormattedOption(element, index);
        }
        let optionIsAlreadyActive = activeOption !== void 0 && nextOption?.domId === activeOption?.domId, actionContentHasUpdated = activeOption?.isAction && nextOption?.isAction && nextOption?.value !== activeOption?.value, currentValues = currentOptions.map((option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)), nextValues = nextOptions.map((option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)), listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => currentValues[index] === value), listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => nextValues[index] === value);
        if (listIsUnchanged) {
          optionIsAlreadyActive && actionContentHasUpdated && (setCurrentOptions(nextOptions), handleChangeActiveOption(nextOption));
          return;
        }
        if (listIsAppended) {
          setCurrentOptions(nextOptions);
          return;
        }
        if (setCurrentOptions(nextOptions), lazyLoading) {
          setLazyLoading(!1);
          return;
        }
        handleChangeActiveOption(nextOption);
      }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);
      React2.useEffect(() => {
        autoSelection !== exports.AutoSelection.None && !loading && children && React2.Children.count(children) > 0 && resetActiveOption();
      }, [children, autoSelection, activeOption, loading, resetActiveOption]), React2.useEffect(() => {
        listboxRef.current && (scrollableRef.current = listboxRef.current.closest(shared.scrollable.selector));
      }, []), React2.useEffect(() => {
        enableKeyboardControl && !keyboardEventsEnabled && enableKeyboardEvents();
      }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);
      let onOptionSelect = React2.useCallback((option) => {
        handleChangeActiveOption(option), onOptionSelected && onOptionSelected(), onSelect && onSelect(option.value);
      }, [handleChangeActiveOption, onSelect, onOptionSelected]), getNextIndex = React2.useCallback((currentIndex, lastIndex, direction) => {
        let nextIndex;
        return direction === "down" ? currentIndex === lastIndex ? nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0 : nextIndex = currentIndex + 1 : nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1, nextIndex;
      }, [willLoadMoreOptions]), getNextValidOption = React2.useCallback(async (key) => {
        let lastIndex = currentOptions.length - 1, currentIndex = activeOption?.index || 0, nextIndex = 0, element = activeOption?.element, totalOptions = -1;
        if (!activeOption && autoSelection === exports.AutoSelection.None) {
          let nextOptions = getNavigableOptions(), nextActiveOption = getFirstNavigableOption(nextOptions);
          return setCurrentOptions(nextOptions), {
            element: nextActiveOption?.element,
            nextIndex: nextActiveOption?.index || 0
          };
        }
        for (; totalOptions++ < lastIndex; ) {
          nextIndex = getNextIndex(currentIndex, lastIndex, key), element = currentOptions[nextIndex];
          let triggerLazyLoad = nextIndex >= lastIndex, isDisabled = element?.getAttribute("aria-disabled") === "true";
          if (triggerLazyLoad && willLoadMoreOptions && await handleKeyToBottom(), isDisabled) {
            currentIndex = nextIndex, element = void 0;
            continue;
          }
          break;
        }
        return {
          element,
          nextIndex
        };
      }, [autoSelection, currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom, getFirstNavigableOption, getNavigableOptions]), handleArrow = React2.useCallback(async (type, event) => {
        event.preventDefault();
        let {
          element,
          nextIndex
        } = await getNextValidOption(type);
        if (!element)
          return;
        let nextOption = getFormattedOption(element, nextIndex);
        handleChangeActiveOption(nextOption);
      }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]), handleDownArrow = React2.useCallback((event) => {
        handleArrow("down", event);
      }, [handleArrow]), handleUpArrow = React2.useCallback((event) => {
        handleArrow("up", event);
      }, [handleArrow]), handleEnter = React2.useCallback((event) => {
        event.preventDefault(), event.stopPropagation(), activeOption && onOptionSelect(activeOption);
      }, [activeOption, onOptionSelect]), handleFocus = React2.useCallback(() => {
        enableKeyboardControl || enableKeyboardEvents();
      }, [enableKeyboardControl, enableKeyboardEvents]), handleBlur = React2.useCallback((event) => {
        if (event.stopPropagation(), keyboardEventsEnabled) {
          let nextActiveOption = getFirstNavigableOption(currentOptions);
          if (nextActiveOption) {
            let {
              element,
              index
            } = nextActiveOption, nextOption = getFormattedOption(element, index);
            handleChangeActiveOption(nextOption);
          }
        }
        enableKeyboardControl || disableKeyboardEvents();
      }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]), listeners = keyboardEventsEnabled || textFieldFocused ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.DownArrow,
        handler: handleDownArrow
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.UpArrow,
        handler: handleUpArrow
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyEvent: "keydown",
        keyCode: types.Key.Enter,
        handler: handleEnter
      })) : null, listboxContext = React2.useMemo(() => ({
        onOptionSelect,
        setLoading
      }), [onOptionSelect]);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, listeners, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "polite"
      }, loading || null)), /* @__PURE__ */ React2.createElement(context.ListboxContext.Provider, {
        value: listboxContext
      }, /* @__PURE__ */ React2.createElement(context.WithinListboxContext.Provider, {
        value: !0
      }, children ? /* @__PURE__ */ React2.createElement("ul", {
        tabIndex: 0,
        role: "listbox",
        className: Listbox_module.default.Listbox,
        "aria-label": inCombobox ? void 0 : accessibilityLabel,
        "aria-labelledby": textFieldLabelId,
        "aria-busy": Boolean(loading),
        "aria-activedescendant": activeOption && activeOption.domId,
        id: listId,
        onFocus: inCombobox ? void 0 : handleFocus,
        onBlur: inCombobox ? void 0 : handleBlur,
        ref: listboxRef
      }, children) : null)));
    }
    Listbox.Option = Option.Option;
    Listbox.TextOption = TextOption.TextOption;
    Listbox.Loading = Loading.Loading;
    Listbox.Section = Section.Section;
    Listbox.Header = Header.Header;
    Listbox.Action = Action.Action;
    exports.Listbox = Listbox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.js
var require_MappedOption = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedOption/MappedOption.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), MappedOption_module = require_MappedOption_scss(), Listbox = require_Listbox(), MappedOption = /* @__PURE__ */ React2.memo(function({
      label,
      value,
      disabled,
      media,
      selected,
      singleSelection
    }) {
      let mediaClassNames = css.classNames(MappedOption_module.default.Media, disabled && MappedOption_module.default.disabledMedia, singleSelection && MappedOption_module.default.singleSelectionMedia), mediaMarkup = media ? /* @__PURE__ */ React2.createElement("div", {
        className: mediaClassNames
      }, media) : null, accessibilityLabel = typeof label == "string" ? label : void 0;
      return /* @__PURE__ */ React2.createElement(Listbox.Listbox.Option, {
        accessibilityLabel,
        key: value,
        selected,
        value,
        disabled
      }, /* @__PURE__ */ React2.createElement(Listbox.Listbox.TextOption, {
        selected,
        disabled
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedOption_module.default.Content
      }, mediaMarkup, label)));
    });
    exports.MappedOption = MappedOption;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.scss.js
var require_Combobox_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Listbox: "Polaris-Combobox__Listbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/components/TextField/TextField.js
var require_TextField2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/components/TextField/TextField.js"(exports) {
    "use strict";
    var React2 = require("react"), hooks = require_hooks5(), Label = require_Label(), TextField$1 = require_TextField();
    function TextField2({
      value,
      id: idProp,
      type = "text",
      ariaAutocomplete = "list",
      onFocus,
      onBlur,
      onChange,
      ...rest
    }) {
      let comboboxTextFieldContext = hooks.useComboboxTextField(), {
        activeOptionId,
        listboxId,
        expanded,
        setTextFieldFocused,
        setTextFieldLabelId,
        onTextFieldFocus,
        onTextFieldChange,
        onTextFieldBlur
      } = comboboxTextFieldContext, uniqueId = React2.useId(), textFieldId = React2.useMemo(() => idProp || uniqueId, [uniqueId, idProp]), labelId = React2.useMemo(() => Label.labelID(idProp || uniqueId), [uniqueId, idProp]);
      React2.useEffect(() => {
        setTextFieldLabelId && setTextFieldLabelId(labelId);
      }, [labelId, setTextFieldLabelId]);
      let handleFocus = React2.useCallback((event) => {
        onFocus && onFocus(event), onTextFieldFocus && onTextFieldFocus(), setTextFieldFocused && setTextFieldFocused(!0);
      }, [onFocus, onTextFieldFocus, setTextFieldFocused]), handleBlur = React2.useCallback((event) => {
        onBlur && onBlur(event), onTextFieldBlur && onTextFieldBlur(), setTextFieldFocused && setTextFieldFocused(!1);
      }, [onBlur, onTextFieldBlur, setTextFieldFocused]), handleChange = React2.useCallback((value2, id) => {
        onChange && onChange(value2, id), onTextFieldChange && onTextFieldChange(value2);
      }, [onChange, onTextFieldChange]);
      return /* @__PURE__ */ React2.createElement(TextField$1.TextField, Object.assign({}, rest, {
        value,
        id: textFieldId,
        type,
        ariaAutocomplete,
        "aria-haspopup": "listbox",
        ariaActiveDescendant: activeOptionId,
        ariaControls: listboxId,
        role: "combobox",
        ariaExpanded: expanded,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: handleChange
      }));
    }
    exports.TextField = TextField2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.js
var require_Combobox = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Combobox/Combobox.js"(exports) {
    "use strict";
    var React2 = require("react"), Combobox_module = require_Combobox_scss(), context = require_context11(), TextField2 = require_TextField2(), Popover = require_Popover();
    function Combobox({
      activator,
      allowMultiple,
      children,
      preferredPosition = "below",
      willLoadMoreOptions,
      height,
      onScrolledToBottom,
      onClose
    }) {
      let [popoverActive, setPopoverActive] = React2.useState(!1), [activeOptionId, setActiveOptionId] = React2.useState(), [textFieldLabelId, setTextFieldLabelId] = React2.useState(), [listboxId, setListboxId] = React2.useState(), [textFieldFocused, setTextFieldFocused] = React2.useState(!1), shouldOpen = Boolean(!popoverActive && React2.Children.count(children) > 0), ref = React2.useRef(null), handleClose = React2.useCallback(() => {
        setPopoverActive(!1), onClose?.(), setActiveOptionId(void 0);
      }, [onClose]), handleOpen = React2.useCallback(() => {
        setPopoverActive(!0), setActiveOptionId(void 0);
      }, []), onOptionSelected = React2.useCallback(() => {
        if (!allowMultiple) {
          handleClose(), setActiveOptionId(void 0);
          return;
        }
        ref.current?.forceUpdatePosition();
      }, [allowMultiple, handleClose]), handleFocus = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleChange = React2.useCallback(() => {
        shouldOpen && handleOpen();
      }, [shouldOpen, handleOpen]), handleBlur = React2.useCallback(() => {
        popoverActive && handleClose();
      }, [popoverActive, handleClose]), textFieldContextValue = React2.useMemo(() => ({
        activeOptionId,
        expanded: popoverActive,
        listboxId,
        setTextFieldFocused,
        setTextFieldLabelId,
        onTextFieldFocus: handleFocus,
        onTextFieldChange: handleChange,
        onTextFieldBlur: handleBlur
      }), [activeOptionId, popoverActive, listboxId, setTextFieldFocused, setTextFieldLabelId, handleFocus, handleChange, handleBlur]), listboxOptionContextValue = React2.useMemo(() => ({
        allowMultiple
      }), [allowMultiple]), listboxContextValue = React2.useMemo(() => ({
        listboxId,
        textFieldLabelId,
        textFieldFocused,
        willLoadMoreOptions,
        onOptionSelected,
        setActiveOptionId,
        setListboxId,
        onKeyToBottom: onScrolledToBottom
      }), [listboxId, textFieldLabelId, textFieldFocused, willLoadMoreOptions, onOptionSelected, setActiveOptionId, setListboxId, onScrolledToBottom]);
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        ref,
        active: popoverActive,
        activator: /* @__PURE__ */ React2.createElement(context.ComboboxTextFieldContext.Provider, {
          value: textFieldContextValue
        }, activator),
        autofocusTarget: "none",
        preventFocusOnClose: !0,
        fullWidth: !0,
        preferInputActivator: !1,
        preferredPosition,
        onClose: handleClose
      }, React2.Children.count(children) > 0 ? /* @__PURE__ */ React2.createElement(Popover.Popover.Pane, {
        onScrolledToBottom,
        height
      }, /* @__PURE__ */ React2.createElement(context.ComboboxListboxContext.Provider, {
        value: listboxContextValue
      }, /* @__PURE__ */ React2.createElement(context.ComboboxListboxOptionContext.Provider, {
        value: listboxOptionContextValue
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Combobox_module.default.Listbox
      }, children)))) : null);
    }
    Combobox.TextField = TextField2.TextField;
    exports.Combobox = Combobox;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.scss.js
var require_MappedAction_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActionContainer: "Polaris-Autocomplete-MappedAction__ActionContainer",
      Action: "Polaris-Autocomplete-MappedAction__Action",
      destructive: "Polaris-Autocomplete-MappedAction--destructive",
      selected: "Polaris-Autocomplete-MappedAction--selected",
      disabled: "Polaris-Autocomplete-MappedAction--disabled",
      Prefix: "Polaris-Autocomplete-MappedAction__Prefix",
      Suffix: "Polaris-Autocomplete-MappedAction__Suffix",
      Content: "Polaris-Autocomplete-MappedAction__Content",
      Text: "Polaris-Autocomplete-MappedAction__Text",
      ContentWrap: "Polaris-Autocomplete-MappedAction__ContentWrap"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.js
var require_MappedAction = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/components/MappedAction/MappedAction.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), MappedAction_module = require_MappedAction_scss(), hooks = require_hooks2(), Icon = require_Icon(), Badge = require_Badge(), Text2 = require_Text(), context = require_context14(), Listbox = require_Listbox();
    function MappedAction({
      active,
      content,
      disabled,
      icon,
      image,
      prefix,
      suffix,
      ellipsis,
      role,
      url,
      external,
      onAction,
      destructive,
      badge,
      helpText,
      wrapOverflow = !1
    }) {
      let i18n = hooks.useI18n(), prefixMarkup = null, contentOverflowStyle = wrapOverflow ? MappedAction_module.default.ContentWrap : void 0;
      prefix ? prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Prefix
      }, prefix) : icon ? prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Prefix
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: icon
      })) : image && (prefixMarkup = /* @__PURE__ */ React2.createElement("div", {
        role: "presentation",
        className: MappedAction_module.default.Prefix,
        style: {
          backgroundImage: `url(${image}`
        }
      }));
      let badgeMarkup = badge && /* @__PURE__ */ React2.createElement("span", {
        className: MappedAction_module.default.Suffix
      }, /* @__PURE__ */ React2.createElement(Badge.Badge, {
        tone: badge.tone
      }, badge.content)), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("span", {
        className: MappedAction_module.default.Suffix
      }, suffix), contentText = ellipsis && content ? i18n.translate("Polaris.Autocomplete.ellipsis", {
        content
      }) : content, contentMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Text
      }, /* @__PURE__ */ React2.createElement("div", {
        className: contentOverflowStyle
      }, contentText), helpText ? /* @__PURE__ */ React2.createElement(Text2.Text, {
        tone: "subdued",
        as: "span"
      }, helpText) : null), context$1 = React2.useMemo(() => ({
        role,
        url,
        external,
        onAction,
        destructive
      }), [role, url, external, onAction, destructive]), actionClassNames = css.classNames(MappedAction_module.default.Action, disabled && MappedAction_module.default.disabled, destructive && MappedAction_module.default.destructive, active && MappedAction_module.default.selected);
      return /* @__PURE__ */ React2.createElement(context.MappedActionContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.ActionContainer
      }, /* @__PURE__ */ React2.createElement(Listbox.Listbox.Action, {
        selected: active,
        disabled,
        value: content || ""
      }, /* @__PURE__ */ React2.createElement("div", {
        className: actionClassNames
      }, /* @__PURE__ */ React2.createElement("div", {
        className: MappedAction_module.default.Content
      }, prefixMarkup, contentMarkup, badgeMarkup, suffixMarkup)))));
    }
    exports.MappedAction = MappedAction;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.js
var require_Autocomplete = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Autocomplete/Autocomplete.js"(exports) {
    "use strict";
    var React2 = require("react"), options = require_options(), Autocomplete_module = require_Autocomplete_scss(), MappedOption = require_MappedOption(), Listbox = require_Listbox(), Combobox = require_Combobox(), MappedAction = require_MappedAction(), hooks = require_hooks2(), Autocomplete = function({
      options: options$1,
      selected,
      textField,
      preferredPosition,
      listTitle,
      allowMultiple,
      loading,
      actionBefore,
      willLoadMoreResults,
      emptyState,
      onSelect,
      onLoadMoreResults
    }) {
      let i18n = hooks.useI18n(), buildMappedOptionFromOption = React2.useCallback((options2) => options2.map((option) => /* @__PURE__ */ React2.createElement(MappedOption.MappedOption, Object.assign({
        key: option.id || option.value
      }, option, {
        selected: selected.includes(option.value),
        singleSelection: !allowMultiple
      }))), [selected, allowMultiple]), optionsMarkup = React2.useMemo(() => {
        let conditionalOptions = loading && !willLoadMoreResults ? [] : options$1;
        if (options.isSection(conditionalOptions)) {
          if (conditionalOptions.every(({
            options: options2
          }) => options2.length === 0))
            return null;
          let optionsMarkup2 = conditionalOptions.map(({
            options: options2,
            title
          }) => {
            if (options2.length === 0)
              return null;
            let optionMarkup = buildMappedOptionFromOption(options2);
            return /* @__PURE__ */ React2.createElement(Listbox.Listbox.Section, {
              divider: !1,
              title: /* @__PURE__ */ React2.createElement(Listbox.Listbox.Header, null, title),
              key: title
            }, optionMarkup);
          });
          return /* @__PURE__ */ React2.createElement("div", {
            className: Autocomplete_module.default.SectionWrapper
          }, optionsMarkup2);
        }
        let optionList = conditionalOptions.length > 0 ? buildMappedOptionFromOption(conditionalOptions) : null;
        return listTitle ? /* @__PURE__ */ React2.createElement(Listbox.Listbox.Section, {
          divider: !1,
          title: /* @__PURE__ */ React2.createElement(Listbox.Listbox.Header, null, listTitle)
        }, optionList) : optionList;
      }, [listTitle, loading, options$1, willLoadMoreResults, buildMappedOptionFromOption]), loadingMarkup = loading ? /* @__PURE__ */ React2.createElement(Listbox.Listbox.Loading, {
        accessibilityLabel: i18n.translate("Polaris.Autocomplete.spinnerAccessibilityLabel")
      }) : null, updateSelection = React2.useCallback((newSelection) => {
        if (actionBefore && newSelection === actionBefore.content) {
          actionBefore.onAction && actionBefore.onAction();
          return;
        }
        allowMultiple ? selected.includes(newSelection) ? onSelect(selected.filter((option) => option !== newSelection)) : onSelect([...selected, newSelection]) : onSelect([newSelection]);
      }, [allowMultiple, onSelect, selected, actionBefore]), actionMarkup = actionBefore && /* @__PURE__ */ React2.createElement(MappedAction.MappedAction, actionBefore), emptyStateMarkup = emptyState && options$1.length < 1 && !loading && /* @__PURE__ */ React2.createElement("div", {
        role: "status"
      }, emptyState), autoSelection = actionBefore ? Listbox.AutoSelection.First : void 0;
      return /* @__PURE__ */ React2.createElement(Combobox.Combobox, {
        activator: textField,
        allowMultiple,
        onScrolledToBottom: onLoadMoreResults,
        preferredPosition,
        willLoadMoreOptions: willLoadMoreResults
      }, actionMarkup || optionsMarkup || loadingMarkup || emptyStateMarkup ? /* @__PURE__ */ React2.createElement(Listbox.Listbox, {
        autoSelection,
        onSelect: updateSelection
      }, actionMarkup, optionsMarkup && (!loading || willLoadMoreResults) ? optionsMarkup : null, loadingMarkup, emptyStateMarkup) : null);
    };
    Autocomplete.TextField = Combobox.Combobox.TextField;
    exports.Autocomplete = Autocomplete;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.scss.js
var require_Backdrop_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Backdrop: "Polaris-Backdrop",
      transparent: "Polaris-Backdrop--transparent",
      belowNavigation: "Polaris-Backdrop--belowNavigation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.scss.js
var require_ScrollLock_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var ScrollLock_module = {};
    exports.default = ScrollLock_module;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/hooks.js
var require_hooks8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/scroll-lock-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), errors = require_errors(), context = require_context3();
    function useScrollLockManager() {
      let scrollLockManager = React2.useContext(context.ScrollLockManagerContext);
      if (!scrollLockManager)
        throw new errors.MissingAppProviderError("No ScrollLockManager was provided.");
      return scrollLockManager;
    }
    exports.useScrollLockManager = useScrollLockManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.js
var require_ScrollLock = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ScrollLock/ScrollLock.js"(exports) {
    "use strict";
    var React2 = require("react");
    require_ScrollLock_scss();
    var hooks = require_hooks8();
    function ScrollLock(_) {
      let scrollLockManager = hooks.useScrollLockManager();
      return React2.useEffect(() => (scrollLockManager.registerScrollLock(), () => {
        scrollLockManager.unregisterScrollLock();
      }), [scrollLockManager]), null;
    }
    exports.ScrollLock = ScrollLock;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.js
var require_Backdrop = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Backdrop/Backdrop.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Backdrop_module = require_Backdrop_scss(), ScrollLock = require_ScrollLock();
    function Backdrop(props) {
      let {
        onClick,
        onTouchStart,
        belowNavigation,
        transparent,
        setClosing
      } = props, className = css.classNames(Backdrop_module.default.Backdrop, belowNavigation && Backdrop_module.default.belowNavigation, transparent && Backdrop_module.default.transparent), handleMouseDown = () => {
        setClosing && setClosing(!0);
      }, handleClick = () => {
        setClosing && setClosing(!1), onClick && onClick();
      };
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null), /* @__PURE__ */ React2.createElement("div", {
        className,
        onClick: handleClick,
        onTouchStart,
        onMouseDown: handleMouseDown
      }));
    }
    exports.Backdrop = Backdrop;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/banner-context.js
var require_banner_context = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/banner-context.js"(exports) {
    "use strict";
    var React2 = require("react"), BannerContext = /* @__PURE__ */ React2.createContext(!1);
    exports.BannerContext = BannerContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.scss.js
var require_Banner_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Banner: "Polaris-Banner",
      keyFocused: "Polaris-Banner--keyFocused",
      withinContentContainer: "Polaris-Banner--withinContentContainer",
      withinPage: "Polaris-Banner--withinPage",
      DismissIcon: "Polaris-Banner__DismissIcon",
      "text-success-on-bg-fill": "Polaris-Banner--textSuccessOnBgFill",
      "text-success": "Polaris-Banner__text--success",
      "text-warning-on-bg-fill": "Polaris-Banner--textWarningOnBgFill",
      "text-warning": "Polaris-Banner__text--warning",
      "text-critical-on-bg-fill": "Polaris-Banner--textCriticalOnBgFill",
      "text-critical": "Polaris-Banner__text--critical",
      "text-info-on-bg-fill": "Polaris-Banner--textInfoOnBgFill",
      "text-info": "Polaris-Banner__text--info",
      "icon-secondary": "Polaris-Banner__icon--secondary"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/utilities.js
var require_utilities2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/utilities.js"(exports) {
    "use strict";
    var polarisIcons = require("@shopify/polaris-icons"), React2 = require("react"), bannerAttributes = {
      success: {
        withinPage: {
          background: "bg-fill-success",
          text: "text-success-on-bg-fill",
          icon: "text-success-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-success",
          text: "text-success",
          icon: "text-success"
        },
        icon: polarisIcons.CheckIcon
      },
      warning: {
        withinPage: {
          background: "bg-fill-warning",
          text: "text-warning-on-bg-fill",
          icon: "text-warning-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-warning",
          text: "text-warning",
          icon: "text-warning"
        },
        icon: polarisIcons.AlertTriangleIcon
      },
      critical: {
        withinPage: {
          background: "bg-fill-critical",
          text: "text-critical-on-bg-fill",
          icon: "text-critical-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-critical",
          text: "text-critical",
          icon: "text-critical"
        },
        icon: polarisIcons.AlertDiamondIcon
      },
      info: {
        withinPage: {
          background: "bg-fill-info",
          text: "text-info-on-bg-fill",
          icon: "text-info-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-info",
          text: "text-info",
          icon: "text-info"
        },
        icon: polarisIcons.InfoIcon
      }
    };
    function useBannerFocus(bannerRef) {
      let wrapperRef = React2.useRef(null), [shouldShowFocus, setShouldShowFocus] = React2.useState(!1);
      return React2.useImperativeHandle(bannerRef, () => ({
        focus: () => {
          wrapperRef.current?.focus(), setShouldShowFocus(!0);
        }
      }), []), {
        wrapperRef,
        handleKeyUp: (event) => {
          event.target === wrapperRef.current && setShouldShowFocus(!0);
        },
        handleBlur: () => setShouldShowFocus(!1),
        handleMouseUp: (event) => {
          event.currentTarget.blur(), setShouldShowFocus(!1);
        },
        shouldShowFocus
      };
    }
    exports.bannerAttributes = bannerAttributes;
    exports.useBannerFocus = useBannerFocus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.js
var require_Banner = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Banner/Banner.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), bannerContext = require_banner_context(), withinContentContext = require_within_content_context(), css = require_css(), breakpoints = require_breakpoints(), useEventListener = require_use_event_listener(), Banner_module = require_Banner_scss(), utilities = require_utilities2(), hooks = require_hooks2(), Text2 = require_Text(), Icon = require_Icon(), ButtonGroup = require_ButtonGroup(), Button2 = require_Button(), Box = require_Box(), BlockStack2 = require_BlockStack(), InlineStack = require_InlineStack(), Banner2 = /* @__PURE__ */ React2.forwardRef(function(props, bannerRef) {
      let {
        tone,
        stopAnnouncements
      } = props, withinContentContainer = React2.useContext(withinContentContext.WithinContentContext), {
        wrapperRef,
        handleKeyUp,
        handleBlur,
        handleMouseUp,
        shouldShowFocus
      } = utilities.useBannerFocus(bannerRef), className = css.classNames(Banner_module.default.Banner, shouldShowFocus && Banner_module.default.keyFocused, withinContentContainer ? Banner_module.default.withinContentContainer : Banner_module.default.withinPage);
      return /* @__PURE__ */ React2.createElement(bannerContext.BannerContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        tabIndex: 0,
        ref: wrapperRef,
        role: tone === "warning" || tone === "critical" ? "alert" : "status",
        "aria-live": stopAnnouncements ? "off" : "polite",
        onMouseUp: handleMouseUp,
        onKeyUp: handleKeyUp,
        onBlur: handleBlur
      }, /* @__PURE__ */ React2.createElement(BannerLayout, props)));
    });
    function BannerLayout({
      tone = "info",
      icon,
      hideIcon,
      onDismiss,
      action,
      secondaryAction,
      title,
      children
    }) {
      let i18n = hooks.useI18n(), withinContentContainer = React2.useContext(withinContentContext.WithinContentContext), isInlineIconBanner = !title && !withinContentContainer, bannerTone = Object.keys(utilities.bannerAttributes).includes(tone) ? tone : "info", bannerColors = utilities.bannerAttributes[bannerTone][withinContentContainer ? "withinContentContainer" : "withinPage"], sharedBannerProps = {
        backgroundColor: bannerColors.background,
        textColor: bannerColors.text,
        bannerTitle: title ? /* @__PURE__ */ React2.createElement(Text2.Text, {
          as: "h2",
          variant: "headingSm",
          breakWord: !0
        }, title) : null,
        bannerIcon: hideIcon ? null : /* @__PURE__ */ React2.createElement("span", {
          className: Banner_module.default[bannerColors.icon]
        }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: icon ?? utilities.bannerAttributes[bannerTone].icon
        })),
        actionButtons: action || secondaryAction ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, action && /* @__PURE__ */ React2.createElement(Button2.Button, Object.assign({
          onClick: action.onAction
        }, action), action.content), secondaryAction && /* @__PURE__ */ React2.createElement(Button2.Button, Object.assign({
          onClick: secondaryAction.onAction
        }, secondaryAction), secondaryAction.content)) : null,
        dismissButton: onDismiss ? /* @__PURE__ */ React2.createElement(Button2.Button, {
          variant: "tertiary",
          icon: /* @__PURE__ */ React2.createElement("span", {
            className: Banner_module.default[isInlineIconBanner ? "icon-secondary" : bannerColors.icon]
          }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
            source: polarisIcons.XIcon
          })),
          onClick: onDismiss,
          accessibilityLabel: i18n.translate("Polaris.Banner.dismissButton")
        }) : null
      };
      return withinContentContainer ? /* @__PURE__ */ React2.createElement(WithinContentContainerBanner, sharedBannerProps, children) : isInlineIconBanner ? /* @__PURE__ */ React2.createElement(InlineIconBanner, sharedBannerProps, children) : /* @__PURE__ */ React2.createElement(DefaultBanner, sharedBannerProps, children);
    }
    function DefaultBanner({
      backgroundColor,
      textColor,
      bannerTitle,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      let {
        smUp
      } = breakpoints.useBreakpoints(), hasContent = children || actionButtons;
      return /* @__PURE__ */ React2.createElement(Box.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        align: "space-between"
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        background: backgroundColor,
        color: textColor,
        borderStartStartRadius: smUp ? "300" : void 0,
        borderStartEndRadius: smUp ? "300" : void 0,
        borderEndStartRadius: !hasContent && smUp ? "300" : void 0,
        borderEndEndRadius: !hasContent && smUp ? "300" : void 0,
        padding: "300"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "space-between",
        blockAlign: "center",
        gap: "200",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "100",
        wrap: !1
      }, bannerIcon, bannerTitle), dismissButton)), hasContent && /* @__PURE__ */ React2.createElement(Box.Box, {
        padding: {
          xs: "300",
          md: "400"
        },
        paddingBlockStart: "300"
      }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement("div", null, children), actionButtons))));
    }
    function InlineIconBanner({
      backgroundColor,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      let [blockAlign, setBlockAlign] = React2.useState("center"), contentNode = React2.useRef(null), iconNode = React2.useRef(null), dismissIconNode = React2.useRef(null), handleResize = React2.useCallback(() => {
        let contentHeight = contentNode.current?.offsetHeight, iconBoxHeight = iconNode.current?.offsetHeight || dismissIconNode.current?.offsetHeight;
        !contentHeight || !iconBoxHeight || (contentHeight > iconBoxHeight ? setBlockAlign("start") : setBlockAlign("center"));
      }, []);
      return React2.useEffect(() => handleResize(), [handleResize]), useEventListener.useEventListener("resize", handleResize), /* @__PURE__ */ React2.createElement(Box.Box, {
        width: "100%",
        padding: "300",
        borderRadius: "300"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "space-between",
        blockAlign,
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "200",
        wrap: !1,
        blockAlign
      }, bannerIcon ? /* @__PURE__ */ React2.createElement("div", {
        ref: iconNode
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        background: backgroundColor,
        borderRadius: "200",
        padding: "100"
      }, bannerIcon)) : null, /* @__PURE__ */ React2.createElement(Box.Box, {
        ref: contentNode,
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement("div", null, children), actionButtons)))), /* @__PURE__ */ React2.createElement("div", {
        ref: dismissIconNode,
        className: Banner_module.default.DismissIcon
      }, dismissButton)));
    }
    function WithinContentContainerBanner({
      backgroundColor,
      textColor,
      bannerTitle,
      bannerIcon,
      actionButtons,
      dismissButton,
      children
    }) {
      return /* @__PURE__ */ React2.createElement(Box.Box, {
        width: "100%",
        background: backgroundColor,
        padding: "200",
        borderRadius: "200",
        color: textColor
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "space-between",
        blockAlign: "start",
        wrap: !1,
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "150",
        wrap: !1
      }, bannerIcon, /* @__PURE__ */ React2.createElement(Box.Box, {
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "050"
      }, bannerTitle, /* @__PURE__ */ React2.createElement("div", null, children)), actionButtons))), dismissButton));
    }
    exports.Banner = Banner2;
    exports.BannerLayout = BannerLayout;
    exports.DefaultBanner = DefaultBanner;
    exports.InlineIconBanner = InlineIconBanner;
    exports.WithinContentContainerBanner = WithinContentContainerBanner;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.scss.js
var require_Bleed_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Bleed: "Polaris-Bleed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.js
var require_Bleed = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Bleed/Bleed.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Bleed_module = require_Bleed_scss(), Bleed = ({
      marginInline,
      marginBlock,
      marginBlockStart,
      marginBlockEnd,
      marginInlineStart,
      marginInlineEnd,
      children
    }) => {
      let getNegativeMargins = (direction) => {
        let xAxis = ["marginInlineStart", "marginInlineEnd"], yAxis = ["marginBlockStart", "marginBlockEnd"], directionValues = {
          marginBlockStart,
          marginBlockEnd,
          marginInlineStart,
          marginInlineEnd,
          marginInline,
          marginBlock
        };
        if (directionValues[direction])
          return directionValues[direction];
        if (xAxis.includes(direction) && marginInline)
          return directionValues.marginInline;
        if (yAxis.includes(direction) && marginBlock)
          return directionValues.marginBlock;
      }, negativeMarginBlockStart = getNegativeMargins("marginBlockStart"), negativeMarginBlockEnd = getNegativeMargins("marginBlockEnd"), negativeMarginInlineStart = getNegativeMargins("marginInlineStart"), negativeMarginInlineEnd = getNegativeMargins("marginInlineEnd"), style = {
        ...css.getResponsiveProps("bleed", "margin-block-start", "space", negativeMarginBlockStart),
        ...css.getResponsiveProps("bleed", "margin-block-end", "space", negativeMarginBlockEnd),
        ...css.getResponsiveProps("bleed", "margin-inline-start", "space", negativeMarginInlineStart),
        ...css.getResponsiveProps("bleed", "margin-inline-end", "space", negativeMarginInlineEnd)
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Bleed_module.default.Bleed,
        style: css.sanitizeCustomProperties(style)
      }, children);
    };
    exports.Bleed = Bleed;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Breadcrumbs/Breadcrumbs.js
var require_Breadcrumbs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Breadcrumbs/Breadcrumbs.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), focus = require_focus(), Button2 = require_Button();
    function Breadcrumbs({
      backAction
    }) {
      let {
        content
      } = backAction, breadcrumbMarkup = /* @__PURE__ */ React2.createElement(Button2.Button, {
        key: content,
        url: "url" in backAction ? backAction.url : void 0,
        onClick: "onAction" in backAction ? backAction.onAction : void 0,
        onPointerDown: focus.handleMouseUpByBlurring,
        icon: polarisIcons.ArrowLeftIcon,
        accessibilityLabel: backAction.accessibilityLabel ?? content
      });
      return /* @__PURE__ */ React2.createElement("nav", {
        role: "navigation"
      }, breadcrumbMarkup);
    }
    exports.Breadcrumbs = Breadcrumbs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.scss.js
var require_BulkActions_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Group: "Polaris-BulkActions__Group",
      "Group-not-sticky": "Polaris-BulkActions--groupNotSticky",
      "Group-entering": "Polaris-BulkActions__Group--entering",
      "Group-exiting": "Polaris-BulkActions__Group--exiting",
      "Group-entered": "Polaris-BulkActions__Group--entered",
      "Group-exited": "Polaris-BulkActions__Group--exited",
      "Group-measuring": "Polaris-BulkActions__Group--measuring",
      ButtonGroupWrapper: "Polaris-BulkActions__ButtonGroupWrapper",
      BulkActionButton: "Polaris-BulkActions__BulkActionButton",
      disabled: "Polaris-BulkActions--disabled"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.scss.js
var require_Indicator_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Indicator: "Polaris-Indicator",
      pulseIndicator: "Polaris-Indicator--pulseIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.js
var require_Indicator = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Indicator/Indicator.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Indicator_module = require_Indicator_scss();
    function Indicator({
      pulse = !0
    }) {
      let className = css.classNames(Indicator_module.default.Indicator, pulse && Indicator_module.default.pulseIndicator);
      return /* @__PURE__ */ React2.createElement("span", {
        className
      });
    }
    exports.Indicator = Indicator;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionButton/BulkActionButton.js
var require_BulkActionButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionButton/BulkActionButton.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), useComponentDidMount = require_use_component_did_mount(), BulkActions_module = require_BulkActions_scss(), Indicator = require_Indicator(), Tooltip = require_Tooltip(), Button2 = require_Button(), Icon = require_Icon();
    function BulkActionButton({
      handleMeasurement,
      url,
      external,
      onAction,
      content,
      disclosure,
      accessibilityLabel,
      disabled,
      indicator,
      showContentInButton
    }) {
      let bulkActionButton = React2.useRef(null);
      useComponentDidMount.useComponentDidMount(() => {
        if (handleMeasurement && bulkActionButton.current) {
          let width = bulkActionButton.current.getBoundingClientRect().width;
          handleMeasurement(width);
        }
      });
      let isActivatorForMoreActionsPopover = disclosure && !showContentInButton, buttonContent = isActivatorForMoreActionsPopover ? void 0 : content, buttonMarkup = /* @__PURE__ */ React2.createElement(Button2.Button, {
        external,
        url,
        accessibilityLabel: isActivatorForMoreActionsPopover ? content : accessibilityLabel,
        disclosure: disclosure && showContentInButton,
        onClick: onAction,
        disabled,
        size: "slim",
        icon: isActivatorForMoreActionsPopover ? /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: polarisIcons.MenuHorizontalIcon,
          tone: "base"
        }) : void 0
      }, buttonContent);
      return /* @__PURE__ */ React2.createElement("div", {
        className: BulkActions_module.default.BulkActionButton,
        ref: bulkActionButton
      }, isActivatorForMoreActionsPopover ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content,
        preferredPosition: "above"
      }, buttonMarkup) : buttonMarkup, indicator && /* @__PURE__ */ React2.createElement(Indicator.Indicator, null));
    }
    exports.BulkActionButton = BulkActionButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js
var require_BulkActionMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js"(exports) {
    "use strict";
    var React2 = require("react"), useToggle = require_use_toggle(), BulkActionButton = require_BulkActionButton(), Popover = require_Popover(), ActionList = require_ActionList();
    function BulkActionMenu({
      title,
      actions,
      isNewBadgeInBadgeActions
    }) {
      let {
        value: isVisible,
        toggle: toggleMenuVisibility
      } = useToggle.useToggle(!1);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: isVisible,
        activator: /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
          disclosure: !0,
          showContentInButton: !0,
          onAction: toggleMenuVisibility,
          content: title,
          indicator: isNewBadgeInBadgeActions
        }),
        onClose: toggleMenuVisibility,
        preferInputActivator: !0
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: actions,
        onActionAnyItem: toggleMenuVisibility
      })));
    }
    exports.BulkActionMenu = BulkActionMenu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.js
var require_BulkActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/BulkActions.js"(exports) {
    "use strict";
    var React2 = require("react"), reactTransitionGroup = require("react-transition-group"), debounce = require_debounce(), css = require_css(), clamp = require_clamp(), BulkActions_module = require_BulkActions_scss(), BulkActionMenu = require_BulkActionMenu(), hooks = require_hooks2(), BulkActionButton = require_BulkActionButton(), Popover = require_Popover(), ActionList = require_ActionList(), EventListener = require_EventListener(), InlineStack = require_InlineStack(), BUTTONS_NODE_ADDITIONAL_WIDTH = 64, BulkActionsInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          popoverVisible: !1,
          containerWidth: 0,
          measuring: !0
        }, this.containerNode = null, this.buttonsNode = null, this.moreActionsNode = null, this.groupNode = /* @__PURE__ */ React2.createRef(), this.promotedActionsWidths = [], this.bulkActionsWidth = 0, this.addedMoreActionsWidthForMeasuring = 0, this.handleResize = debounce.debounce(() => {
          let {
            popoverVisible
          } = this.state;
          if (this.containerNode) {
            let containerWidth = this.containerNode.getBoundingClientRect().width;
            containerWidth > 0 && this.setState({
              containerWidth
            });
          }
          popoverVisible && this.setState({
            popoverVisible: !1
          });
        }, 50, {
          trailing: !0
        }), this.setButtonsNode = (node) => {
          this.buttonsNode = node;
        }, this.setContainerNode = (node) => {
          this.containerNode = node;
        }, this.setMoreActionsNode = (node) => {
          this.moreActionsNode = node;
        }, this.togglePopover = () => {
          this.props.onMoreActionPopoverToggle && this.props.onMoreActionPopoverToggle(this.state.popoverVisible), this.setState(({
            popoverVisible
          }) => ({
            popoverVisible: !popoverVisible
          }));
        }, this.handleMeasurement = (width) => {
          let {
            measuring
          } = this.state;
          measuring && this.promotedActionsWidths.push(width);
        };
      }
      numberOfPromotedActionsToRender() {
        let {
          promotedActions
        } = this.props, {
          containerWidth,
          measuring
        } = this.state;
        if (!promotedActions)
          return 0;
        let containerWidthMinusAdditionalWidth = Math.max(0, containerWidth - BUTTONS_NODE_ADDITIONAL_WIDTH);
        if (containerWidthMinusAdditionalWidth >= this.bulkActionsWidth || measuring)
          return promotedActions.length;
        let sufficientSpace = !1, counter = promotedActions.length - 1, totalWidth = 0;
        for (; !sufficientSpace && counter >= 0; ) {
          totalWidth += this.promotedActionsWidths[counter];
          let widthWithRemovedAction = this.bulkActionsWidth - totalWidth + this.addedMoreActionsWidthForMeasuring;
          containerWidthMinusAdditionalWidth >= widthWithRemovedAction ? sufficientSpace = !0 : counter--;
        }
        return clamp.clamp(counter, 0, promotedActions.length);
      }
      actionSections() {
        let {
          actions
        } = this.props;
        if (!(!actions || actions.length === 0)) {
          if (instanceOfBulkActionListSectionArray(actions))
            return actions;
          if (instanceOfBulkActionArray(actions))
            return [{
              items: actions
            }];
        }
      }
      rolledInPromotedActions() {
        let {
          promotedActions
        } = this.props, numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();
        return !promotedActions || promotedActions.length === 0 || numberOfPromotedActionsToRender >= promotedActions.length ? [] : promotedActions.map((action) => instanceOfMenuGroupDescriptor(action) ? {
          items: [...action.actions]
        } : {
          items: [action]
        }).slice(numberOfPromotedActionsToRender);
      }
      // eslint-disable-next-line @typescript-eslint/member-ordering
      componentDidMount() {
        let {
          actions,
          promotedActions
        } = this.props;
        promotedActions && !actions && this.moreActionsNode && (this.addedMoreActionsWidthForMeasuring = this.moreActionsNode.getBoundingClientRect().width), this.bulkActionsWidth = this.buttonsNode ? this.buttonsNode.getBoundingClientRect().width - this.addedMoreActionsWidthForMeasuring : 0, this.containerNode && this.setState({
          containerWidth: this.containerNode.getBoundingClientRect().width,
          measuring: !1
        });
      }
      // eslint-disable-next-line @typescript-eslint/member-ordering
      render() {
        let {
          selectMode,
          disabled,
          promotedActions,
          i18n,
          isSticky,
          width
        } = this.props, actionSections = this.actionSections(), {
          popoverVisible,
          measuring
        } = this.state, numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender(), promotedActionsMarkup = promotedActions && numberOfPromotedActionsToRender > 0 ? [...promotedActions].slice(0, numberOfPromotedActionsToRender).map((action, index) => instanceOfMenuGroupDescriptor(action) ? /* @__PURE__ */ React2.createElement(BulkActionMenu.BulkActionMenu, Object.assign({
          key: index
        }, action, {
          isNewBadgeInBadgeActions: this.isNewBadgeInBadgeActions()
        })) : /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, Object.assign({
          key: index,
          disabled
        }, action, {
          handleMeasurement: this.handleMeasurement
        }))) : null, rolledInPromotedActions = this.rolledInPromotedActions(), activatorLabel = !promotedActions || promotedActions && numberOfPromotedActionsToRender === 0 && !measuring ? i18n.translate("Polaris.ResourceList.BulkActions.actionsActivatorLabel") : i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"), combinedActions = [];
        actionSections && rolledInPromotedActions.length > 0 ? combinedActions = [...rolledInPromotedActions, ...actionSections] : actionSections ? combinedActions = actionSections : rolledInPromotedActions.length > 0 && (combinedActions = [...rolledInPromotedActions]);
        let actionsPopover = actionSections || rolledInPromotedActions.length > 0 || measuring ? /* @__PURE__ */ React2.createElement("div", {
          className: BulkActions_module.default.Popover,
          ref: this.setMoreActionsNode
        }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
          active: popoverVisible,
          activator: /* @__PURE__ */ React2.createElement(BulkActionButton.BulkActionButton, {
            disclosure: !0,
            showContentInButton: !promotedActionsMarkup,
            onAction: this.togglePopover,
            content: activatorLabel,
            disabled,
            indicator: this.isNewBadgeInBadgeActions()
          }),
          preferredAlignment: "right",
          onClose: this.togglePopover
        }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
          sections: combinedActions,
          onActionAnyItem: this.togglePopover
        }))) : null, groupContent = promotedActionsMarkup || actionsPopover ? /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
          gap: "300"
        }, promotedActionsMarkup, actionsPopover) : null;
        if (!groupContent)
          return null;
        let group = /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
          timeout: 100,
          in: selectMode,
          key: "group",
          nodeRef: this.groupNode
        }, (status) => {
          let groupClassName = css.classNames(BulkActions_module.default.Group, !isSticky && BulkActions_module.default["Group-not-sticky"], !measuring && isSticky && BulkActions_module.default[`Group-${status}`], measuring && BulkActions_module.default["Group-measuring"]);
          return /* @__PURE__ */ React2.createElement("div", {
            className: groupClassName,
            ref: this.groupNode,
            style: {
              width
            }
          }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
            event: "resize",
            handler: this.handleResize
          }), /* @__PURE__ */ React2.createElement("div", {
            className: BulkActions_module.default.ButtonGroupWrapper,
            ref: this.setButtonsNode
          }, /* @__PURE__ */ React2.createElement("div", {
            className: BulkActions_module.default.ButtonGroupInner
          }, groupContent)));
        });
        return /* @__PURE__ */ React2.createElement("div", {
          ref: this.setContainerNode
        }, group);
      }
      isNewBadgeInBadgeActions() {
        let actions = this.actionSections();
        if (!actions)
          return !1;
        for (let action of actions)
          for (let item of action.items)
            if (item.badge?.tone === "new")
              return !0;
        return !1;
      }
    };
    function instanceOfBulkActionListSectionArray(actions) {
      let validList = actions.filter((action) => action.items);
      return actions.length === validList.length;
    }
    function instanceOfBulkActionArray(actions) {
      let validList = actions.filter((action) => !action.items);
      return actions.length === validList.length;
    }
    function instanceOfMenuGroupDescriptor(action) {
      return "title" in action;
    }
    function BulkActions(props) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(BulkActionsInner, Object.assign({}, props, {
        i18n
      }));
    }
    exports.BulkActions = BulkActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.scss.js
var require_CalloutCard_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      CalloutCard: "Polaris-CalloutCard",
      Image: "Polaris-CalloutCard__Image",
      DismissImage: "Polaris-CalloutCard__DismissImage",
      Content: "Polaris-CalloutCard__Content",
      Title: "Polaris-CalloutCard__Title",
      Buttons: "Polaris-CalloutCard__Buttons",
      Container: "Polaris-CalloutCard__Container",
      Dismiss: "Polaris-CalloutCard__Dismiss",
      hasDismiss: "Polaris-CalloutCard--hasDismiss"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.scss.js
var require_LegacyCard_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyCard: "Polaris-LegacyCard",
      Section: "Polaris-LegacyCard__Section",
      subdued: "Polaris-LegacyCard--subdued",
      "Section-hideOnPrint": "Polaris-LegacyCard__Section--hideOnPrint",
      hideOnPrint: "Polaris-LegacyCard--hideOnPrint",
      Header: "Polaris-LegacyCard__Header",
      "Section-fullWidth": "Polaris-LegacyCard__Section--fullWidth",
      "Section-flush": "Polaris-LegacyCard__Section--flush",
      "Section-subdued": "Polaris-LegacyCard__Section--subdued",
      SectionHeader: "Polaris-LegacyCard__SectionHeader",
      Subsection: "Polaris-LegacyCard__Subsection",
      Footer: "Polaris-LegacyCard__Footer",
      LeftJustified: "Polaris-LegacyCard__LeftJustified",
      FirstSectionPadding: "Polaris-LegacyCard__FirstSectionPadding",
      LastSectionPadding: "Polaris-LegacyCard__LastSectionPadding"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Header/Header.js
var require_Header2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require("react"), LegacyCard_module = require_LegacyCard_scss(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), InlineStack = require_InlineStack(), Text2 = require_Text();
    function Header({
      children,
      title,
      actions
    }) {
      let actionMarkup = actions ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(actions, {
        variant: "plain"
      })) : null, titleMarkup = /* @__PURE__ */ React2.isValidElement(title) ? title : /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: "headingSm",
        as: "h2"
      }, title), headingMarkup = actionMarkup || children ? /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        wrap: !1,
        gap: "200",
        align: "space-between",
        blockAlign: "center"
      }, titleMarkup, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        wrap: !1,
        gap: "400",
        blockAlign: "center"
      }, actionMarkup, children)) : titleMarkup;
      return /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.Header
      }, headingMarkup);
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.scss.js
var require_LegacyStack_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyStack: "Polaris-LegacyStack",
      Item: "Polaris-LegacyStack__Item",
      noWrap: "Polaris-LegacyStack--noWrap",
      spacingNone: "Polaris-LegacyStack--spacingNone",
      spacingExtraTight: "Polaris-LegacyStack--spacingExtraTight",
      spacingTight: "Polaris-LegacyStack--spacingTight",
      spacingBaseTight: "Polaris-LegacyStack--spacingBaseTight",
      spacingLoose: "Polaris-LegacyStack--spacingLoose",
      spacingExtraLoose: "Polaris-LegacyStack--spacingExtraLoose",
      distributionLeading: "Polaris-LegacyStack--distributionLeading",
      distributionTrailing: "Polaris-LegacyStack--distributionTrailing",
      distributionCenter: "Polaris-LegacyStack--distributionCenter",
      distributionEqualSpacing: "Polaris-LegacyStack--distributionEqualSpacing",
      distributionFill: "Polaris-LegacyStack--distributionFill",
      distributionFillEvenly: "Polaris-LegacyStack--distributionFillEvenly",
      alignmentLeading: "Polaris-LegacyStack--alignmentLeading",
      alignmentTrailing: "Polaris-LegacyStack--alignmentTrailing",
      alignmentCenter: "Polaris-LegacyStack--alignmentCenter",
      alignmentFill: "Polaris-LegacyStack--alignmentFill",
      alignmentBaseline: "Polaris-LegacyStack--alignmentBaseline",
      vertical: "Polaris-LegacyStack--vertical",
      "Item-fill": "Polaris-LegacyStack__Item--fill"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/components/Item/Item.js
var require_Item4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), LegacyStack_module = require_LegacyStack_scss();
    function Item({
      children,
      fill
    }) {
      let className = css.classNames(LegacyStack_module.default.Item, fill && LegacyStack_module.default["Item-fill"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.js
var require_LegacyStack = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyStack/LegacyStack.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), components = require_components(), LegacyStack_module = require_LegacyStack_scss(), Item = require_Item4(), LegacyStack = /* @__PURE__ */ React2.memo(function({
      children,
      vertical,
      spacing,
      distribution,
      alignment,
      wrap
    }) {
      let className = css.classNames(LegacyStack_module.default.LegacyStack, vertical && LegacyStack_module.default.vertical, spacing && LegacyStack_module.default[css.variationName("spacing", spacing)], distribution && LegacyStack_module.default[css.variationName("distribution", distribution)], alignment && LegacyStack_module.default[css.variationName("alignment", alignment)], wrap === !1 && LegacyStack_module.default.noWrap), itemMarkup = components.elementChildren(children).map((child, index) => {
        let props = {
          key: index
        };
        return components.wrapWithComponent(child, Item.Item, props);
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, itemMarkup);
    });
    LegacyStack.Item = Item.Item;
    exports.LegacyStack = LegacyStack;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Section/Section.js
var require_Section4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), LegacyCard_module = require_LegacyCard_scss(), LegacyStack = require_LegacyStack(), ButtonGroup = require_ButtonGroup(), utils = require_utils(), Text2 = require_Text();
    function Section({
      children,
      title,
      subdued,
      flush,
      fullWidth,
      actions,
      hideOnPrint
    }) {
      let className = css.classNames(LegacyCard_module.default.Section, flush && LegacyCard_module.default["Section-flush"], subdued && LegacyCard_module.default["Section-subdued"], fullWidth && LegacyCard_module.default["Section-fullWidth"], hideOnPrint && LegacyCard_module.default["Section-hideOnPrint"]), actionMarkup = actions ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(actions, {
        variant: "plain"
      })) : null, titleMarkup = typeof title == "string" ? /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: "headingSm",
        as: "h3",
        fontWeight: "medium"
      }, title) : title, titleAreaMarkup = titleMarkup || actionMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.SectionHeader
      }, actionMarkup ? /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "baseline"
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack.Item, {
        fill: !0
      }, titleMarkup), actionMarkup) : titleMarkup) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, titleAreaMarkup, children);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Subsection/Subsection.js
var require_Subsection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/components/Subsection/Subsection.js"(exports) {
    "use strict";
    var React2 = require("react"), LegacyCard_module = require_LegacyCard_scss();
    function Subsection({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: LegacyCard_module.default.Subsection
      }, children);
    }
    exports.Subsection = Subsection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.js
var require_LegacyCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyCard/LegacyCard.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), useToggle = require_use_toggle(), withinContentContext = require_within_content_context(), LegacyCard_module = require_LegacyCard_scss(), Header = require_Header2(), Section = require_Section4(), Subsection = require_Subsection(), hooks = require_hooks2(), utils = require_utils(), Popover = require_Popover(), Button2 = require_Button(), ActionList = require_ActionList(), ButtonGroup = require_ButtonGroup(), LegacyCard = function({
      children,
      hideOnPrint,
      title,
      subdued,
      sectioned,
      actions,
      primaryFooterAction,
      secondaryFooterActions,
      secondaryFooterActionsDisclosureText,
      footerActionAlignment = "right"
    }) {
      let i18n = hooks.useI18n(), {
        value: secondaryActionsPopoverOpen,
        toggle: toggleSecondaryActionsPopoverOpen
      } = useToggle.useToggle(!1), legacyCard = useLegacyCardPaddingObserverRef(), className = css.classNames(LegacyCard_module.default.LegacyCard, subdued && LegacyCard_module.default.subdued, hideOnPrint && LegacyCard_module.default.hideOnPrint), headerMarkup = title || actions ? /* @__PURE__ */ React2.createElement(Header.Header, {
        actions,
        title
      }) : null, content = sectioned ? /* @__PURE__ */ React2.createElement(Section.Section, null, children) : children, primaryFooterActionMarkup = primaryFooterAction ? utils.buttonFrom(primaryFooterAction, {
        variant: "primary"
      }) : null, secondaryFooterActionsMarkup = null;
      secondaryFooterActions && secondaryFooterActions.length && (secondaryFooterActions.length === 1 ? secondaryFooterActionsMarkup = utils.buttonFrom(secondaryFooterActions[0]) : secondaryFooterActionsMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: secondaryActionsPopoverOpen,
        activator: /* @__PURE__ */ React2.createElement(Button2.Button, {
          disclosure: !0,
          onClick: toggleSecondaryActionsPopoverOpen
        }, secondaryFooterActionsDisclosureText || i18n.translate("Polaris.Common.more")),
        onClose: toggleSecondaryActionsPopoverOpen
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: secondaryFooterActions
      }))));
      let footerMarkup = primaryFooterActionMarkup || secondaryFooterActionsMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(LegacyCard_module.default.Footer, footerActionAlignment === "left" && LegacyCard_module.default.LeftJustified)
      }, footerActionAlignment === "right" ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, secondaryFooterActionsMarkup, primaryFooterActionMarkup) : /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryFooterActionMarkup, secondaryFooterActionsMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        ref: legacyCard
      }, headerMarkup, content, footerMarkup));
    };
    LegacyCard.Header = Header.Header;
    LegacyCard.Section = Section.Section;
    LegacyCard.Subsection = Subsection.Subsection;
    function useLegacyCardPaddingObserverRef() {
      let legacyCard = React2.useRef(null);
      return React2.useEffect(() => {
        let legacyCardNode = legacyCard.current, firstSection, lastSection;
        if (legacyCardNode) {
          let updateFirstAndLastSectionPadding = () => {
            updatePadding(firstSection, "top", !1), updatePadding(lastSection, "bottom", !1);
            let currentElements = legacyCardNode.querySelectorAll(`.${LegacyCard_module.default.Section}, .${LegacyCard_module.default.Header}, .${LegacyCard_module.default.Footer}`);
            if (!currentElements?.length)
              return;
            let firstElement = currentElements[0], lastElement = getMostSeniorLastElement(currentElements);
            legacyCardNode.firstChild?.contains(firstElement) && (firstSection = firstElement, updatePadding(firstSection, "top", !0)), legacyCardNode.lastChild?.contains(lastElement) && (lastSection = lastElement, updatePadding(lastSection, "bottom", !0));
          };
          updateFirstAndLastSectionPadding();
          let observer = new MutationObserver(updateFirstAndLastSectionPadding);
          return observer.observe(legacyCardNode, {
            childList: !0,
            subtree: !0
          }), () => {
            updatePadding(firstSection, "top", !1), updatePadding(lastSection, "bottom", !1), observer.disconnect();
          };
        }
      }, []), legacyCard;
    }
    function updatePadding(element, area, add) {
      if (!(!element || element.className.includes(LegacyCard_module.default["Section-flush"])))
        switch (area) {
          case "top":
            element.classList.toggle(LegacyCard_module.default.FirstSectionPadding, add);
            return;
          case "bottom":
            element.classList.toggle(LegacyCard_module.default.LastSectionPadding, add);
        }
    }
    function getMostSeniorLastElement(elements) {
      let lastElement = elements[0];
      return elements.forEach((element) => {
        lastElement.contains(element) || (lastElement = element);
      }), lastElement;
    }
    exports.LegacyCard = LegacyCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.scss.js
var require_TextContainer_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TextContainer: "Polaris-TextContainer",
      spacingTight: "Polaris-TextContainer--spacingTight",
      spacingLoose: "Polaris-TextContainer--spacingLoose"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.js
var require_TextContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TextContainer/TextContainer.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), TextContainer_module = require_TextContainer_scss();
    function TextContainer({
      spacing,
      children
    }) {
      let className = css.classNames(TextContainer_module.default.TextContainer, spacing && TextContainer_module.default[css.variationName("spacing", spacing)]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.TextContainer = TextContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.js
var require_CalloutCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CalloutCard/CalloutCard.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), CalloutCard_module = require_CalloutCard_scss(), LegacyCard = require_LegacyCard(), TextContainer = require_TextContainer(), utils = require_utils(), Button2 = require_Button(), Text2 = require_Text(), Image = require_Image(), ButtonGroup = require_ButtonGroup();
    function CalloutCard({
      title,
      children,
      illustration,
      primaryAction,
      secondaryAction,
      onDismiss
    }) {
      let primaryActionMarkup = utils.buttonFrom(primaryAction), secondaryActionMarkup = secondaryAction ? utils.buttonFrom(secondaryAction, {
        variant: "tertiary"
      }) : null, buttonMarkup = secondaryActionMarkup ? /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup) : primaryActionMarkup, dismissButton = onDismiss ? /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Dismiss
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "plain",
        icon: polarisIcons.XSmallIcon,
        onClick: onDismiss,
        accessibilityLabel: "Dismiss card"
      })) : null, imageClassName = css.classNames(CalloutCard_module.default.Image, onDismiss && CalloutCard_module.default.DismissImage), containerClassName = css.classNames(CalloutCard_module.default.Container, onDismiss && CalloutCard_module.default.hasDismiss);
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, null, /* @__PURE__ */ React2.createElement("div", {
        className: containerClassName
      }, dismissButton, /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard.Section, null, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.CalloutCard
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Content
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Title
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: "headingMd",
        as: "h2"
      }, title)), /* @__PURE__ */ React2.createElement(TextContainer.TextContainer, null, children), /* @__PURE__ */ React2.createElement("div", {
        className: CalloutCard_module.default.Buttons
      }, buttonMarkup)), /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: "",
        className: imageClassName,
        source: illustration
      })))));
    }
    exports.CalloutCard = CalloutCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.scss.js
var require_ChoiceList_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ChoiceChildren: "Polaris-ChoiceList__ChoiceChildren"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.scss.js
var require_RadioButton_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      RadioButton: "Polaris-RadioButton",
      Input: "Polaris-RadioButton__Input",
      Backdrop: "Polaris-RadioButton__Backdrop",
      ChoiceLabel: "Polaris-RadioButton__ChoiceLabel",
      toneMagic: "Polaris-RadioButton--toneMagic"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.js
var require_RadioButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RadioButton/RadioButton.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), RadioButton_module = require_RadioButton_scss(), Choice = require_Choice();
    function RadioButton({
      ariaDescribedBy: ariaDescribedByProp,
      label,
      labelHidden,
      helpText,
      checked,
      disabled,
      onChange,
      onFocus,
      onBlur,
      id: idProp,
      name: nameProp,
      value,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }) {
      let uniqId = React2.useId(), id = idProp ?? uniqId, name = nameProp || id, inputNode = React2.useRef(null), handleBlur = () => {
        onBlur && onBlur();
      };
      function handleChange({
        currentTarget
      }) {
        onChange && onChange(currentTarget.checked, id);
      }
      let describedBy = [];
      helpText && describedBy.push(Choice.helpTextID(id)), ariaDescribedByProp && describedBy.push(ariaDescribedByProp);
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, inputClassName = css.classNames(RadioButton_module.default.Input, tone && RadioButton_module.default[css.variationName("tone", tone)]), extraChoiceProps = {
        helpText,
        bleed,
        bleedBlockStart,
        bleedBlockEnd,
        bleedInlineStart,
        bleedInlineEnd
      };
      return /* @__PURE__ */ React2.createElement(Choice.Choice, Object.assign({
        label,
        labelHidden,
        disabled,
        id,
        labelClassName: RadioButton_module.default.ChoiceLabel,
        fill
      }, extraChoiceProps, checked ? {
        tone
      } : {}), /* @__PURE__ */ React2.createElement("span", {
        className: RadioButton_module.default.RadioButton
      }, /* @__PURE__ */ React2.createElement("input", {
        id,
        name,
        value,
        type: "radio",
        checked,
        disabled,
        className: inputClassName,
        onChange: handleChange,
        onFocus,
        onBlur: handleBlur,
        "aria-describedby": ariaDescribedBy,
        ref: inputNode
      }), /* @__PURE__ */ React2.createElement("span", {
        className: RadioButton_module.default.Backdrop
      })));
    }
    exports.RadioButton = RadioButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.js
var require_ChoiceList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ChoiceList/ChoiceList.js"(exports) {
    "use strict";
    var React2 = require("react"), ChoiceList_module = require_ChoiceList_scss(), Bleed = require_Bleed(), RadioButton = require_RadioButton(), Box = require_Box(), InlineError = require_InlineError(), BlockStack2 = require_BlockStack(), Checkbox = require_Checkbox();
    function ChoiceList({
      title,
      titleHidden,
      allowMultiple,
      choices,
      selected,
      onChange = noop,
      error,
      disabled = !1,
      name: nameProp,
      tone
    }) {
      let ControlComponent = allowMultiple ? Checkbox.Checkbox : RadioButton.RadioButton, uniqName = React2.useId(), name = nameProp ?? uniqName, finalName = allowMultiple ? `${name}[]` : name, titleMarkup = title ? /* @__PURE__ */ React2.createElement(Box.Box, {
        as: "legend",
        paddingBlockEnd: {
          xs: "500",
          md: "100"
        },
        visuallyHidden: titleHidden
      }, title) : null, choicesMarkup = choices.map((choice) => {
        let {
          value,
          id,
          label,
          helpText,
          disabled: choiceDisabled,
          describedByError
        } = choice;
        function handleChange(checked) {
          onChange(updateSelectedChoices(choice, checked, selected, allowMultiple), name);
        }
        let isSelected = choiceIsSelected(choice, selected), renderedChildren = choice.renderChildren ? choice.renderChildren(isSelected) : null, children = renderedChildren ? /* @__PURE__ */ React2.createElement("div", {
          className: ChoiceList_module.default.ChoiceChildren
        }, /* @__PURE__ */ React2.createElement(Box.Box, {
          paddingBlockStart: {
            xs: "400",
            md: "0"
          }
        }, renderedChildren)) : null;
        return /* @__PURE__ */ React2.createElement("li", {
          key: value
        }, /* @__PURE__ */ React2.createElement(Bleed.Bleed, {
          marginBlockEnd: helpText ? {
            xs: "100",
            md: "0"
          } : {
            xs: "0"
          }
        }, /* @__PURE__ */ React2.createElement(ControlComponent, {
          name: finalName,
          value,
          id,
          label,
          disabled: choiceDisabled || disabled,
          fill: {
            xs: !0,
            sm: !1
          },
          checked: choiceIsSelected(choice, selected),
          helpText,
          onChange: handleChange,
          ariaDescribedBy: error && describedByError ? InlineError.errorTextID(finalName) : null,
          tone
        }), children));
      }), errorMarkup = error && /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockStart: {
          xs: "0",
          md: "100"
        },
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(InlineError.InlineError, {
        message: error,
        fieldID: finalName
      }));
      return /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        as: "fieldset",
        gap: {
          xs: "400",
          md: "0"
        },
        "aria-invalid": error != null,
        id: finalName
      }, titleMarkup, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        as: "ul",
        gap: {
          xs: "400",
          md: "0"
        }
      }, choicesMarkup), errorMarkup);
    }
    function noop() {
    }
    function choiceIsSelected({
      value
    }, selected) {
      return selected.includes(value);
    }
    function updateSelectedChoices({
      value
    }, checked, selected, allowMultiple = !1) {
      return checked ? allowMultiple ? [...selected, value] : [value] : selected.filter((selectedChoice) => selectedChoice !== value);
    }
    exports.ChoiceList = ChoiceList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.scss.js
var require_Collapsible_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Collapsible: "Polaris-Collapsible",
      isFullyClosed: "Polaris-Collapsible--isFullyClosed",
      expandOnPrint: "Polaris-Collapsible--expandOnPrint"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.js
var require_Collapsible = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Collapsible/Collapsible.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Collapsible_module = require_Collapsible_scss();
    function Collapsible({
      id,
      expandOnPrint,
      open,
      transition = !0,
      children,
      onAnimationEnd
    }) {
      let [height, setHeight] = React2.useState(0), [isOpen, setIsOpen] = React2.useState(open), [animationState, setAnimationState] = React2.useState("idle"), collapsibleContainer = React2.useRef(null), isFullyOpen = animationState === "idle" && open && isOpen, isFullyClosed = animationState === "idle" && !open && !isOpen, content = expandOnPrint || !isFullyClosed ? children : null, wrapperClassName = css.classNames(Collapsible_module.default.Collapsible, isFullyClosed && Collapsible_module.default.isFullyClosed, expandOnPrint && Collapsible_module.default.expandOnPrint), transitionDisabled = isTransitionDisabled(transition), collapsibleStyles = {
        ...typeof transition == "object" && {
          transitionDuration: transition.duration,
          transitionTimingFunction: transition.timingFunction
        },
        maxHeight: isFullyOpen ? "none" : `${height}px`,
        overflow: isFullyOpen ? "visible" : "hidden"
      }, handleCompleteAnimation = React2.useCallback(({
        target
      }) => {
        target === collapsibleContainer.current && (setAnimationState("idle"), setIsOpen(open), onAnimationEnd && onAnimationEnd());
      }, [onAnimationEnd, open]), startAnimation = React2.useCallback(() => {
        transitionDisabled ? (setIsOpen(open), setAnimationState("idle"), open && collapsibleContainer.current ? setHeight(collapsibleContainer.current.scrollHeight) : setHeight(0)) : setAnimationState("measuring");
      }, [open, transitionDisabled]);
      return React2.useEffect(() => {
        open !== isOpen && startAnimation();
      }, [open, isOpen]), React2.useEffect(() => {
        !open || !collapsibleContainer.current || setHeight(collapsibleContainer.current.scrollHeight);
      }, []), React2.useEffect(() => {
        if (collapsibleContainer.current)
          switch (animationState) {
            case "idle":
              break;
            case "measuring":
              setHeight(collapsibleContainer.current.scrollHeight), setAnimationState("animating");
              break;
            case "animating":
              setHeight(open ? collapsibleContainer.current.scrollHeight : 0);
          }
      }, [animationState, open, isOpen]), /* @__PURE__ */ React2.createElement("div", {
        id,
        style: collapsibleStyles,
        ref: collapsibleContainer,
        className: wrapperClassName,
        onTransitionEnd: handleCompleteAnimation,
        "aria-hidden": !open
      }, content);
    }
    var zeroDurationRegex = /^0(ms|s)$/;
    function isTransitionDisabled(transitionProp) {
      if (typeof transitionProp == "boolean")
        return !transitionProp;
      let {
        duration
      } = transitionProp;
      return !!(duration && zeroDurationRegex.test(duration.trim()));
    }
    exports.Collapsible = Collapsible;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.scss.js
var require_ColorPicker_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ColorPicker: "Polaris-ColorPicker",
      MainColor: "Polaris-ColorPicker__MainColor",
      fullWidth: "Polaris-ColorPicker--fullWidth",
      Dragger: "Polaris-ColorPicker__Dragger",
      ColorLayer: "Polaris-ColorPicker__ColorLayer",
      HuePicker: "Polaris-ColorPicker__HuePicker",
      AlphaPicker: "Polaris-ColorPicker__AlphaPicker",
      Slidable: "Polaris-ColorPicker__Slidable"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/utilities.js
var require_utilities3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/utilities.js"(exports) {
    "use strict";
    var clamp = require_clamp(), VERTICAL_PADDING = 13;
    function calculateDraggerY(alpha, sliderHeight, draggerHeight) {
      let offset = offsetForAlpha(alpha, sliderHeight, draggerHeight);
      return clamp.clamp(offset, 0, sliderHeight);
    }
    function alphaForDraggerY(y, sliderHeight) {
      let offsetY = clamp.clamp(y, 0, sliderHeight);
      return alphaForOffset(offsetY, sliderHeight);
    }
    function alphaForOffset(offset, sliderHeight) {
      let selectionHeight = offset - VERTICAL_PADDING, slidableArea = sliderHeight - VERTICAL_PADDING * 2;
      return clamp.clamp(1 - selectionHeight / slidableArea, 0, 1);
    }
    function offsetForAlpha(alpha, sliderHeight, draggerHeight) {
      let slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
      return clamp.clamp((1 - alpha) * slidableArea + VERTICAL_PADDING, 0, sliderHeight - draggerHeight);
    }
    exports.alphaForDraggerY = alphaForDraggerY;
    exports.alphaForOffset = alphaForOffset;
    exports.calculateDraggerY = calculateDraggerY;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/Slidable/Slidable.js
var require_Slidable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/Slidable/Slidable.js"(exports) {
    "use strict";
    var React2 = require("react"), target = require_target(), ColorPicker_module = require_ColorPicker_scss(), EventListener = require_EventListener(), isDragging = !1;
    target.isServer || window.addEventListener("touchmove", (event) => {
      isDragging && event.preventDefault();
    }, {
      passive: !1
    });
    var Slidable = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          dragging: !1
        }, this.node = null, this.draggerNode = null, this.setDraggerNode = (node) => {
          this.draggerNode = node;
        }, this.setNode = (node) => {
          this.node = node;
        }, this.startDrag = (event) => {
          isMouseDownEvent(event) && this.handleDraggerMove(event.clientX, event.clientY), isDragging = !0, this.setState({
            dragging: !0
          });
        }, this.handleDragEnd = () => {
          isDragging = !1, this.setState({
            dragging: !1
          });
        }, this.handleMove = (event) => {
          if (event.stopImmediatePropagation(), event.stopPropagation(), event.cancelable && event.preventDefault(), isMouseMoveEvent(event)) {
            this.handleDraggerMove(event.clientX, event.clientY);
            return;
          }
          this.handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);
        }, this.handleDraggerMove = (x, y) => {
          if (this.node == null)
            return;
          let {
            onChange
          } = this.props, rect = this.node.getBoundingClientRect(), offsetX = x - rect.left, offsetY = y - rect.top;
          onChange({
            x: offsetX,
            y: offsetY
          });
        };
      }
      componentDidMount() {
        let {
          onDraggerHeight
        } = this.props;
        if (onDraggerHeight == null)
          return;
        let {
          draggerNode
        } = this;
        draggerNode != null && onDraggerHeight(draggerNode.clientWidth);
      }
      render() {
        let {
          dragging
        } = this.state, {
          draggerX = 0,
          draggerY = 0
        } = this.props, draggerPositioning = {
          transform: `translate3d(${draggerX}px, ${draggerY}px, 0)`
        }, moveListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "mousemove",
          handler: this.handleMove,
          passive: !1
        }) : null, touchMoveListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchmove",
          handler: this.handleMove,
          passive: !1
        }) : null, endDragListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "mouseup",
          handler: this.handleDragEnd
        }) : null, touchEndListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchend",
          handler: this.handleDragEnd
        }) : null, touchCancelListener = dragging ? /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "touchcancel",
          handler: this.handleDragEnd
        }) : null;
        return /* @__PURE__ */ React2.createElement("div", {
          ref: this.setNode,
          className: ColorPicker_module.default.Slidable,
          onMouseDown: this.startDrag,
          onTouchStart: this.startDrag
        }, endDragListener, moveListener, touchMoveListener, touchEndListener, touchCancelListener, /* @__PURE__ */ React2.createElement("div", {
          style: draggerPositioning,
          className: ColorPicker_module.default.Dragger,
          ref: this.setDraggerNode
        }));
      }
    };
    function isMouseMoveEvent(event) {
      return event.type === "mousemove";
    }
    function isMouseDownEvent(event) {
      return event.type === "mousedown";
    }
    exports.Slidable = Slidable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/AlphaPicker.js
var require_AlphaPicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/AlphaPicker/AlphaPicker.js"(exports) {
    "use strict";
    var React2 = require("react"), colorTransformers = require_color_transformers(), ColorPicker_module = require_ColorPicker_scss(), utilities = require_utilities3(), Slidable = require_Slidable(), AlphaPicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          sliderHeight: 0,
          draggerHeight: 0
        }, this.setSliderHeight = (node) => {
          node != null && this.setState({
            sliderHeight: node.clientHeight
          });
        }, this.setDraggerHeight = (height) => {
          this.setState({
            draggerHeight: height
          });
        }, this.handleChange = ({
          y
        }) => {
          let {
            onChange
          } = this.props, {
            sliderHeight
          } = this.state, alpha = utilities.alphaForDraggerY(y, sliderHeight);
          onChange(alpha);
        };
      }
      render() {
        let {
          color,
          alpha
        } = this.props, {
          sliderHeight,
          draggerHeight
        } = this.state, draggerY = utilities.calculateDraggerY(alpha, sliderHeight, draggerHeight), background = alphaGradientForColor(color);
        return /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.AlphaPicker,
          ref: this.setSliderHeight
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.ColorLayer,
          style: {
            background
          }
        }), /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          draggerY,
          draggerX: 0,
          onChange: this.handleChange,
          onDraggerHeight: this.setDraggerHeight
        }));
      }
    };
    function alphaGradientForColor(color) {
      let {
        red,
        green,
        blue
      } = colorTransformers.hsbToRgb(color), rgb = `${red}, ${green}, ${blue}`;
      return `linear-gradient(to top, rgba(${rgb}, 0) 18px, rgba(${rgb}, 1) calc(100% - 18px))`;
    }
    exports.AlphaPicker = AlphaPicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/utilities.js
var require_utilities4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/utilities.js"(exports) {
    "use strict";
    var clamp = require_clamp(), VERTICAL_PADDING = 13;
    function calculateDraggerY(hue, sliderHeight, draggerHeight) {
      let offset = offsetForHue(hue, sliderHeight, draggerHeight);
      return clamp.clamp(offset, 0, sliderHeight);
    }
    function hueForDraggerY(y, sliderHeight) {
      let offsetY = clamp.clamp(y, 0, sliderHeight);
      return hueForOffset(offsetY, sliderHeight);
    }
    function hueForOffset(offset, sliderHeight) {
      let selectionHeight = offset - VERTICAL_PADDING, slidableArea = sliderHeight - VERTICAL_PADDING * 2;
      return clamp.clamp(selectionHeight / slidableArea * 360, 0, 360);
    }
    function offsetForHue(hue, sliderHeight, draggerHeight) {
      let slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
      return clamp.clamp(hue / 360 * slidableArea + VERTICAL_PADDING, 0, sliderHeight - draggerHeight);
    }
    exports.calculateDraggerY = calculateDraggerY;
    exports.hueForDraggerY = hueForDraggerY;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/HuePicker.js
var require_HuePicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/components/HuePicker/HuePicker.js"(exports) {
    "use strict";
    var React2 = require("react"), ColorPicker_module = require_ColorPicker_scss(), utilities = require_utilities4(), Slidable = require_Slidable(), HuePicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          sliderHeight: 0,
          draggerHeight: 0
        }, this.setSliderHeight = (node) => {
          node != null && this.setState({
            sliderHeight: node.clientHeight
          });
        }, this.setDraggerHeight = (height) => {
          this.setState({
            draggerHeight: height
          });
        }, this.handleChange = ({
          y
        }) => {
          let {
            onChange
          } = this.props, {
            sliderHeight
          } = this.state, hue = utilities.hueForDraggerY(y, sliderHeight);
          onChange(hue);
        };
      }
      render() {
        let {
          hue
        } = this.props, {
          sliderHeight,
          draggerHeight
        } = this.state, draggerY = utilities.calculateDraggerY(hue, sliderHeight, draggerHeight);
        return /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.HuePicker,
          ref: this.setSliderHeight
        }, /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          draggerY,
          draggerX: 0,
          onChange: this.handleChange,
          onDraggerHeight: this.setDraggerHeight
        }));
      }
    };
    exports.HuePicker = HuePicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.js
var require_ColorPicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ColorPicker/ColorPicker.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), clamp = require_clamp(), css = require_css(), colorTransformers = require_color_transformers(), ColorPicker_module = require_ColorPicker_scss(), AlphaPicker = require_AlphaPicker(), HuePicker = require_HuePicker(), Slidable = require_Slidable(), EventListener = require_EventListener(), RESIZE_DEBOUNCE_TIME_MS = 200, ColorPicker = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          pickerSize: {
            width: 0,
            height: 0
          }
        }, this.colorNode = null, this.handleResize = debounce.debounce(() => {
          let {
            colorNode
          } = this;
          colorNode != null && this.setState({
            pickerSize: {
              width: colorNode.clientWidth,
              height: colorNode.clientHeight
            }
          });
        }, RESIZE_DEBOUNCE_TIME_MS, {
          leading: !0,
          trailing: !0,
          maxWait: RESIZE_DEBOUNCE_TIME_MS
        }), this.setColorNode = (node) => {
          this.colorNode = node;
        }, this.handleHueChange = (hue) => {
          let {
            color: {
              brightness,
              saturation,
              alpha = 1
            },
            onChange
          } = this.props;
          onChange({
            hue,
            brightness,
            saturation,
            alpha
          });
        }, this.handleAlphaChange = (alpha) => {
          let {
            color: {
              hue,
              brightness,
              saturation
            },
            onChange
          } = this.props;
          onChange({
            hue,
            brightness,
            saturation,
            alpha
          });
        }, this.handleDraggerMove = ({
          x,
          y
        }) => {
          let {
            pickerSize
          } = this.state, {
            color: {
              hue,
              alpha = 1
            },
            onChange
          } = this.props, saturation = clamp.clamp(x / pickerSize.width, 0, 1), brightness = clamp.clamp(1 - y / pickerSize.height, 0, 1);
          onChange({
            hue,
            saturation,
            brightness,
            alpha
          });
        }, this.handlePickerDrag = (event) => {
          event.preventDefault();
        };
      }
      componentDidMount() {
        let {
          colorNode
        } = this;
        colorNode != null && this.setState({
          pickerSize: {
            width: colorNode.clientWidth,
            height: colorNode.clientHeight
          }
        });
      }
      render() {
        let {
          id,
          color,
          allowAlpha,
          fullWidth
        } = this.props, {
          hue,
          saturation,
          brightness,
          alpha: providedAlpha
        } = color, {
          pickerSize
        } = this.state, alpha = providedAlpha != null && allowAlpha ? providedAlpha : 1, {
          red,
          green,
          blue
        } = colorTransformers.hsbToRgb({
          hue,
          saturation: 1,
          brightness: 1
        }), colorString = `rgba(${red}, ${green}, ${blue}, ${alpha})`, draggerX = clamp.clamp(saturation * pickerSize.width, 0, pickerSize.width), draggerY = clamp.clamp(pickerSize.height - brightness * pickerSize.height, 0, pickerSize.height), alphaSliderMarkup = allowAlpha ? /* @__PURE__ */ React2.createElement(AlphaPicker.AlphaPicker, {
          alpha,
          color,
          onChange: this.handleAlphaChange
        }) : null, className = css.classNames(ColorPicker_module.default.ColorPicker, fullWidth && ColorPicker_module.default.fullWidth);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          id,
          onMouseDown: this.handlePickerDrag
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setColorNode,
          className: ColorPicker_module.default.MainColor
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ColorPicker_module.default.ColorLayer,
          style: {
            backgroundColor: colorString
          }
        }), /* @__PURE__ */ React2.createElement(Slidable.Slidable, {
          onChange: this.handleDraggerMove,
          draggerX,
          draggerY
        })), /* @__PURE__ */ React2.createElement(HuePicker.HuePicker, {
          hue,
          onChange: this.handleHueChange
        }), alphaSliderMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        }));
      }
    };
    exports.ColorPicker = ColorPicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.scss.js
var require_InlineGrid_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      InlineGrid: "Polaris-InlineGrid"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.js
var require_InlineGrid = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineGrid/InlineGrid.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), InlineGrid_module = require_InlineGrid_scss();
    function InlineGrid({
      children,
      columns,
      gap,
      alignItems
    }) {
      let style = {
        ...css.getResponsiveValue("inline-grid", "grid-template-columns", formatInlineGrid(columns)),
        ...css.getResponsiveProps("inline-grid", "gap", "space", gap),
        "--pc-inline-grid-align-items": alignItems
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: InlineGrid_module.default.InlineGrid,
        style: css.sanitizeCustomProperties(style)
      }, children);
    }
    function formatInlineGrid(columns) {
      return typeof columns == "object" && columns !== null && !Array.isArray(columns) ? Object.fromEntries(Object.entries(columns).map(([breakpointAlias, breakpointInlineGrid]) => [breakpointAlias, getColumnValue(breakpointInlineGrid)])) : getColumnValue(columns);
    }
    function getColumnValue(columns) {
      if (columns)
        return typeof columns == "number" || !isNaN(Number(columns)) ? `repeat(${Number(columns)}, minmax(0, 1fr))` : typeof columns == "string" ? columns : columns.map((column) => {
          switch (column) {
            case "oneThird":
              return "minmax(0, 1fr)";
            case "oneHalf":
              return "minmax(0, 1fr)";
            case "twoThirds":
              return "minmax(0, 2fr)";
          }
        }).join(" ");
    }
    exports.InlineGrid = InlineGrid;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/frame/context.js
var require_context15 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/frame/context.js"(exports) {
    "use strict";
    var React2 = require("react"), FrameContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.FrameContext = FrameContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/frame/hooks.js
var require_hooks9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/frame/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context15();
    function useFrame() {
      let frame = React2.useContext(context.FrameContext);
      if (!frame)
        throw new Error("No Frame context was provided. Your component must be wrapped in a <Frame> component. See https://polaris.shopify.com/components/internal-only/frame for implementation instructions.");
      return frame;
    }
    exports.useFrame = useFrame;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ContextualSaveBar/ContextualSaveBar.js
var require_ContextualSaveBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ContextualSaveBar/ContextualSaveBar.js"(exports) {
    "use strict";
    var React2 = require("react"), hooks = require_hooks9(), ContextualSaveBar = /* @__PURE__ */ React2.memo(function({
      message,
      saveAction,
      discardAction,
      alignContentFlush,
      fullWidth,
      contextControl,
      secondaryMenu
    }) {
      let {
        setContextualSaveBar,
        removeContextualSaveBar
      } = hooks.useFrame();
      return React2.useEffect(() => {
        setContextualSaveBar({
          message,
          saveAction,
          discardAction,
          alignContentFlush,
          fullWidth,
          contextControl,
          secondaryMenu
        });
      }, [message, saveAction, discardAction, alignContentFlush, setContextualSaveBar, fullWidth, contextControl, secondaryMenu]), React2.useEffect(() => removeContextualSaveBar, [removeContextualSaveBar]), null;
    });
    exports.ContextualSaveBar = ContextualSaveBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/utilities.js
var require_utilities5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/utilities.js"(exports) {
    "use strict";
    function measureColumn(tableData) {
      return function(column, index) {
        let {
          firstVisibleColumnIndex,
          tableLeftVisibleEdge: tableStart,
          tableRightVisibleEdge: tableEnd
        } = tableData, leftEdge = column.offsetLeft, rightEdge = leftEdge + column.offsetWidth, isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd, "left"), isVisibleRight = isEdgeVisible(rightEdge, tableStart, tableEnd, "right"), isVisible = isVisibleLeft || isVisibleRight, width = column.offsetWidth;
        return isVisible && (tableData.firstVisibleColumnIndex = Math.min(firstVisibleColumnIndex, index)), {
          leftEdge,
          rightEdge,
          isVisible,
          width,
          index
        };
      };
    }
    function isEdgeVisible(position, start, end, edgeType) {
      return position >= start + (edgeType === "left" ? 0 : 30) && position <= end - 30;
    }
    function getPrevAndCurrentColumns(tableData, columnData) {
      let {
        firstVisibleColumnIndex
      } = tableData, previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0), previousColumn = columnData[previousColumnIndex], currentColumn = columnData[firstVisibleColumnIndex];
      return {
        previousColumn,
        currentColumn
      };
    }
    exports.getPrevAndCurrentColumns = getPrevAndCurrentColumns;
    exports.isEdgeVisible = isEdgeVisible;
    exports.measureColumn = measureColumn;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.scss.js
var require_DataTable_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DataTable: "Polaris-DataTable",
      condensed: "Polaris-DataTable--condensed",
      Navigation: "Polaris-DataTable__Navigation",
      Pip: "Polaris-DataTable__Pip",
      "Pip-visible": "Polaris-DataTable__Pip--visible",
      ScrollContainer: "Polaris-DataTable__ScrollContainer",
      Table: "Polaris-DataTable__Table",
      TableRow: "Polaris-DataTable__TableRow",
      Cell: "Polaris-DataTable__Cell",
      IncreasedTableDensity: "Polaris-DataTable__IncreasedTableDensity",
      ZebraStripingOnData: "Polaris-DataTable__ZebraStripingOnData",
      RowCountIsEven: "Polaris-DataTable__RowCountIsEven",
      ShowTotalsInFooter: "Polaris-DataTable__ShowTotalsInFooter",
      "Cell-separate": "Polaris-DataTable__Cell--separate",
      "Cell-firstColumn": "Polaris-DataTable__Cell--firstColumn",
      "Cell-numeric": "Polaris-DataTable__Cell--numeric",
      "Cell-truncated": "Polaris-DataTable__Cell--truncated",
      "Cell-header": "Polaris-DataTable__Cell--header",
      "Cell-sortable": "Polaris-DataTable__Cell--sortable",
      "Heading-left": "Polaris-DataTable__Heading--left",
      "Cell-verticalAlignTop": "Polaris-DataTable__Cell--verticalAlignTop",
      "Cell-verticalAlignBottom": "Polaris-DataTable__Cell--verticalAlignBottom",
      "Cell-verticalAlignMiddle": "Polaris-DataTable__Cell--verticalAlignMiddle",
      "Cell-verticalAlignBaseline": "Polaris-DataTable__Cell--verticalAlignBaseline",
      hoverable: "Polaris-DataTable--hoverable",
      "Cell-hovered": "Polaris-DataTable__Cell--hovered",
      Icon: "Polaris-DataTable__Icon",
      Heading: "Polaris-DataTable__Heading",
      StickyHeaderEnabled: "Polaris-DataTable__StickyHeaderEnabled",
      StickyHeaderWrapper: "Polaris-DataTable__StickyHeaderWrapper",
      "Cell-sorted": "Polaris-DataTable__Cell--sorted",
      "Cell-total": "Polaris-DataTable__Cell--total",
      ShowTotals: "Polaris-DataTable__ShowTotals",
      "Cell-total-footer": "Polaris-DataTable--cellTotalFooter",
      Footer: "Polaris-DataTable__Footer",
      StickyHeaderInner: "Polaris-DataTable__StickyHeaderInner",
      "StickyHeaderInner-isSticky": "Polaris-DataTable__StickyHeaderInner--isSticky",
      StickyHeaderTable: "Polaris-DataTable__StickyHeaderTable",
      FixedFirstColumn: "Polaris-DataTable__FixedFirstColumn",
      StickyTableHeadingsRow: "Polaris-DataTable__StickyTableHeadingsRow",
      TooltipContent: "Polaris-DataTable__TooltipContent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Cell/Cell.js
var require_Cell = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), shared = require_shared(), DataTable_module = require_DataTable_scss(), hooks = require_hooks2(), Tooltip = require_Tooltip(), Icon = require_Icon();
    function Cell({
      content,
      contentType,
      nthColumn,
      firstColumn,
      truncate,
      header,
      total,
      totalInFooter,
      sorted,
      sortable,
      sortDirection,
      inFixedNthColumn,
      verticalAlign = "top",
      defaultSortDirection = "ascending",
      onSort,
      colSpan,
      setRef = () => {
      },
      stickyHeadingCell = !1,
      stickyCellWidth,
      hovered = !1,
      handleFocus = () => {
      },
      hasFixedNthColumn = !1,
      fixedCellVisible = !1,
      firstColumnMinWidth,
      style,
      lastFixedFirstColumn
    }) {
      let i18n = hooks.useI18n(), numeric = contentType === "numeric", className = css.classNames(DataTable_module.default.Cell, DataTable_module.default[`Cell-${css.variationName("verticalAlign", verticalAlign)}`], firstColumn && DataTable_module.default["Cell-firstColumn"], truncate && DataTable_module.default["Cell-truncated"], header && DataTable_module.default["Cell-header"], total && DataTable_module.default["Cell-total"], totalInFooter && DataTable_module.default["Cell-total-footer"], numeric && DataTable_module.default["Cell-numeric"], sortable && DataTable_module.default["Cell-sortable"], sorted && DataTable_module.default["Cell-sorted"], stickyHeadingCell && DataTable_module.default.StickyHeaderCell, hovered && DataTable_module.default["Cell-hovered"], lastFixedFirstColumn && inFixedNthColumn && fixedCellVisible && DataTable_module.default["Cell-separate"], nthColumn && inFixedNthColumn && stickyHeadingCell && DataTable_module.default.FixedFirstColumn), headerClassName = css.classNames(header && DataTable_module.default.Heading, header && contentType === "text" && DataTable_module.default["Heading-left"]), iconClassName = css.classNames(sortable && DataTable_module.default.Icon), direction = sorted && sortDirection ? sortDirection : defaultSortDirection, source = direction === "descending" ? polarisIcons.SortDescendingIcon : polarisIcons.SortAscendingIcon, oppositeDirection = sortDirection === "ascending" ? "descending" : "ascending", sortAccessibilityLabel = i18n.translate("Polaris.DataTable.sortAccessibilityLabel", {
        direction: sorted ? oppositeDirection : direction
      }), iconMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: iconClassName
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source,
        accessibilityLabel: sortAccessibilityLabel
      })), focusable = !(stickyHeadingCell && hasFixedNthColumn && nthColumn && !inFixedNthColumn), columnHeadingContent = sortable ? /* @__PURE__ */ React2.createElement("button", {
        className: headerClassName,
        onClick: onSort,
        onFocus: handleFocus,
        tabIndex: focusable ? 0 : -1
      }, iconMarkup, content) : content, colSpanProp = colSpan && colSpan > 1 ? {
        colSpan
      } : {}, minWidthStyles = nthColumn && firstColumnMinWidth ? {
        minWidth: firstColumnMinWidth
      } : {
        minWidth: stickyCellWidth
      }, stickyHeading = /* @__PURE__ */ React2.createElement("th", Object.assign({
        ref: setRef
      }, shared.headerCell.props, colSpanProp, {
        className,
        "aria-sort": sortDirection,
        style: {
          ...style,
          ...minWidthStyles
        },
        "data-index-table-sticky-heading": !0
      }), columnHeadingContent), headingMarkup = header ? /* @__PURE__ */ React2.createElement("th", Object.assign({}, shared.headerCell.props, {
        "aria-sort": sortDirection
      }, colSpanProp, {
        ref: setRef,
        className,
        scope: "col",
        style: {
          ...minWidthStyles
        }
      }), columnHeadingContent) : /* @__PURE__ */ React2.createElement("th", Object.assign({}, colSpanProp, {
        ref: setRef,
        className,
        scope: "row",
        style: {
          ...minWidthStyles
        }
      }), truncate ? /* @__PURE__ */ React2.createElement(TruncatedText, {
        className: DataTable_module.default.TooltipContent
      }, content) : content), cellMarkup = header || firstColumn || nthColumn ? headingMarkup : /* @__PURE__ */ React2.createElement("td", Object.assign({
        className
      }, colSpanProp), content);
      return stickyHeadingCell ? stickyHeading : cellMarkup;
    }
    var TruncatedText = ({
      children,
      className = ""
    }) => {
      let textRef = React2.useRef(null), {
        current
      } = textRef, text = /* @__PURE__ */ React2.createElement("span", {
        ref: textRef,
        className
      }, children);
      return current?.scrollWidth > current?.offsetWidth ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: textRef.current.innerText
      }, text) : text;
    };
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-input-focused.js
var require_is_input_focused = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-input-focused.js"(exports) {
    "use strict";
    var EditableTarget;
    (function(EditableTarget2) {
      EditableTarget2.Input = "INPUT", EditableTarget2.Textarea = "TEXTAREA", EditableTarget2.Select = "SELECT", EditableTarget2.ContentEditable = "contenteditable";
    })(EditableTarget || (EditableTarget = {}));
    function isInputFocused() {
      if (document == null || document.activeElement == null)
        return !1;
      let {
        tagName
      } = document.activeElement;
      return tagName === EditableTarget.Input || tagName === EditableTarget.Textarea || tagName === EditableTarget.Select || document.activeElement.hasAttribute(EditableTarget.ContentEditable);
    }
    exports.isInputFocused = isInputFocused;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.scss.js
var require_Pagination_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Pagination: "Polaris-Pagination",
      table: "Polaris-Pagination--table"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.js
var require_Pagination = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Pagination/Pagination.js"(exports) {
    "use strict";
    var polarisIcons = require("@shopify/polaris-icons"), React2 = require("react"), isInputFocused = require_is_input_focused(), css = require_css(), Pagination_module = require_Pagination_scss(), hooks = require_hooks2(), KeypressListener = require_KeypressListener(), Box = require_Box(), InlineStack = require_InlineStack(), ButtonGroup = require_ButtonGroup(), Tooltip = require_Tooltip(), Text2 = require_Text(), Button2 = require_Button();
    function Pagination({
      hasNext,
      hasPrevious,
      nextURL,
      previousURL,
      onNext,
      onPrevious,
      nextTooltip,
      previousTooltip,
      nextKeys,
      previousKeys,
      accessibilityLabel,
      accessibilityLabels,
      label,
      type = "page"
    }) {
      let i18n = hooks.useI18n(), node = /* @__PURE__ */ React2.createRef(), navLabel = accessibilityLabel || i18n.translate("Polaris.Pagination.pagination"), previousLabel = accessibilityLabels?.previous || i18n.translate("Polaris.Pagination.previous"), nextLabel = accessibilityLabels?.next || i18n.translate("Polaris.Pagination.next"), prev = /* @__PURE__ */ React2.createElement(Button2.Button, {
        icon: polarisIcons.ChevronLeftIcon,
        accessibilityLabel: previousLabel,
        url: previousURL,
        onClick: onPrevious,
        disabled: !hasPrevious,
        id: "previousURL"
      }), constructedPrevious = previousTooltip && hasPrevious ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        activatorWrapper: "span",
        content: previousTooltip,
        preferredPosition: "below"
      }, prev) : prev, next = /* @__PURE__ */ React2.createElement(Button2.Button, {
        icon: polarisIcons.ChevronRightIcon,
        accessibilityLabel: nextLabel,
        url: nextURL,
        onClick: onNext,
        disabled: !hasNext,
        id: "nextURL"
      }), constructedNext = nextTooltip && hasNext ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        activatorWrapper: "span",
        content: nextTooltip,
        preferredPosition: "below"
      }, next) : next, previousHandler = onPrevious || noop, previousButtonEvents = previousKeys && (previousURL || onPrevious) && hasPrevious && previousKeys.map((key) => /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        key,
        keyCode: key,
        handler: handleCallback(previousURL ? clickPaginationLink("previousURL", node) : previousHandler)
      })), nextHandler = onNext || noop, nextButtonEvents = nextKeys && (nextURL || onNext) && hasNext && nextKeys.map((key) => /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        key,
        keyCode: key,
        handler: handleCallback(nextURL ? clickPaginationLink("nextURL", node) : nextHandler)
      }));
      if (type === "table") {
        let labelMarkup2 = label ? /* @__PURE__ */ React2.createElement(Text2.Text, {
          as: "span",
          variant: "bodySm",
          fontWeight: "medium"
        }, label) : null;
        return /* @__PURE__ */ React2.createElement("nav", {
          "aria-label": navLabel,
          ref: node,
          className: css.classNames(Pagination_module.default.Pagination, Pagination_module.default.table)
        }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ React2.createElement(Box.Box, {
          background: "bg-surface-secondary",
          paddingBlockStart: "150",
          paddingBlockEnd: "150",
          paddingInlineStart: "300",
          paddingInlineEnd: "200"
        }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
          align: labelMarkup2 ? "space-between" : "end",
          blockAlign: "center"
        }, labelMarkup2, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, {
          variant: "segmented"
        }, constructedPrevious, constructedNext))));
      }
      let labelTextMarkup = hasNext && hasPrevious ? /* @__PURE__ */ React2.createElement("span", null, label) : /* @__PURE__ */ React2.createElement(Text2.Text, {
        tone: "subdued",
        as: "span"
      }, label), labelMarkup = label ? /* @__PURE__ */ React2.createElement(Box.Box, {
        padding: "300",
        paddingBlockStart: "0",
        paddingBlockEnd: "0"
      }, /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "polite"
      }, labelTextMarkup)) : null;
      return /* @__PURE__ */ React2.createElement("nav", {
        "aria-label": navLabel,
        ref: node,
        className: Pagination_module.default.Pagination
      }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, {
        variant: "segmented"
      }, constructedPrevious, labelMarkup, constructedNext));
    }
    function clickPaginationLink(id, node) {
      return () => {
        if (node.current == null)
          return;
        let link = node.current.querySelector(`#${id}`);
        link && link.click();
      };
    }
    function handleCallback(fn) {
      return () => {
        isInputFocused.isInputFocused() || fn();
      };
    }
    function noop() {
    }
    exports.Pagination = Pagination;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/AfterInitialMount/AfterInitialMount.js
var require_AfterInitialMount = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/AfterInitialMount/AfterInitialMount.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsAfterInitialMount = require_use_is_after_initial_mount();
    function AfterInitialMount({
      children,
      onMount,
      fallback = null
    }) {
      let isMounted = useIsAfterInitialMount.useIsAfterInitialMount(), content = isMounted ? children : fallback;
      return React2.useEffect(() => {
        isMounted && onMount && onMount();
      }, [isMounted, onMount]), /* @__PURE__ */ React2.createElement(React2.Fragment, null, content);
    }
    exports.AfterInitialMount = AfterInitialMount;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/hooks.js
var require_hooks10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/sticky-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), errors = require_errors(), context = require_context4();
    function useStickyManager() {
      let stickyManager = React2.useContext(context.StickyManagerContext);
      if (!stickyManager)
        throw new errors.MissingAppProviderError("No StickyManager was provided.");
      return stickyManager;
    }
    exports.useStickyManager = useStickyManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sticky/Sticky.js
var require_Sticky = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sticky/Sticky.js"(exports) {
    "use strict";
    var React2 = require("react"), geometry = require_geometry(), hooks = require_hooks10(), StickyInner = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          isSticky: !1,
          style: {}
        }, this.placeHolderNode = null, this.stickyNode = null, this.setPlaceHolderNode = (node) => {
          this.placeHolderNode = node;
        }, this.setStickyNode = (node) => {
          this.stickyNode = node;
        }, this.handlePositioning = (stick, top = 0, left = 0, width = 0) => {
          let {
            isSticky
          } = this.state;
          (stick && !isSticky || !stick && isSticky) && (this.adjustPlaceHolderNode(stick), this.setState({
            isSticky: !isSticky
          }, () => {
            if (this.props.onStickyChange == null || (this.props.onStickyChange(!isSticky), this.props.boundingElement == null))
              return null;
            this.props.boundingElement.toggleAttribute("data-sticky-active");
          }));
          let style = stick ? {
            position: "fixed",
            top,
            left,
            width
          } : {};
          this.setState({
            style
          });
        }, this.adjustPlaceHolderNode = (add) => {
          this.placeHolderNode && this.stickyNode && (this.placeHolderNode.style.paddingBottom = add ? `${geometry.getRectForNode(this.stickyNode).height}px` : "0px");
        };
      }
      componentDidMount() {
        let {
          boundingElement,
          offset = !1,
          disableWhenStacked = !1,
          stickyManager
        } = this.props;
        !this.stickyNode || !this.placeHolderNode || stickyManager.registerStickyItem({
          stickyNode: this.stickyNode,
          placeHolderNode: this.placeHolderNode,
          handlePositioning: this.handlePositioning,
          offset,
          boundingElement,
          disableWhenStacked
        });
      }
      componentWillUnmount() {
        let {
          stickyManager
        } = this.props;
        this.stickyNode && stickyManager.unregisterStickyItem(this.stickyNode);
      }
      render() {
        let {
          style,
          isSticky
        } = this.state, {
          children
        } = this.props, childrenContent = isFunction(children) ? children(isSticky) : children;
        return /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setPlaceHolderNode
        }), /* @__PURE__ */ React2.createElement("div", {
          ref: this.setStickyNode,
          style
        }, childrenContent));
      }
    };
    function isFunction(arg) {
      return typeof arg == "function";
    }
    function Sticky(props) {
      let stickyManager = hooks.useStickyManager();
      return /* @__PURE__ */ React2.createElement(StickyInner, Object.assign({}, props, {
        stickyManager
      }));
    }
    exports.Sticky = Sticky;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Navigation/Navigation.js
var require_Navigation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/components/Navigation/Navigation.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), DataTable_module = require_DataTable_scss(), hooks = require_hooks2(), Button2 = require_Button();
    function Navigation({
      columnVisibilityData,
      isScrolledFarthestLeft,
      isScrolledFarthestRight,
      navigateTableLeft,
      navigateTableRight,
      fixedFirstColumns,
      setRef = () => {
      }
    }) {
      let i18n = hooks.useI18n(), pipMarkup = columnVisibilityData.map((column, index) => {
        if (index < fixedFirstColumns)
          return;
        let className = css.classNames(DataTable_module.default.Pip, column.isVisible && DataTable_module.default["Pip-visible"]);
        return /* @__PURE__ */ React2.createElement("div", {
          className,
          key: `pip-${index}`
        });
      }), leftA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
        direction: "left"
      }), rightA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
        direction: "right"
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: DataTable_module.default.Navigation,
        ref: setRef
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "tertiary",
        icon: polarisIcons.ChevronLeftIcon,
        disabled: isScrolledFarthestLeft,
        accessibilityLabel: leftA11yLabel,
        onClick: navigateTableLeft
      }), pipMarkup, /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "tertiary",
        icon: polarisIcons.ChevronRightIcon,
        disabled: isScrolledFarthestRight,
        accessibilityLabel: rightA11yLabel,
        onClick: navigateTableRight
      }));
    }
    exports.Navigation = Navigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.js
var require_DataTable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DataTable/DataTable.js"(exports) {
    "use strict";
    var React2 = require("react"), isEqual = require("react-fast-compare"), debounce = require_debounce(), css = require_css(), shared = require_shared(), utilities = require_utilities5(), DataTable_module = require_DataTable_scss(), Cell = require_Cell(), Pagination = require_Pagination(), AfterInitialMount = require_AfterInitialMount(), Sticky = require_Sticky(), Navigation = require_Navigation(), hooks = require_hooks2(), EventListener = require_EventListener(), getRowClientHeights = (rows) => {
      let heights = [];
      return rows && rows.forEach((row) => {
        heights.push(row.clientHeight);
      }), heights;
    }, DataTableInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          condensed: !1,
          columnVisibilityData: [],
          isScrolledFarthestLeft: !0,
          isScrolledFarthestRight: !1,
          rowHovered: void 0
        }, this.dataTable = /* @__PURE__ */ React2.createRef(), this.scrollContainer = /* @__PURE__ */ React2.createRef(), this.table = /* @__PURE__ */ React2.createRef(), this.stickyTable = /* @__PURE__ */ React2.createRef(), this.stickyNav = null, this.headerNav = null, this.tableHeadings = [], this.stickyHeadings = [], this.tableHeadingWidths = [], this.stickyHeaderActive = !1, this.scrollStopTimer = null, this.handleResize = debounce.debounce(() => {
          let {
            table: {
              current: table
            },
            scrollContainer: {
              current: scrollContainer
            }
          } = this, condensed = !1;
          table && scrollContainer && (condensed = table.scrollWidth > scrollContainer.clientWidth + 1), this.setState({
            condensed,
            ...this.calculateColumnVisibilityData(condensed)
          });
        }), this.setCellRef = ({
          ref,
          index,
          inStickyHeader
        }) => {
          if (ref != null)
            if (inStickyHeader) {
              this.stickyHeadings[index] = ref;
              let button = ref.querySelector("button");
              if (button == null)
                return;
              button.addEventListener("focus", this.handleHeaderButtonFocus);
            } else
              this.tableHeadings[index] = ref, this.tableHeadingWidths[index] = ref.clientWidth;
        }, this.changeHeadingFocus = () => {
          let {
            tableHeadings,
            stickyHeadings,
            stickyNav,
            headerNav
          } = this, stickyFocusedItemIndex = stickyHeadings.findIndex((item) => item === document.activeElement?.parentElement), tableFocusedItemIndex = tableHeadings.findIndex((item) => item === document.activeElement?.parentElement), arrowsInStickyNav = stickyNav?.querySelectorAll("button"), arrowsInHeaderNav = headerNav?.querySelectorAll("button"), stickyFocusedNavIndex = -1;
          arrowsInStickyNav?.forEach((item, index) => {
            item === document.activeElement && (stickyFocusedNavIndex = index);
          });
          let headerFocusedNavIndex = -1;
          if (arrowsInHeaderNav?.forEach((item, index) => {
            item === document.activeElement && (headerFocusedNavIndex = index);
          }), stickyFocusedItemIndex < 0 && tableFocusedItemIndex < 0 && stickyFocusedNavIndex < 0 && headerFocusedNavIndex < 0)
            return null;
          let button;
          if (stickyFocusedItemIndex >= 0 ? button = tableHeadings[stickyFocusedItemIndex].querySelector("button") : tableFocusedItemIndex >= 0 && (button = stickyHeadings[tableFocusedItemIndex].querySelector("button")), stickyFocusedNavIndex >= 0 ? button = arrowsInHeaderNav?.[stickyFocusedNavIndex] : headerFocusedNavIndex >= 0 && (button = arrowsInStickyNav?.[headerFocusedNavIndex]), button == null)
            return null;
          button.style.visibility = "visible", button.focus(), button.style.removeProperty("visibility");
        }, this.calculateColumnVisibilityData = (condensed) => {
          let fixedFirstColumns = this.fixedFirstColumns(), {
            table: {
              current: table
            },
            scrollContainer: {
              current: scrollContainer
            },
            dataTable: {
              current: dataTable
            }
          } = this, {
            stickyHeader
          } = this.props;
          if ((stickyHeader || condensed) && table && scrollContainer && dataTable) {
            let headerCells = table.querySelectorAll(shared.headerCell.selector), rightMostHeader = headerCells[fixedFirstColumns - 1], nthColumnWidth = fixedFirstColumns ? rightMostHeader.offsetLeft + rightMostHeader.offsetWidth : 0;
            if (headerCells.length > 0) {
              let firstVisibleColumnIndex = headerCells.length - 1, tableLeftVisibleEdge = scrollContainer.scrollLeft + nthColumnWidth, tableRightVisibleEdge = scrollContainer.scrollLeft + dataTable.offsetWidth, tableData = {
                firstVisibleColumnIndex,
                tableLeftVisibleEdge,
                tableRightVisibleEdge
              }, columnVisibilityData = [...headerCells].map(utilities.measureColumn(tableData)), lastColumn = columnVisibilityData[columnVisibilityData.length - 1], isScrolledFarthestLeft = fixedFirstColumns ? tableLeftVisibleEdge === nthColumnWidth : tableLeftVisibleEdge === 0;
              return {
                columnVisibilityData,
                ...utilities.getPrevAndCurrentColumns(tableData, columnVisibilityData),
                isScrolledFarthestLeft,
                isScrolledFarthestRight: lastColumn.rightEdge <= tableRightVisibleEdge
              };
            }
          }
          return {
            columnVisibilityData: [],
            previousColumn: void 0,
            currentColumn: void 0
          };
        }, this.handleHeaderButtonFocus = (event) => {
          let fixedFirstColumns = this.fixedFirstColumns();
          if (this.scrollContainer.current == null || event.target == null || this.state.columnVisibilityData.length === 0)
            return;
          let currentCell = event.target.parentNode, tableScrollLeft = this.scrollContainer.current.scrollLeft, tableViewableWidth = this.scrollContainer.current.offsetWidth, tableRightEdge = tableScrollLeft + tableViewableWidth, nthColumnWidth = this.state.columnVisibilityData.length > 0 ? this.state.columnVisibilityData[fixedFirstColumns]?.rightEdge : 0, currentColumnLeftEdge = currentCell.offsetLeft, currentColumnRightEdge = currentCell.offsetLeft + currentCell.offsetWidth;
          tableScrollLeft > currentColumnLeftEdge - nthColumnWidth && (this.scrollContainer.current.scrollLeft = currentColumnLeftEdge - nthColumnWidth), currentColumnRightEdge > tableRightEdge && (this.scrollContainer.current.scrollLeft = currentColumnRightEdge - tableViewableWidth);
        }, this.stickyHeaderScrolling = () => {
          let {
            current: stickyTable
          } = this.stickyTable, {
            current: scrollContainer
          } = this.scrollContainer;
          stickyTable == null || scrollContainer == null || (stickyTable.scrollLeft = scrollContainer.scrollLeft);
        }, this.scrollListener = () => {
          this.scrollStopTimer && clearTimeout(this.scrollStopTimer), this.scrollStopTimer = setTimeout(() => {
            this.setState((prevState) => ({
              ...this.calculateColumnVisibilityData(prevState.condensed)
            }));
          }, 100), this.setState({
            isScrolledFarthestLeft: this.scrollContainer.current?.scrollLeft === 0
          }), this.props.stickyHeader && this.stickyHeaderActive && this.stickyHeaderScrolling();
        }, this.handleHover = (row) => () => {
          this.setState({
            rowHovered: row
          });
        }, this.handleFocus = (event) => {
          let fixedFirstColumns = this.fixedFirstColumns();
          if (this.scrollContainer.current == null || event.target == null)
            return;
          let currentCell = event.target.parentNode, nthColumnWidth = this.props ? this.state.columnVisibilityData[fixedFirstColumns]?.rightEdge : 0, desiredScrollLeft = currentCell.offsetLeft - nthColumnWidth;
          this.scrollContainer.current.scrollLeft > desiredScrollLeft && (this.scrollContainer.current.scrollLeft = desiredScrollLeft);
        }, this.navigateTable = (direction) => {
          let fixedFirstColumns = this.fixedFirstColumns(), {
            currentColumn,
            previousColumn
          } = this.state, nthColumnWidth = this.state.columnVisibilityData[fixedFirstColumns - 1]?.rightEdge;
          if (!currentColumn || !previousColumn)
            return;
          let prevWidths = 0;
          for (let index = 0; index < currentColumn.index; index++)
            prevWidths += this.state.columnVisibilityData[index].width;
          let {
            current: scrollContainer
          } = this.scrollContainer;
          return () => {
            let newScrollLeft = 0;
            fixedFirstColumns ? newScrollLeft = direction === "right" ? prevWidths - nthColumnWidth + currentColumn.width : prevWidths - previousColumn.width - nthColumnWidth : newScrollLeft = direction === "right" ? currentColumn.rightEdge : previousColumn.leftEdge, scrollContainer && (scrollContainer.scrollLeft = newScrollLeft, requestAnimationFrame(() => {
              this.setState((prevState) => ({
                ...this.calculateColumnVisibilityData(prevState.condensed)
              }));
            }));
          };
        }, this.renderHeading = ({
          heading,
          headingIndex,
          inFixedNthColumn,
          inStickyHeader
        }) => {
          let {
            sortable,
            truncate = !1,
            columnContentTypes,
            defaultSortDirection,
            initialSortColumnIndex = 0,
            verticalAlign,
            firstColumnMinWidth
          } = this.props, fixedFirstColumns = this.fixedFirstColumns(), {
            sortDirection = defaultSortDirection,
            sortedColumnIndex = initialSortColumnIndex,
            isScrolledFarthestLeft
          } = this.state, sortableHeadingProps, headingCellId = `heading-cell-${headingIndex}`, stickyHeaderId = `stickyheader-${headingIndex}`, id = inStickyHeader ? stickyHeaderId : headingCellId;
          if (sortable) {
            let isSortable = sortable[headingIndex], isSorted = isSortable && sortedColumnIndex === headingIndex;
            sortableHeadingProps = {
              defaultSortDirection,
              sorted: isSorted,
              sortable: isSortable,
              sortDirection: isSorted ? sortDirection : "none",
              onSort: this.defaultOnSort(headingIndex),
              fixedNthColumn: fixedFirstColumns,
              inFixedNthColumn: fixedFirstColumns
            };
          }
          let stickyCellWidth = inStickyHeader ? this.tableHeadingWidths[headingIndex] : void 0, fixedCellVisible = !isScrolledFarthestLeft, cellProps = {
            header: !0,
            stickyHeadingCell: inStickyHeader,
            content: heading,
            contentType: columnContentTypes[headingIndex],
            nthColumn: headingIndex < fixedFirstColumns,
            fixedFirstColumns,
            truncate,
            headingIndex,
            ...sortableHeadingProps,
            verticalAlign,
            handleFocus: this.handleFocus,
            stickyCellWidth,
            fixedCellVisible,
            firstColumnMinWidth
          };
          return inFixedNthColumn && inStickyHeader ? [/* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: id
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            inFixedNthColumn: !1
          })), /* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: `${id}-sticky`
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            inFixedNthColumn: Boolean(fixedFirstColumns),
            lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
            style: {
              left: this.state.columnVisibilityData[headingIndex]?.leftEdge
            }
          }))] : /* @__PURE__ */ React2.createElement(Cell.Cell, Object.assign({
            key: id
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
            inFixedNthColumn
          }));
        }, this.totalsRowHeading = () => {
          let {
            i18n,
            totals,
            totalsName
          } = this.props, totalsLabel = totalsName || {
            singular: i18n.translate("Polaris.DataTable.totalRowHeading"),
            plural: i18n.translate("Polaris.DataTable.totalsRowHeading")
          };
          return totals && totals.filter((total) => total !== "").length > 1 ? totalsLabel.plural : totalsLabel.singular;
        }, this.renderTotals = ({
          total,
          index
        }) => {
          let fixedFirstColumns = this.fixedFirstColumns(), id = `totals-cell-${index}`, {
            truncate = !1,
            verticalAlign,
            columnContentTypes
          } = this.props, content, contentType;
          index === 0 && (content = this.totalsRowHeading()), total !== "" && index > 0 && (contentType = columnContentTypes[index], content = total);
          let totalInFooter = this.props.showTotalsInFooter;
          return /* @__PURE__ */ React2.createElement(Cell.Cell, {
            total: !0,
            totalInFooter,
            nthColumn: index <= fixedFirstColumns - 1,
            firstColumn: index === 0,
            key: id,
            content,
            contentType,
            truncate,
            verticalAlign
          });
        }, this.getColSpan = (rowLength, headingsLength, contentTypesLength, cellIndex) => {
          if (this.fixedFirstColumns())
            return 1;
          let rowLen = rowLength || 1, colLen = headingsLength || contentTypesLength, colSpan = Math.floor(colLen / rowLen), remainder = colLen % rowLen;
          return cellIndex === 0 ? colSpan + remainder : colSpan;
        }, this.defaultRenderRow = ({
          row,
          index,
          inFixedNthColumn,
          rowHeights
        }) => {
          let {
            columnContentTypes,
            truncate = !1,
            verticalAlign,
            hoverable = !0,
            headings
          } = this.props, {
            condensed
          } = this.state, fixedFirstColumns = this.fixedFirstColumns(), className = css.classNames(DataTable_module.default.TableRow, hoverable && DataTable_module.default.hoverable);
          return /* @__PURE__ */ React2.createElement("tr", {
            key: `row-${index}`,
            className,
            onMouseEnter: this.handleHover(index),
            onMouseLeave: this.handleHover()
          }, row.map((content, cellIndex) => {
            let hovered = index === this.state.rowHovered, id = `cell-${cellIndex}-row-${index}`, colSpan = this.getColSpan(row.length, headings.length, columnContentTypes.length, cellIndex);
            return /* @__PURE__ */ React2.createElement(Cell.Cell, {
              key: id,
              content,
              contentType: columnContentTypes[cellIndex],
              nthColumn: cellIndex <= fixedFirstColumns - 1,
              firstColumn: cellIndex === 0,
              truncate,
              verticalAlign,
              colSpan,
              hovered,
              style: rowHeights ? {
                height: `${rowHeights[index]}px`
              } : {},
              inFixedNthColumn: condensed && inFixedNthColumn
            });
          }));
        }, this.defaultOnSort = (headingIndex) => {
          let {
            onSort,
            defaultSortDirection = "ascending",
            initialSortColumnIndex
          } = this.props, {
            sortDirection = defaultSortDirection,
            sortedColumnIndex = initialSortColumnIndex
          } = this.state, newSortDirection = defaultSortDirection;
          return sortedColumnIndex === headingIndex && (newSortDirection = sortDirection === "ascending" ? "descending" : "ascending"), () => {
            this.setState({
              sortDirection: newSortDirection,
              sortedColumnIndex: headingIndex
            }, () => {
              onSort && onSort(headingIndex, newSortDirection);
            });
          };
        };
      }
      componentDidMount() {
        this.handleResize();
      }
      componentDidUpdate(prevProps) {
        isEqual(prevProps, this.props) || this.handleResize();
      }
      componentWillUnmount() {
        this.handleResize.cancel();
      }
      render() {
        let {
          headings,
          totals,
          showTotalsInFooter,
          rows,
          footerContent,
          hideScrollIndicator = !1,
          increasedTableDensity = !1,
          hasZebraStripingOnData = !1,
          stickyHeader = !1,
          hasFixedFirstColumn: fixedFirstColumn = !1,
          pagination
        } = this.props, {
          condensed,
          columnVisibilityData,
          isScrolledFarthestLeft,
          isScrolledFarthestRight
        } = this.state, fixedFirstColumns = this.fixedFirstColumns(), rowCountIsEven = rows.length % 2 === 0, className = css.classNames(DataTable_module.default.DataTable, condensed && DataTable_module.default.condensed, totals && DataTable_module.default.ShowTotals, showTotalsInFooter && DataTable_module.default.ShowTotalsInFooter, hasZebraStripingOnData && DataTable_module.default.ZebraStripingOnData, hasZebraStripingOnData && rowCountIsEven && DataTable_module.default.RowCountIsEven), wrapperClassName = css.classNames(DataTable_module.default.TableWrapper, condensed && DataTable_module.default.condensed, increasedTableDensity && DataTable_module.default.IncreasedTableDensity, stickyHeader && DataTable_module.default.StickyHeaderEnabled), headingMarkup = /* @__PURE__ */ React2.createElement("tr", null, headings.map((heading, index) => this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: !1,
          inStickyHeader: !1
        }))), totalsMarkup = totals ? /* @__PURE__ */ React2.createElement("tr", null, totals.map((total, index) => this.renderTotals({
          total,
          index
        }))) : null, nthColumns = rows.map((row) => row.slice(0, fixedFirstColumns)), nthHeadings = headings.slice(0, fixedFirstColumns), nthTotals = totals?.slice(0, fixedFirstColumns), tableHeaderRows = this.table.current?.children[0].childNodes, tableBodyRows = this.table.current?.children[1].childNodes, headerRowHeights = getRowClientHeights(tableHeaderRows), bodyRowHeights = getRowClientHeights(tableBodyRows), fixedNthColumnMarkup = condensed && fixedFirstColumns !== 0 && /* @__PURE__ */ React2.createElement("table", {
          className: css.classNames(DataTable_module.default.FixedFirstColumn, !isScrolledFarthestLeft && DataTable_module.default.separate),
          style: {
            width: `${columnVisibilityData[fixedFirstColumns - 1]?.rightEdge}px`
          }
        }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
          style: {
            height: `${headerRowHeights[0]}px`
          }
        }, nthHeadings.map((heading, index) => this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: !0,
          inStickyHeader: !1
        }))), totals && !showTotalsInFooter && /* @__PURE__ */ React2.createElement("tr", {
          style: {
            height: `${headerRowHeights[1]}px`
          }
        }, nthTotals?.map((total, index) => this.renderTotals({
          total,
          index
        })))), /* @__PURE__ */ React2.createElement("tbody", null, nthColumns.map((row, index) => this.defaultRenderRow({
          row,
          index,
          inFixedNthColumn: !0,
          rowHeights: bodyRowHeights
        }))), totals && showTotalsInFooter && /* @__PURE__ */ React2.createElement("tfoot", null, /* @__PURE__ */ React2.createElement("tr", null, nthTotals?.map((total, index) => this.renderTotals({
          total,
          index
        }))))), bodyMarkup = rows.map((row, index) => this.defaultRenderRow({
          row,
          index,
          inFixedNthColumn: !1
        })), footerMarkup = footerContent ? /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.Footer
        }, footerContent) : null, paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
          type: "table"
        }, pagination)) : null, headerTotalsMarkup = showTotalsInFooter ? null : totalsMarkup, footerTotalsMarkup = showTotalsInFooter ? /* @__PURE__ */ React2.createElement("tfoot", null, totalsMarkup) : null, navigationMarkup = (location) => hideScrollIndicator ? null : /* @__PURE__ */ React2.createElement(Navigation.Navigation, {
          columnVisibilityData,
          isScrolledFarthestLeft,
          isScrolledFarthestRight,
          navigateTableLeft: this.navigateTable("left"),
          navigateTableRight: this.navigateTable("right"),
          fixedFirstColumns,
          setRef: (ref) => {
            location === "header" ? this.headerNav = ref : location === "sticky" && (this.stickyNav = ref);
          }
        }), stickyHeaderMarkup = stickyHeader ? /* @__PURE__ */ React2.createElement(AfterInitialMount.AfterInitialMount, null, /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.StickyHeaderWrapper,
          role: "presentation"
        }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
          boundingElement: this.dataTable.current,
          onStickyChange: (isSticky) => {
            this.changeHeadingFocus(), this.stickyHeaderActive = isSticky;
          }
        }, (isSticky) => {
          let stickyHeaderInnerClassNames = css.classNames(DataTable_module.default.StickyHeaderInner, isSticky && DataTable_module.default["StickyHeaderInner-isSticky"]), stickyHeaderTableClassNames = css.classNames(DataTable_module.default.StickyHeaderTable, !isScrolledFarthestLeft && DataTable_module.default.separate);
          return /* @__PURE__ */ React2.createElement("div", {
            className: stickyHeaderInnerClassNames
          }, /* @__PURE__ */ React2.createElement("div", null, navigationMarkup("sticky")), /* @__PURE__ */ React2.createElement("table", {
            className: stickyHeaderTableClassNames,
            ref: this.stickyTable
          }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
            className: DataTable_module.default.StickyTableHeadingsRow
          }, headings.map((heading, index) => this.renderHeading({
            heading,
            headingIndex: index,
            inFixedNthColumn: Boolean(index <= fixedFirstColumns - 1 && fixedFirstColumns),
            inStickyHeader: !0
          }))))));
        }))) : null;
        return /* @__PURE__ */ React2.createElement("div", {
          className: wrapperClassName,
          ref: this.dataTable
        }, stickyHeaderMarkup, navigationMarkup("header"), /* @__PURE__ */ React2.createElement("div", {
          className
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DataTable_module.default.ScrollContainer,
          ref: this.scrollContainer
        }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        }), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          capture: !0,
          passive: !0,
          event: "scroll",
          handler: this.scrollListener
        }), fixedNthColumnMarkup, /* @__PURE__ */ React2.createElement("table", {
          className: DataTable_module.default.Table,
          ref: this.table
        }, /* @__PURE__ */ React2.createElement("thead", null, headingMarkup, headerTotalsMarkup), /* @__PURE__ */ React2.createElement("tbody", null, bodyMarkup), footerTotalsMarkup)), paginationMarkup, footerMarkup));
      }
      fixedFirstColumns() {
        let {
          hasFixedFirstColumn,
          fixedFirstColumns = 0,
          headings
        } = this.props, numberOfFixedFirstColumns = hasFixedFirstColumn && !fixedFirstColumns ? 1 : fixedFirstColumns;
        return numberOfFixedFirstColumns >= headings.length ? 0 : numberOfFixedFirstColumns;
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    function DataTable(props) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(DataTableInner, Object.assign({}, props, {
        i18n
      }));
    }
    exports.DataTable = DataTable;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/dates.js
var require_dates = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/dates.js"(exports) {
    "use strict";
    function getWeeksForMonth(month, year, weekStartsOn = 0) {
      let firstOfMonth = new Date(year, month, 1), firstDayOfWeek = firstOfMonth.getDay(), weeks = [[]], currentWeek = weeks[0], currentDate = firstOfMonth, orderedWeekday = getOrderedWeekdays(weekStartsOn);
      for (let i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++)
        currentWeek.push(null);
      for (; currentDate.getMonth() === month; )
        currentWeek.length === 7 && (currentWeek = [], weeks.push(currentWeek)), currentWeek.push(currentDate), currentDate = new Date(year, month, currentDate.getDate() + 1);
      for (; currentWeek.length < 7; )
        currentWeek.push(null);
      return weeks;
    }
    function dateIsInRange(day, range) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(start && day > start && end && day < end);
    }
    function dateIsSelected(day, range) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(start && isSameDay(start, day) || end && isSameDay(end, day));
    }
    function isSameDay(day1, day2) {
      return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();
    }
    function getNewRange(range, selected) {
      if (range == null)
        return {
          start: selected,
          end: selected
        };
      let {
        start,
        end
      } = range;
      return end && (isDateAfter(start, end) || isDateBefore(start, end)) ? {
        start: selected,
        end: selected
      } : start ? isDateBefore(selected, start) ? {
        start: selected,
        end: selected
      } : {
        start,
        end: selected
      } : end ? isDateBefore(selected, end) ? {
        start: selected,
        end
      } : {
        start: start || end,
        end: selected
      } : {
        start: selected,
        end: selected
      };
    }
    function getNextDisplayMonth(month) {
      return month === 11 ? 0 : month + 1;
    }
    function getNextDisplayYear(month, year) {
      return month === 11 ? year + 1 : year;
    }
    function getPreviousDisplayMonth(month) {
      return month === 0 ? 11 : month - 1;
    }
    function getPreviousDisplayYear(month, year) {
      return month === 0 ? year - 1 : year;
    }
    function isDateAfter(date, dateToCompare) {
      return date.getTime() > dateToCompare.getTime();
    }
    function isDateBefore(date, dateToCompare) {
      return date.getTime() < dateToCompare.getTime();
    }
    function isDateDisabled(date, datesToCompare) {
      return datesToCompare.some((dateToCompare) => date.getTime() === dateToCompare.getTime());
    }
    var WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];
    function getOrderedWeekdays(weekStartsOn) {
      let weekDays = [...WEEKDAYS];
      return [...weekDays.splice(weekStartsOn), ...weekDays];
    }
    exports.dateIsInRange = dateIsInRange;
    exports.dateIsSelected = dateIsSelected;
    exports.getNewRange = getNewRange;
    exports.getNextDisplayMonth = getNextDisplayMonth;
    exports.getNextDisplayYear = getNextDisplayYear;
    exports.getOrderedWeekdays = getOrderedWeekdays;
    exports.getPreviousDisplayMonth = getPreviousDisplayMonth;
    exports.getPreviousDisplayYear = getPreviousDisplayYear;
    exports.getWeeksForMonth = getWeeksForMonth;
    exports.isDateAfter = isDateAfter;
    exports.isDateBefore = isDateBefore;
    exports.isDateDisabled = isDateDisabled;
    exports.isSameDay = isSameDay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/utilities.js
var require_utilities6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/utilities.js"(exports) {
    "use strict";
    function monthName(month) {
      switch (month) {
        case 0:
          return "january";
        case 1:
          return "february";
        case 2:
          return "march";
        case 3:
          return "april";
        case 4:
          return "may";
        case 5:
          return "june";
        case 6:
          return "july";
        case 7:
          return "august";
        case 8:
          return "september";
        case 9:
          return "october";
        case 10:
          return "november";
        case 11:
          return "december";
      }
    }
    function weekdayName(weekday) {
      switch (weekday) {
        case 0:
          return "sunday";
        case 1:
          return "monday";
        case 2:
          return "tuesday";
        case 3:
          return "wednesday";
        case 4:
          return "thursday";
        case 5:
          return "friday";
        case 6:
          return "saturday";
      }
    }
    exports.monthName = monthName;
    exports.weekdayName = weekdayName;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.scss.js
var require_DatePicker_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DatePicker: "Polaris-DatePicker",
      MonthLayout: "Polaris-DatePicker__MonthLayout",
      MonthContainer: "Polaris-DatePicker__MonthContainer",
      Month: "Polaris-DatePicker__Month",
      "Month-current": "Polaris-DatePicker__Month--current",
      DayCell: "Polaris-DatePicker__DayCell",
      "DayCell-inRange": "Polaris-DatePicker__DayCell--inRange",
      Day: "Polaris-DatePicker__Day",
      "Day-today": "Polaris-DatePicker__Day--today",
      "Day-inRange": "Polaris-DatePicker__Day--inRange",
      "Day-selected": "Polaris-DatePicker__Day--selected",
      "Day-disabled": "Polaris-DatePicker__Day--disabled",
      EmptyDayCell: "Polaris-DatePicker__EmptyDayCell",
      Weekday: "Polaris-DatePicker__Weekday",
      "Weekday-current": "Polaris-DatePicker__Weekday--current",
      Header: "Polaris-DatePicker__Header",
      Title: "Polaris-DatePicker__Title",
      "Day-firstInRange": "Polaris-DatePicker__Day--firstInRange",
      "Day-hasRange": "Polaris-DatePicker__Day--hasRange",
      "Day-hoverRight": "Polaris-DatePicker__Day--hoverRight",
      "Day-lastInRange": "Polaris-DatePicker__Day--lastInRange",
      Week: "Polaris-DatePicker__Week"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Weekday/Weekday.js
var require_Weekday = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Weekday/Weekday.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), DatePicker_module = require_DatePicker_scss(), Weekday = /* @__PURE__ */ React2.memo(function({
      label,
      title,
      current
    }) {
      let className = css.classNames(DatePicker_module.default.Weekday, current && DatePicker_module.default["Weekday-current"]);
      return /* @__PURE__ */ React2.createElement("th", {
        "aria-label": label,
        scope: "col",
        className
      }, title);
    });
    exports.Weekday = Weekday;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Day/Day.js
var require_Day = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Day/Day.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), dates = require_dates(), utilities = require_utilities6(), DatePicker_module = require_DatePicker_scss(), hooks = require_hooks2(), Day = /* @__PURE__ */ React2.memo(function({
      day,
      focused,
      onClick,
      onHover = noop,
      onFocus = noop,
      selected,
      inRange,
      inHoveringRange,
      disabled,
      lastDayOfMonth,
      isLastSelectedDay,
      isFirstSelectedDay,
      isHoveringRight,
      rangeIsDifferent,
      weekday,
      selectedAccessibilityLabelPrefix
    }) {
      let i18n = hooks.useI18n(), dayNode = React2.useRef(null), hoverValue = lastDayOfMonth || day;
      if (React2.useEffect(() => {
        focused && dayNode.current && dayNode.current.focus();
      }, [focused]), !day)
        return /* @__PURE__ */ React2.createElement("td", {
          className: DatePicker_module.default.EmptyDayCell,
          onMouseOver: () => onHover(hoverValue)
        });
      let handleClick = onClick && !disabled ? onClick.bind(null, day) : noop, today = dates.isSameDay(/* @__PURE__ */ new Date(), day), dayCellClassName = css.classNames(DatePicker_module.default.DayCell, selected && DatePicker_module.default["DayCell-selected"], (inRange || inHoveringRange) && !disabled && DatePicker_module.default["DayCell-inRange"], isLastSelectedDay && DatePicker_module.default["DayCell-lastInRange"], isFirstSelectedDay && DatePicker_module.default["DayCell-firstInRange"], isHoveringRight && DatePicker_module.default["DayCell-hoverRight"], rangeIsDifferent && DatePicker_module.default["DayCell-hasRange"]), dayClassName = css.classNames(DatePicker_module.default.Day, selected && DatePicker_module.default["Day-selected"], disabled && DatePicker_module.default["Day-disabled"], today && DatePicker_module.default["Day-today"], (inRange || inHoveringRange) && !disabled && DatePicker_module.default["Day-inRange"], isLastSelectedDay && DatePicker_module.default["Day-lastInRange"], isFirstSelectedDay && DatePicker_module.default["Day-firstInRange"], isHoveringRight && DatePicker_module.default["Day-hoverRight"], rangeIsDifferent && DatePicker_module.default["Day-hasRange"]), date = day.getDate(), tabIndex = (focused || selected || today || date === 1) && !disabled ? 0 : -1, ariaLabel = [selected && selectedAccessibilityLabelPrefix ? `${selectedAccessibilityLabelPrefix} ` : "", `${today ? i18n.translate("Polaris.DatePicker.today") : ""}`, `${weekday || ""} `, `${i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(day.getMonth())}`)} `, `${date} `, `${day.getFullYear()}`].join("");
      return /* @__PURE__ */ React2.createElement("td", {
        className: dayCellClassName
      }, /* @__PURE__ */ React2.createElement("button", {
        onFocus: () => onFocus(day),
        type: "button",
        ref: dayNode,
        tabIndex,
        className: dayClassName,
        onMouseOver: () => onHover(hoverValue),
        onClick: handleClick,
        "aria-label": ariaLabel,
        "aria-disabled": disabled,
        "aria-pressed": selected
      }, date));
    });
    function noop() {
    }
    exports.Day = Day;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Month/Month.js
var require_Month = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/components/Month/Month.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), dates = require_dates(), DatePicker_module = require_DatePicker_scss(), utilities = require_utilities6(), Weekday = require_Weekday(), Day = require_Day(), hooks = require_hooks2();
    function Month({
      focusedDate,
      selected,
      hoverDate,
      disableDatesBefore,
      disableDatesAfter,
      disableSpecificDates,
      allowRange,
      onChange = noop,
      onHover = noop,
      onFocus = noop,
      month,
      year,
      weekStartsOn,
      accessibilityLabelPrefixes
    }) {
      let i18n = hooks.useI18n(), isInHoveringRange = allowRange ? hoveringDateIsInRange : () => !1, now = /* @__PURE__ */ new Date(), current = now.getMonth() === month && now.getFullYear() === year, className = css.classNames(DatePicker_module.default.Title, current && DatePicker_module.default["Month-current"]), weeks = React2.useMemo(() => dates.getWeeksForMonth(month, year, weekStartsOn), [month, weekStartsOn, year]), weekdays = dates.getOrderedWeekdays(weekStartsOn).map((weekday) => /* @__PURE__ */ React2.createElement(Weekday.Weekday, {
        key: weekday,
        title: i18n.translate(`Polaris.DatePicker.daysAbbreviated.${utilities.weekdayName(weekday)}`),
        label: weekdayLabel(weekday),
        current: current && (/* @__PURE__ */ new Date()).getDay() === weekday
      })), handleDateClick = React2.useCallback((selectedDate) => {
        onChange(dates.getNewRange(allowRange ? selected : void 0, selectedDate));
      }, [allowRange, onChange, selected]), lastDayOfMonth = React2.useMemo(() => new Date(year, month + 1, 0), [month, year]);
      function renderWeek(day, dayIndex) {
        if (day == null)
          return /* @__PURE__ */ React2.createElement(Day.Day, {
            key: dayIndex,
            onHover,
            lastDayOfMonth
          });
        let disabled = disableDatesBefore && dates.isDateBefore(day, disableDatesBefore) || disableDatesAfter && dates.isDateAfter(day, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(day, disableSpecificDates), isFirstSelectedDay = allowRange && selected && isDateStart(day, selected), isLastSelectedDay = allowRange && selected && (!dates.isSameDay(selected.start, selected.end) && isDateEnd(day, selected) || hoverDate && dates.isSameDay(selected.start, selected.end) && dates.isDateAfter(hoverDate, selected.start) && dates.isSameDay(day, hoverDate) && !isFirstSelectedDay), rangeIsDifferent = !(selected && dates.isSameDay(selected.start, selected.end)), isHoveringRight = hoverDate && dates.isDateBefore(day, hoverDate), [firstAccessibilityLabelPrefix, lastAccessibilityLabelPrefix] = accessibilityLabelPrefixes, accessibilityLabelPrefix;
        return allowRange && isFirstSelectedDay || !allowRange && firstAccessibilityLabelPrefix ? accessibilityLabelPrefix = firstAccessibilityLabelPrefix : allowRange && isLastSelectedDay && (accessibilityLabelPrefix = lastAccessibilityLabelPrefix), /* @__PURE__ */ React2.createElement(Day.Day, {
          selectedAccessibilityLabelPrefix: accessibilityLabelPrefix,
          weekday: weekdayLabel(dayIndex),
          focused: focusedDate != null && dates.isSameDay(day, focusedDate),
          day,
          key: dayIndex,
          onFocus,
          onClick: handleDateClick,
          onHover,
          selected: selected != null && dates.dateIsSelected(day, selected),
          inRange: selected != null && dates.dateIsInRange(day, selected),
          disabled,
          inHoveringRange: selected != null && hoverDate != null && isInHoveringRange(day, selected, hoverDate),
          isLastSelectedDay,
          isFirstSelectedDay,
          isHoveringRight,
          rangeIsDifferent
        });
      }
      let weeksMarkup = weeks.map((week, index) => /* @__PURE__ */ React2.createElement("tr", {
        className: DatePicker_module.default.Week,
        key: index
      }, week.map(renderWeek)));
      return /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.MonthContainer
      }, /* @__PURE__ */ React2.createElement("table", {
        role: "grid",
        className: DatePicker_module.default.Month
      }, /* @__PURE__ */ React2.createElement("caption", {
        className
      }, i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(month)}`), " ", year), /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
        className: DatePicker_module.default.WeekHeadings
      }, weekdays)), /* @__PURE__ */ React2.createElement("tbody", null, weeksMarkup)));
      function weekdayLabel(weekday) {
        return i18n.translate(`Polaris.DatePicker.days.${utilities.weekdayName(weekday)}`);
      }
    }
    function noop() {
    }
    function hoveringDateIsInRange(day, range, hoverEndDate) {
      if (day == null)
        return !1;
      let {
        start,
        end
      } = range;
      return Boolean(dates.isSameDay(start, end) && day > start && day <= hoverEndDate);
    }
    function isDateEnd(day, range) {
      if (day == null)
        return !1;
      let {
        end
      } = range;
      return Boolean(end && dates.isSameDay(end, day));
    }
    function isDateStart(day, range) {
      if (day == null)
        return !1;
      let {
        start
      } = range;
      return Boolean(start && dates.isSameDay(start, day));
    }
    exports.Month = Month;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.js
var require_DatePicker = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DatePicker/DatePicker.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), dates = require_dates(), utilities = require_utilities6(), DatePicker_module = require_DatePicker_scss(), Month = require_Month(), hooks = require_hooks2(), Button2 = require_Button();
    function DatePicker({
      id,
      selected,
      month,
      year,
      allowRange,
      multiMonth,
      disableDatesBefore,
      disableDatesAfter,
      disableSpecificDates,
      weekStartsOn = 0,
      dayAccessibilityLabelPrefix,
      onMonthChange,
      onChange = noop
    }) {
      let i18n = hooks.useI18n(), [hoverDate, setHoverDate] = React2.useState(void 0), [focusDate, setFocusDate] = React2.useState(void 0);
      React2.useEffect(() => {
        setFocusDate(void 0);
      }, [selected]);
      let handleFocus = React2.useCallback((date) => {
        setFocusDate(date);
      }, []), setFocusDateAndHandleMonthChange = React2.useCallback((date) => {
        onMonthChange && onMonthChange(date.getMonth(), date.getFullYear()), setHoverDate(date), setFocusDate(date);
      }, [onMonthChange]), handleDateSelection = React2.useCallback((range) => {
        let {
          end
        } = range;
        setHoverDate(end), setFocusDate(new Date(end)), onChange(range);
      }, [onChange]), handleMonthChangeClick = React2.useCallback((month2, year2) => {
        onMonthChange && (setFocusDate(void 0), onMonthChange(month2, year2));
      }, [onMonthChange]), handleHover = React2.useCallback((date) => {
        setHoverDate(date);
      }, []), handleKeyUp = React2.useCallback((event) => {
        let {
          key
        } = event, range = deriveRange(selected), focusedDate = focusDate || range && range.start;
        if (focusedDate != null) {
          if (key === "ArrowUp") {
            let previousWeek = new Date(focusedDate);
            previousWeek.setDate(focusedDate.getDate() - 7), disableDatesBefore && dates.isDateBefore(previousWeek, disableDatesBefore) || disableSpecificDates && dates.isDateDisabled(previousWeek, disableSpecificDates) || setFocusDateAndHandleMonthChange(previousWeek);
          }
          if (key === "ArrowDown") {
            let nextWeek = new Date(focusedDate);
            nextWeek.setDate(focusedDate.getDate() + 7), disableDatesAfter && dates.isDateAfter(nextWeek, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(nextWeek, disableSpecificDates) || setFocusDateAndHandleMonthChange(nextWeek);
          }
          if (key === "ArrowRight") {
            let tomorrow = new Date(focusedDate);
            tomorrow.setDate(focusedDate.getDate() + 1), disableDatesAfter && dates.isDateAfter(tomorrow, disableDatesAfter) || disableSpecificDates && dates.isDateDisabled(tomorrow, disableSpecificDates) || setFocusDateAndHandleMonthChange(tomorrow);
          }
          if (key === "ArrowLeft") {
            let yesterday = new Date(focusedDate);
            yesterday.setDate(focusedDate.getDate() - 1), disableDatesBefore && dates.isDateBefore(yesterday, disableDatesBefore) || disableSpecificDates && dates.isDateDisabled(yesterday, disableSpecificDates) || setFocusDateAndHandleMonthChange(yesterday);
          }
        }
      }, [disableDatesAfter, disableDatesBefore, disableSpecificDates, focusDate, selected, setFocusDateAndHandleMonthChange]), showNextYear = dates.getNextDisplayYear(month, year), showNextMonth = dates.getNextDisplayMonth(month), showNextToNextYear = dates.getNextDisplayYear(showNextMonth, showNextYear), showNextToNextMonth = dates.getNextDisplayMonth(showNextMonth), showPreviousYear = dates.getPreviousDisplayYear(month, year), showPreviousMonth = dates.getPreviousDisplayMonth(month), previousMonthName = i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showPreviousMonth)}`), nextMonth = multiMonth ? i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showNextToNextMonth)}`) : i18n.translate(`Polaris.DatePicker.months.${utilities.monthName(showNextMonth)}`), nextYear = multiMonth ? showNextToNextYear : showNextYear, monthIsSelected = React2.useMemo(() => deriveRange(selected), [selected]), firstDatePickerAccessibilityLabelPrefix = allowRange ? i18n.translate("Polaris.DatePicker.start") : dayAccessibilityLabelPrefix, secondDatePickerAccessibilityLabelPrefix = i18n.translate("Polaris.DatePicker.end"), accessibilityLabelPrefixes = [firstDatePickerAccessibilityLabelPrefix, secondDatePickerAccessibilityLabelPrefix], secondDatePicker = multiMonth ? /* @__PURE__ */ React2.createElement(Month.Month, {
        onFocus: handleFocus,
        focusedDate: focusDate,
        month: showNextMonth,
        year: showNextYear,
        selected: monthIsSelected,
        hoverDate,
        onChange: handleDateSelection,
        onHover: handleHover,
        disableDatesBefore,
        disableDatesAfter,
        disableSpecificDates,
        allowRange,
        weekStartsOn,
        accessibilityLabelPrefixes
      }) : null, datePickerClassName = css.classNames(DatePicker_module.default.DatePicker);
      return /* @__PURE__ */ React2.createElement("div", {
        id,
        className: datePickerClassName,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp
      }, /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.Header
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "tertiary",
        icon: polarisIcons.ArrowLeftIcon,
        accessibilityLabel: i18n.translate("Polaris.DatePicker.previousMonth", {
          previousMonthName,
          showPreviousYear
        }),
        onClick: () => handleMonthChangeClick(showPreviousMonth, showPreviousYear)
      }), /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "tertiary",
        icon: polarisIcons.ArrowRightIcon,
        accessibilityLabel: i18n.translate("Polaris.DatePicker.nextMonth", {
          nextMonth,
          nextYear
        }),
        onClick: () => handleMonthChangeClick(showNextMonth, showNextYear)
      })), /* @__PURE__ */ React2.createElement("div", {
        className: DatePicker_module.default.MonthLayout
      }, /* @__PURE__ */ React2.createElement(Month.Month, {
        onFocus: handleFocus,
        focusedDate: focusDate,
        month,
        year,
        selected: deriveRange(selected),
        hoverDate,
        onChange: handleDateSelection,
        onHover: handleHover,
        disableDatesBefore,
        disableDatesAfter,
        disableSpecificDates,
        allowRange,
        weekStartsOn,
        accessibilityLabelPrefixes
      }), secondDatePicker));
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowUp" || key === "ArrowDown" || key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    function deriveRange(selected) {
      return selected instanceof Date ? {
        start: selected,
        end: selected
      } : selected;
    }
    exports.DatePicker = DatePicker;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.scss.js
var require_DescriptionList_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DescriptionList: "Polaris-DescriptionList",
      Term: "Polaris-DescriptionList__Term",
      spacingTight: "Polaris-DescriptionList--spacingTight",
      Description: "Polaris-DescriptionList__Description"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.js
var require_DescriptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DescriptionList/DescriptionList.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), DescriptionList_module = require_DescriptionList_scss(), Text2 = require_Text();
    function DescriptionList({
      items,
      gap = "loose"
    }) {
      let terms = items.reduce((allTerms, {
        term,
        description
      }, index) => [...allTerms, /* @__PURE__ */ React2.createElement("dt", {
        key: `dt${index}`,
        className: DescriptionList_module.default.Term
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "headingSm"
      }, term)), /* @__PURE__ */ React2.createElement("dd", {
        key: `dd${index}`,
        className: DescriptionList_module.default.Description
      }, description)], []), className = css.classNames(DescriptionList_module.default.DescriptionList, gap === "tight" && DescriptionList_module.default.spacingTight);
      return /* @__PURE__ */ React2.createElement("dl", {
        className
      }, terms);
    }
    exports.DescriptionList = DescriptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.scss.js
var require_Divider_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Divider: "Polaris-Divider"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.js
var require_Divider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Divider/Divider.js"(exports) {
    "use strict";
    var React2 = require("react"), Divider_module = require_Divider_scss(), Divider = ({
      borderColor = "border-secondary",
      borderWidth = "025"
    }) => {
      let borderColorValue = borderColor === "transparent" ? borderColor : `var(--p-color-${borderColor})`;
      return /* @__PURE__ */ React2.createElement("hr", {
        className: Divider_module.default.Divider,
        style: {
          borderBlockStart: `var(--p-border-width-${borderWidth}) solid ${borderColorValue}`
        }
      });
    };
    exports.Divider = Divider;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/capitalize.js"(exports) {
    "use strict";
    function capitalize(word = "") {
      let wordLower = word.toLowerCase();
      return wordLower.charAt(0).toUpperCase() + wordLower.slice(1);
    }
    exports.capitalize = capitalize;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/utils/index.js
var require_utils3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/utils/index.js"(exports) {
    "use strict";
    var dragEvents = ["dragover", "dragenter", "drop"];
    function fileAccepted(file, accept) {
      return file.type === "application/x-moz-file" || accepts(file, accept);
    }
    function getDataTransferFiles(event) {
      if (isDragEvent(event) && event.dataTransfer) {
        let dt = event.dataTransfer;
        if (dt.files && dt.files.length)
          return Array.from(dt.files);
        if (dt.items && dt.items.length)
          return Array.from(dt.items);
      } else if (isChangeEvent(event) && event.target.files)
        return Array.from(event.target.files);
      return [];
    }
    function accepts(file, acceptedFiles) {
      if (file && acceptedFiles) {
        let fileName = file.name || "", mimeType = file.type || "", baseMimeType = mimeType.replace(/\/.*$/, "");
        return (Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",")).some((type) => {
          let validType = type.trim();
          return validType.startsWith(".") ? fileName.toLowerCase().endsWith(validType.toLowerCase()) : validType.endsWith("/*") ? baseMimeType === validType.replace(/\/.*$/, "") : mimeType === validType;
        });
      }
      return !0;
    }
    function isDragEvent(event) {
      return dragEvents.indexOf(event.type) > 0;
    }
    function isChangeEvent(event) {
      return Object.prototype.hasOwnProperty.call(event, "target");
    }
    var defaultAllowMultiple = !0;
    function createAllowMultipleKey(allowMultiple) {
      return allowMultiple ? "allowMultiple" : "single";
    }
    exports.createAllowMultipleKey = createAllowMultipleKey;
    exports.defaultAllowMultiple = defaultAllowMultiple;
    exports.fileAccepted = fileAccepted;
    exports.getDataTransferFiles = getDataTransferFiles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/context.js
var require_context16 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/context.js"(exports) {
    "use strict";
    var React2 = require("react"), index = require_utils3(), DropZoneContext = /* @__PURE__ */ React2.createContext({
      disabled: !1,
      focused: !1,
      size: "extraLarge",
      type: "file",
      measuring: !1,
      allowMultiple: index.defaultAllowMultiple
    });
    exports.DropZoneContext = DropZoneContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.scss.js
var require_DropZone_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DropZone: "Polaris-DropZone",
      focused: "Polaris-DropZone--focused",
      hasOutline: "Polaris-DropZone--hasOutline",
      isDisabled: "Polaris-DropZone--isDisabled",
      isDragging: "Polaris-DropZone--isDragging",
      sizeLarge: "Polaris-DropZone--sizeLarge",
      sizeMedium: "Polaris-DropZone--sizeMedium",
      sizeSmall: "Polaris-DropZone--sizeSmall",
      measuring: "Polaris-DropZone--measuring",
      Container: "Polaris-DropZone__Container",
      Overlay: "Polaris-DropZone__Overlay",
      hasError: "Polaris-DropZone--hasError"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.scss.js
var require_FileUpload_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FileUpload: "Polaris-DropZone-FileUpload",
      large: "Polaris-DropZone-FileUpload--large",
      small: "Polaris-DropZone-FileUpload--small",
      Action: "Polaris-DropZone-FileUpload__Action",
      disabled: "Polaris-DropZone-FileUpload--disabled",
      ActionTitle: "Polaris-DropZone-FileUpload__ActionTitle",
      "ActionTitle-disabled": "Polaris-DropZone-FileUpload__ActionTitle--disabled",
      "ActionTitle-focused": "Polaris-DropZone-FileUpload__ActionTitle--focused",
      UploadIcon: "Polaris-DropZone-FileUpload__UploadIcon"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.js
var require_FileUpload = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/components/FileUpload/FileUpload.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), capitalize = require_capitalize(), context = require_context16(), index = require_utils3(), FileUpload_module = require_FileUpload_scss(), hooks = require_hooks2(), Icon = require_Icon(), BlockStack2 = require_BlockStack(), Text2 = require_Text();
    function FileUpload(props) {
      let i18n = hooks.useI18n(), {
        size,
        measuring,
        type,
        disabled,
        allowMultiple
      } = React2.useContext(context.DropZoneContext), typeSuffix = capitalize.capitalize(type), allowMultipleKey = index.createAllowMultipleKey(allowMultiple), {
        actionTitle = i18n.translate(`Polaris.DropZone.${allowMultipleKey}.actionTitle${typeSuffix}`),
        actionHint
      } = props, actionClassNames = css.classNames(FileUpload_module.default.Action, disabled && FileUpload_module.default.disabled), actionMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: actionClassNames
      }, actionTitle), fileUploadClassName = css.classNames(FileUpload_module.default.FileUpload, measuring && FileUpload_module.default.measuring, size === "large" && FileUpload_module.default.large, size === "small" && FileUpload_module.default.small), actionHintMarkup = actionHint && /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: "bodySm",
        as: "p",
        tone: "subdued"
      }, actionHint), viewMarkup;
      switch (size) {
        case "large":
          viewMarkup = /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
            inlineAlign: "center",
            gap: "200"
          }, actionMarkup, actionHintMarkup);
          break;
        case "medium":
          viewMarkup = /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
            inlineAlign: "center",
            gap: "200"
          }, actionMarkup, actionHintMarkup);
          break;
        case "small":
          viewMarkup = /* @__PURE__ */ React2.createElement("div", {
            className: css.classNames(FileUpload_module.default.UploadIcon, disabled && FileUpload_module.default.disabled)
          }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
            source: polarisIcons.UploadIcon
          }));
          break;
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: fileUploadClassName
      }, viewMarkup);
    }
    exports.FileUpload = FileUpload;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.js
var require_DropZone = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/DropZone/DropZone.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), debounce = require_debounce(), css = require_css(), capitalize = require_capitalize(), target = require_target(), useComponentDidMount = require_use_component_did_mount(), useToggle = require_use_toggle(), useEventListener = require_use_event_listener(), context = require_context16(), index = require_utils3(), DropZone_module = require_DropZone_scss(), FileUpload = require_FileUpload(), hooks = require_hooks2(), BlockStack2 = require_BlockStack(), Icon = require_Icon(), Text2 = require_Text(), Labelled = require_Labelled(), DropZone = function({
      dropOnPage,
      label,
      labelAction,
      labelHidden,
      children,
      disabled = !1,
      outline = !0,
      accept,
      active,
      overlay = !0,
      allowMultiple = index.defaultAllowMultiple,
      overlayText,
      errorOverlayText,
      id: idProp,
      type = "file",
      onClick,
      error,
      openFileDialog,
      variableHeight,
      onFileDialogClose,
      customValidator,
      onDrop,
      onDropAccepted,
      onDropRejected,
      onDragEnter,
      onDragOver,
      onDragLeave
    }) {
      let node = React2.useRef(null), inputRef = React2.useRef(null), dragTargets = React2.useRef([]), adjustSize = React2.useCallback(debounce.debounce(() => {
        if (!node.current)
          return;
        if (variableHeight) {
          setMeasuring(!1);
          return;
        }
        let size2 = "large", width = node.current.getBoundingClientRect().width;
        width < 100 ? size2 = "small" : width < 160 && (size2 = "medium"), setSize(size2), measuring && setMeasuring(!1);
      }, 50, {
        trailing: !0
      }), []), [dragging, setDragging] = React2.useState(!1), [internalError, setInternalError] = React2.useState(!1), {
        value: focused,
        setTrue: handleFocus,
        setFalse: handleBlur
      } = useToggle.useToggle(!1), [size, setSize] = React2.useState("large"), [measuring, setMeasuring] = React2.useState(!0), i18n = hooks.useI18n(), getValidatedFiles = React2.useCallback((files) => {
        let acceptedFiles = [], rejectedFiles = [];
        return Array.from(files).forEach((file) => {
          !index.fileAccepted(file, accept) || customValidator && !customValidator(file) ? rejectedFiles.push(file) : acceptedFiles.push(file);
        }), allowMultiple || (acceptedFiles.splice(1, acceptedFiles.length), rejectedFiles.push(...acceptedFiles.slice(1))), {
          files,
          acceptedFiles,
          rejectedFiles
        };
      }, [accept, allowMultiple, customValidator]), handleDrop = React2.useCallback((event) => {
        if (stopEvent(event), disabled)
          return;
        let fileList = index.getDataTransferFiles(event), {
          files,
          acceptedFiles,
          rejectedFiles
        } = getValidatedFiles(fileList);
        dragTargets.current = [], setDragging(!1), setInternalError(rejectedFiles.length > 0), onDrop && onDrop(files, acceptedFiles, rejectedFiles), onDropAccepted && acceptedFiles.length && onDropAccepted(acceptedFiles), onDropRejected && rejectedFiles.length && onDropRejected(rejectedFiles), event.target && "value" in event.target && (event.target.value = "");
      }, [disabled, getValidatedFiles, onDrop, onDropAccepted, onDropRejected]), handleDragEnter = React2.useCallback((event) => {
        if (stopEvent(event), disabled)
          return;
        let fileList = index.getDataTransferFiles(event);
        if (event.target && !dragTargets.current.includes(event.target) && dragTargets.current.push(event.target), dragging)
          return;
        let {
          rejectedFiles
        } = getValidatedFiles(fileList);
        setDragging(!0), setInternalError(rejectedFiles.length > 0), onDragEnter && onDragEnter();
      }, [disabled, dragging, getValidatedFiles, onDragEnter]), handleDragOver = React2.useCallback((event) => {
        stopEvent(event), !disabled && onDragOver && onDragOver();
      }, [disabled, onDragOver]), handleDragLeave = React2.useCallback((event) => {
        event.preventDefault(), !disabled && (dragTargets.current = dragTargets.current.filter((el) => {
          let compareNode = dropOnPage && !target.isServer ? document : node.current;
          return el !== event.target && compareNode && compareNode.contains(el);
        }), !(dragTargets.current.length > 0) && (setDragging(!1), setInternalError(!1), onDragLeave && onDragLeave()));
      }, [dropOnPage, disabled, onDragLeave]), dropNode = dropOnPage && !target.isServer ? document : node.current;
      useEventListener.useEventListener("drop", handleDrop, dropNode), useEventListener.useEventListener("dragover", handleDragOver, dropNode), useEventListener.useEventListener("dragenter", handleDragEnter, dropNode), useEventListener.useEventListener("dragleave", handleDragLeave, dropNode), useEventListener.useEventListener("resize", adjustSize, target.isServer ? null : window), useComponentDidMount.useComponentDidMount(() => {
        adjustSize();
      });
      let uniqId = React2.useId(), id = idProp ?? uniqId, typeSuffix = capitalize.capitalize(type), allowMultipleKey = index.createAllowMultipleKey(allowMultiple), overlayTextWithDefault = overlayText === void 0 ? i18n.translate(`Polaris.DropZone.${allowMultipleKey}.overlayText${typeSuffix}`) : overlayText, errorOverlayTextWithDefault = errorOverlayText === void 0 ? i18n.translate(`Polaris.DropZone.errorOverlayText${typeSuffix}`) : errorOverlayText, labelValue = label || i18n.translate(`Polaris.DropZone.${allowMultipleKey}.label${typeSuffix}`), labelHiddenValue = label ? labelHidden : !0, classes = css.classNames(DropZone_module.default.DropZone, outline && DropZone_module.default.hasOutline, focused && DropZone_module.default.focused, (active || dragging) && DropZone_module.default.isDragging, disabled && DropZone_module.default.isDisabled, (internalError || error) && DropZone_module.default.hasError, !variableHeight && DropZone_module.default[css.variationName("size", size)], measuring && DropZone_module.default.measuring), dragOverlay = (active || dragging) && !internalError && !error && overlay && overlayMarkup(polarisIcons.UploadIcon, overlayTextWithDefault), dragErrorOverlay = dragging && (internalError || error) && overlayMarkup(polarisIcons.AlertCircleIcon, errorOverlayTextWithDefault, "critical"), context$1 = React2.useMemo(() => ({
        disabled,
        focused,
        size,
        type: type || "file",
        measuring,
        allowMultiple
      }), [disabled, focused, measuring, size, type, allowMultiple]), open = React2.useCallback(() => {
        inputRef.current && inputRef.current.click();
      }, [inputRef]), triggerFileDialog = React2.useCallback(() => {
        open(), onFileDialogClose?.();
      }, [open, onFileDialogClose]);
      function overlayMarkup(icon, text, color) {
        return /* @__PURE__ */ React2.createElement("div", {
          className: DropZone_module.default.Overlay
        }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
          gap: "200",
          inlineAlign: "center"
        }, size === "small" && /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: icon,
          tone: color
        }), (size === "medium" || size === "large") && /* @__PURE__ */ React2.createElement(Text2.Text, {
          variant: "bodySm",
          as: "p",
          fontWeight: "bold"
        }, text)));
      }
      function handleClick(event) {
        if (!disabled)
          return onClick ? onClick(event) : open();
      }
      return React2.useEffect(() => {
        openFileDialog && triggerFileDialog();
      }, [openFileDialog, triggerFileDialog]), /* @__PURE__ */ React2.createElement(context.DropZoneContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label: labelValue,
        action: labelAction,
        labelHidden: labelHiddenValue
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: node,
        className: classes,
        "aria-disabled": disabled,
        onClick: handleClick,
        onDragStart: stopEvent
      }, dragOverlay, dragErrorOverlay, /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: "bodySm",
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("input", {
        id,
        accept,
        disabled,
        multiple: allowMultiple,
        onChange: handleDrop,
        onFocus: handleFocus,
        onBlur: handleBlur,
        type: "file",
        ref: inputRef,
        autoComplete: "off"
      })), /* @__PURE__ */ React2.createElement("div", {
        className: DropZone_module.default.Container
      }, children))));
    };
    function stopEvent(event) {
      event.preventDefault(), event.stopPropagation();
    }
    DropZone.FileUpload = FileUpload.FileUpload;
    exports.DropZone = DropZone;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/illustrations/empty-search.svg.js
var require_empty_search_svg = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/illustrations/empty-search.svg.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var img = "data:image/svg+xml,%3csvg width='60' height='60' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' d='M41.87 24a17.87 17.87 0 11-35.74 0 17.87 17.87 0 0135.74 0zm-3.15 18.96a24 24 0 114.24-4.24L59.04 54.8a3 3 0 11-4.24 4.24L38.72 42.96z' fill='%238C9196'/%3e%3c/svg%3e", emptySearch = img;
    exports.default = emptySearch;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/EmptySearchResult.js
var require_EmptySearchResult = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptySearchResult/EmptySearchResult.js"(exports) {
    "use strict";
    var React2 = require("react"), emptySearch = require_empty_search_svg(), hooks = require_hooks2(), LegacyStack = require_LegacyStack(), Text2 = require_Text(), Image = require_Image();
    function EmptySearchResult({
      title,
      description,
      withIllustration
    }) {
      let altText = hooks.useI18n().translate("Polaris.EmptySearchResult.altText"), descriptionMarkup = description ? /* @__PURE__ */ React2.createElement("p", null, description) : null, illustrationMarkup = withIllustration ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: altText,
        source: emptySearch.default,
        draggable: !1
      }) : null;
      return /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "center",
        vertical: !0
      }, illustrationMarkup, /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: "headingLg",
        as: "p"
      }, title), /* @__PURE__ */ React2.createElement(Text2.Text, {
        tone: "subdued",
        as: "span"
      }, descriptionMarkup));
    }
    exports.EmptySearchResult = EmptySearchResult;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.scss.js
var require_EmptyState_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      imageContained: "Polaris-EmptyState--imageContained"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.js
var require_EmptyState = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/EmptyState/EmptyState.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), EmptyState_module = require_EmptyState_scss(), utils = require_utils(), Box = require_Box(), BlockStack2 = require_BlockStack(), Image = require_Image(), Text2 = require_Text(), InlineStack = require_InlineStack();
    function EmptyState({
      children,
      heading,
      image,
      largeImage,
      imageContained,
      fullWidth = !1,
      action,
      secondaryAction,
      footerContent
    }) {
      let imageContainedClass = css.classNames(imageContained && EmptyState_module.default.imageContained), imageMarkup = largeImage ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt: "",
        role: "presentation",
        source: largeImage,
        className: imageContainedClass,
        sourceSet: [{
          source: image,
          descriptor: "568w"
        }, {
          source: largeImage,
          descriptor: "1136w"
        }],
        sizes: "(max-width: 568px) 60vw"
      }) : /* @__PURE__ */ React2.createElement(Image.Image, {
        className: imageContainedClass,
        role: "presentation",
        alt: "",
        source: image
      }), secondaryActionMarkup = secondaryAction ? utils.buttonFrom(secondaryAction, {}) : null, footerContentMarkup = footerContent ? /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockStart: "400"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        alignment: "center",
        variant: "bodySm"
      }, footerContent)) : null, primaryActionMarkup = action ? utils.buttonFrom(action, {
        variant: "primary",
        size: "medium"
      }) : null, headingMarkup = heading ? /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockEnd: "150"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: "headingMd",
        as: "p",
        alignment: "center"
      }, heading)) : null, childrenMarkup = children ? /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        alignment: "center",
        variant: "bodySm"
      }, children) : null, textContentMarkup = headingMarkup || children ? /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockEnd: "400"
      }, headingMarkup, childrenMarkup) : null, actionsMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "center",
        gap: "200"
      }, secondaryActionMarkup, primaryActionMarkup) : null, detailsMarkup = textContentMarkup || actionsMarkup || footerContentMarkup ? /* @__PURE__ */ React2.createElement(Box.Box, {
        maxWidth: fullWidth ? "100%" : "400px"
      }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        inlineAlign: "center"
      }, textContentMarkup, actionsMarkup, footerContentMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingInlineStart: "0",
        paddingInlineEnd: "0",
        paddingBlockStart: "500",
        paddingBlockEnd: "1600"
      }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        inlineAlign: "center"
      }, imageMarkup, detailsMarkup));
    }
    exports.EmptyState = EmptyState;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.scss.js
var require_ExceptionList_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ExceptionList: "Polaris-ExceptionList",
      Item: "Polaris-ExceptionList__Item",
      Icon: "Polaris-ExceptionList__Icon",
      statusWarning: "Polaris-ExceptionList--statusWarning",
      statusCritical: "Polaris-ExceptionList--statusCritical",
      Bullet: "Polaris-ExceptionList__Bullet",
      Title: "Polaris-ExceptionList__Title",
      Description: "Polaris-ExceptionList__Description"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.scss.js
var require_Truncate_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Truncate: "Polaris-Truncate"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.js
var require_Truncate = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Truncate/Truncate.js"(exports) {
    "use strict";
    var React2 = require("react"), Truncate_module = require_Truncate_scss();
    function Truncate({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("span", {
        className: Truncate_module.default.Truncate
      }, children);
    }
    exports.Truncate = Truncate;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.js
var require_ExceptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ExceptionList/ExceptionList.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), ExceptionList_module = require_ExceptionList_scss(), Truncate = require_Truncate(), Icon = require_Icon();
    function ExceptionList({
      items: itemsList
    }) {
      let items = itemsList.map((item, index) => {
        let {
          status,
          icon,
          title,
          description,
          truncate = !1
        } = item, itemClasses = css.classNames(ExceptionList_module.default.Item, status && ExceptionList_module.default[css.variationName("status", status)]), iconMarkup = icon ? /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: icon
        }) : /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Bullet
        }), titleMarkup = title && /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Title
        }, title), descriptionMarkup = description && /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Description
        }, description), Element2 = truncate ? Truncate.Truncate : React2.Fragment;
        return /* @__PURE__ */ React2.createElement("li", {
          className: itemClasses,
          key: index
        }, /* @__PURE__ */ React2.createElement("span", {
          className: ExceptionList_module.default.Icon
        }, iconMarkup), /* @__PURE__ */ React2.createElement(Element2, null, titleMarkup, descriptionMarkup));
      });
      return /* @__PURE__ */ React2.createElement("ul", {
        className: ExceptionList_module.default.ExceptionList
      }, items);
    }
    exports.ExceptionList = ExceptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.scss.js
var require_Filters_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-Filters__Container",
      SearchField: "Polaris-Filters__SearchField",
      FiltersWrapper: "Polaris-Filters__FiltersWrapper",
      hideQueryField: "Polaris-Filters--hideQueryField",
      FiltersInner: "Polaris-Filters__FiltersInner",
      AddFilter: "Polaris-Filters__AddFilter",
      FiltersWrapperWithAddButton: "Polaris-Filters__FiltersWrapperWithAddButton",
      AddFilterActivatorMultiple: "Polaris-Filters__AddFilterActivatorMultiple",
      FiltersStickyArea: "Polaris-Filters__FiltersStickyArea",
      ClearAll: "Polaris-Filters__ClearAll",
      MultiplePinnedFilterClearAll: "Polaris-Filters__MultiplePinnedFilterClearAll"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/SearchField/SearchField.scss.js
var require_SearchField_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/SearchField/SearchField.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Spinner: "Polaris-Filters-SearchField__Spinner"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/SearchField/SearchField.js
var require_SearchField = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/SearchField/SearchField.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), breakpoints = require_breakpoints(), SearchField_module = require_SearchField_scss(), TextField2 = require_TextField(), Icon = require_Icon(), Spinner = require_Spinner();
    function SearchField({
      onChange,
      onClear,
      onFocus,
      onBlur,
      focused,
      value,
      placeholder,
      disabled,
      borderlessQueryField,
      loading
    }) {
      let id = React2.useId(), {
        mdUp
      } = breakpoints.useBreakpoints();
      function handleChange(value2) {
        onChange(value2);
      }
      function handleClear() {
        onClear ? onClear() : onChange("");
      }
      return /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        id,
        value,
        onChange: (eventValue) => handleChange(eventValue ?? value),
        onFocus,
        onBlur,
        onClearButtonClick: handleClear,
        autoComplete: "off",
        placeholder,
        disabled,
        variant: borderlessQueryField ? "borderless" : "inherit",
        size: "slim",
        prefix: mdUp ? /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: polarisIcons.SearchIcon
        }) : void 0,
        suffix: loading ? /* @__PURE__ */ React2.createElement("div", {
          className: SearchField_module.default.Spinner
        }, /* @__PURE__ */ React2.createElement(Spinner.Spinner, {
          size: "small"
        })) : null,
        focused,
        label: placeholder,
        labelHidden: !0,
        clearButton: !0
      });
    }
    exports.SearchField = SearchField;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-on-value-change.js
var require_use_on_value_change = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-on-value-change.js"(exports) {
    "use strict";
    var React2 = require("react");
    function useOnValueChange(value, onChange) {
      let tracked = React2.useRef(value);
      React2.useEffect(() => {
        let oldValue = tracked.current;
        value !== tracked.current && (tracked.current = value, onChange(value, oldValue));
      }, [value, onChange]);
    }
    exports.useOnValueChange = useOnValueChange;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.scss.js
var require_FilterPill_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FilterButton: "Polaris-Filters-FilterPill__FilterButton",
      focusedFilterButton: "Polaris-Filters-FilterPill--focusedFilterButton",
      ActiveFilterButton: "Polaris-Filters-FilterPill__ActiveFilterButton",
      PlainButton: "Polaris-Filters-FilterPill__PlainButton",
      ToggleButton: "Polaris-Filters-FilterPill__ToggleButton",
      Label: "Polaris-Filters-FilterPill__Label",
      clearButton: "Polaris-Filters-FilterPill--clearButton",
      IconWrapper: "Polaris-Filters-FilterPill__IconWrapper",
      PopoverWrapper: "Polaris-Filters-FilterPill__PopoverWrapper",
      ClearButtonWrapper: "Polaris-Filters-FilterPill__ClearButtonWrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.js
var require_FilterPill = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FilterPill/FilterPill.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), breakpoints = require_breakpoints(), css = require_css(), FilterPill_module = require_FilterPill_scss(), hooks = require_hooks2(), Text2 = require_Text(), InlineStack = require_InlineStack(), UnstyledButton = require_UnstyledButton(), Icon = require_Icon(), Button2 = require_Button(), Popover = require_Popover(), BlockStack2 = require_BlockStack();
    function FilterPill({
      filterKey,
      label,
      filter,
      disabled,
      hideClearButton,
      selected,
      initialActive,
      closeOnChildOverlayClick,
      onRemove,
      onClick
    }) {
      let i18n = hooks.useI18n(), {
        mdDown
      } = breakpoints.useBreakpoints(), elementRef = React2.useRef(null), {
        value: focused,
        setTrue: setFocusedTrue,
        setFalse: setFocusedFalse
      } = useToggle.useToggle(!1), [popoverActive, setPopoverActive] = React2.useState(initialActive);
      React2.useEffect(() => {
        let node = elementRef.current;
        if (!node || !popoverActive)
          return;
        let parent = node.parentElement?.parentElement;
        parent && parent.scroll?.({
          left: node.offsetLeft
        });
      }, [elementRef, popoverActive]);
      let togglePopoverActive = React2.useCallback(() => {
        filter && setPopoverActive((popoverActive2) => !popoverActive2), onClick && onClick(filterKey);
      }, [filter, filterKey, onClick]), handlePopoverClose = React2.useCallback(() => {
        togglePopoverActive(), selected || onRemove?.(filterKey);
      }, [onRemove, selected, filterKey, togglePopoverActive]), handleClear = () => {
        onRemove && onRemove(filterKey), setPopoverActive(!1);
      }, buttonClasses = css.classNames(FilterPill_module.default.FilterButton, selected && FilterPill_module.default.ActiveFilterButton, popoverActive && FilterPill_module.default.FocusFilterButton, focused && FilterPill_module.default.focusedFilterButton), clearButtonClassNames = css.classNames(FilterPill_module.default.PlainButton, FilterPill_module.default.clearButton), toggleButtonClassNames = css.classNames(FilterPill_module.default.PlainButton, FilterPill_module.default.ToggleButton), labelVariant = mdDown ? "bodyLg" : "bodySm", wrappedLabel = /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.Label
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: labelVariant,
        as: "span"
      }, label)), activator = /* @__PURE__ */ React2.createElement("div", {
        className: buttonClasses
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "0",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        onFocus: setFocusedTrue,
        onBlur: setFocusedFalse,
        onClick: togglePopoverActive,
        className: toggleButtonClassNames,
        type: "button"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        wrap: !1,
        align: "center",
        blockAlign: "center",
        gap: "0"
      }, selected ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, wrappedLabel) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, wrappedLabel, /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.ChevronDownIcon,
        tone: "base"
      }))))), selected ? /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        onClick: handleClear,
        className: clearButtonClassNames,
        type: "button",
        "aria-label": i18n.translate("Polaris.FilterPill.clear")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.XSmallIcon,
        tone: "base"
      }))) : null)), clearButtonMarkup = !hideClearButton && /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.ClearButtonWrapper
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        onClick: handleClear,
        variant: "plain",
        disabled: !selected,
        textAlign: "left"
      }, i18n.translate("Polaris.FilterPill.clear")));
      return disabled ? null : /* @__PURE__ */ React2.createElement("div", {
        ref: elementRef
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator,
        key: filterKey,
        onClose: handlePopoverClose,
        preferredAlignment: "left",
        preventCloseOnChildOverlayClick: !closeOnChildOverlayClick
      }, /* @__PURE__ */ React2.createElement("div", {
        className: FilterPill_module.default.PopoverWrapper
      }, /* @__PURE__ */ React2.createElement(Popover.Popover.Section, null, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "100"
      }, filter, clearButtonMarkup)))));
    }
    exports.FilterPill = FilterPill;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/components/FiltersBar/FiltersBar.js
var require_FiltersBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/components/FiltersBar/FiltersBar.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), useOnValueChange = require_use_on_value_change(), css = require_css(), breakpoints = require_breakpoints(), Filters_module = require_Filters_scss(), FilterPill = require_FilterPill(), hooks = require_hooks2(), UnstyledButton = require_UnstyledButton(), Text2 = require_Text(), Popover = require_Popover(), ActionList = require_ActionList(), Button2 = require_Button(), Box = require_Box(), InlineStack = require_InlineStack();
    function FiltersBar({
      filters,
      appliedFilters,
      onClearAll,
      disabled,
      hideQueryField,
      disableFilters,
      mountedStateStyles,
      onAddFilterClick,
      closeOnChildOverlayClick,
      children
    }) {
      let i18n = hooks.useI18n(), {
        mdDown
      } = breakpoints.useBreakpoints(), [popoverActive, setPopoverActive] = React2.useState(!1), hasMounted = React2.useRef(!1);
      React2.useEffect(() => {
        hasMounted.current = !0;
      });
      let togglePopoverActive = () => setPopoverActive((popoverActive2) => !popoverActive2), handleAddFilterClick = () => {
        onAddFilterClick?.(), togglePopoverActive();
      }, appliedFilterKeys = appliedFilters?.map(({
        key
      }) => key), pinnedFromPropsKeys = filters.filter(({
        pinned
      }) => pinned).map(({
        key
      }) => key), pinnedFiltersFromPropsAndAppliedFilters = filters.filter(({
        pinned,
        key
      }) => Boolean(pinned) || appliedFilterKeys?.includes(key)), [localPinnedFilters, setLocalPinnedFilters] = React2.useState(pinnedFiltersFromPropsAndAppliedFilters.map(({
        key
      }) => key));
      useOnValueChange.useOnValueChange(filters.length, () => {
        setLocalPinnedFilters(pinnedFiltersFromPropsAndAppliedFilters.map(({
          key
        }) => key));
      });
      let pinnedFilters = localPinnedFilters.map((key) => filters.find((filter) => filter.key === key)).reduce((acc, filter) => filter ? [...acc, filter] : acc, []), onFilterClick = ({
        key,
        onAction
      }) => () => {
        setTimeout(() => {
          setLocalPinnedFilters((currentLocalPinnedFilters) => [.../* @__PURE__ */ new Set([...currentLocalPinnedFilters, key])]), onAction?.(), togglePopoverActive();
        }, 0);
      }, filterToActionItem = (filter) => ({
        ...filter,
        content: filter.label,
        onAction: onFilterClick(filter)
      }), unpinnedFilters = filters.filter((filter) => !pinnedFilters.some(({
        key
      }) => key === filter.key)), unsectionedFilters = unpinnedFilters.filter((filter) => !filter.section && !filter.hidden).map(filterToActionItem), sectionedFilters = unpinnedFilters.filter((filter) => filter.section).reduce((acc, filter) => {
        let filterActionItem = filterToActionItem(filter), sectionIndex = acc.findIndex((section) => section.title === filter.section);
        return sectionIndex === -1 ? acc.push({
          title: filter.section,
          items: [filterActionItem]
        }) : acc[sectionIndex].items.push(filterActionItem), acc;
      }, []), hasOneOrMorePinnedFilters = pinnedFilters.length >= 1, labelVariant = mdDown ? "bodyMd" : "bodySm", addFilterActivator = /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        type: "button",
        className: Filters_module.default.AddFilter,
        onClick: handleAddFilterClick,
        "aria-label": i18n.translate("Polaris.Filters.addFilter"),
        disabled: disabled || unsectionedFilters.length === 0 && sectionedFilters.length === 0 || disableFilters
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: labelVariant,
        as: "span"
      }, i18n.translate("Polaris.Filters.addFilter"), " "), /* @__PURE__ */ React2.createElement(polarisIcons.PlusIcon, null))), handleClearAllFilters = () => {
        setLocalPinnedFilters(pinnedFromPropsKeys), onClearAll?.();
      }, shouldShowAddButton = filters.some((filter) => !filter.pinned) || filters.length !== localPinnedFilters.length, pinnedFiltersMarkup = pinnedFilters.map(({
        key: filterKey,
        ...pinnedFilter
      }) => {
        let appliedFilter = appliedFilters?.find(({
          key
        }) => key === filterKey), handleFilterPillRemove = () => {
          setLocalPinnedFilters((currentLocalPinnedFilters) => currentLocalPinnedFilters.filter((key) => {
            let isMatchedFilters = key === filterKey, isPinnedFilterFromProps = pinnedFromPropsKeys.includes(key);
            return !isMatchedFilters || isPinnedFilterFromProps;
          })), appliedFilter?.onRemove(filterKey);
        };
        return /* @__PURE__ */ React2.createElement(FilterPill.FilterPill, Object.assign({
          key: filterKey
        }, pinnedFilter, {
          initialActive: hasMounted.current && !pinnedFilter.pinned && !appliedFilter,
          label: appliedFilter?.label || pinnedFilter.label,
          filterKey,
          selected: appliedFilterKeys?.includes(filterKey),
          onRemove: handleFilterPillRemove,
          disabled: pinnedFilter.disabled || disableFilters,
          closeOnChildOverlayClick
        }));
      }), addButton = shouldShowAddButton ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.AddFilterActivator, hasOneOrMorePinnedFilters && Filters_module.default.AddFilterActivatorMultiple)
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive && !disabled,
        activator: addFilterActivator,
        onClose: togglePopoverActive
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        items: unsectionedFilters,
        sections: sectionedFilters
      }))) : null, clearAllMarkup = appliedFilters?.length ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.ClearAll, hasOneOrMorePinnedFilters && shouldShowAddButton && Filters_module.default.MultiplePinnedFilterClearAll)
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        size: "micro",
        onClick: handleClearAllFilters,
        removeUnderline: !0,
        variant: "monochromePlain"
      }, i18n.translate("Polaris.Filters.clearFilters"))) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersWrapper, shouldShowAddButton && hasOneOrMorePinnedFilters && Filters_module.default.FiltersWrapperWithAddButton),
        "aria-live": "polite",
        style: mountedStateStyles
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersInner)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.FiltersStickyArea)
      }, pinnedFiltersMarkup, addButton, clearAllMarkup)), hideQueryField ? /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "400",
          md: "300"
        }
      }, children)) : null);
    }
    exports.FiltersBar = FiltersBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.js
var require_Filters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Filters/Filters.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Filters_module = require_Filters_scss(), SearchField = require_SearchField(), FiltersBar = require_FiltersBar(), Box = require_Box(), InlineStack = require_InlineStack(), TRANSITION_DURATION = "var(--p-motion-duration-150)", TRANSITION_MARGIN = "-36px", defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0
    }, transitionStyles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      },
      unmounted: {
        opacity: 0
      }
    }, defaultFilterStyles = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease), margin ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    }, transitionFilterStyles = {
      entering: {
        opacity: 1,
        marginTop: 0
      },
      entered: {
        opacity: 1,
        marginTop: 0
      },
      exiting: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      exited: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      unmounted: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      }
    };
    function Filters({
      queryValue,
      queryPlaceholder,
      focused,
      filters,
      appliedFilters,
      onQueryChange,
      onQueryClear,
      onQueryBlur,
      onQueryFocus,
      onClearAll,
      children,
      disabled,
      hideFilters,
      hideQueryField,
      disableQueryField,
      borderlessQueryField,
      loading,
      disableFilters,
      mountedState,
      onAddFilterClick,
      closeOnChildOverlayClick
    }) {
      let hideFilterBar = hideFilters || filters.length === 0, queryFieldMarkup = hideQueryField ? null : /* @__PURE__ */ React2.createElement("div", {
        className: Filters_module.default.Container
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        padding: hideFilterBar ? "300" : "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "400",
          md: "300"
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Filters_module.default.SearchField,
        style: mountedState ? {
          ...defaultStyle,
          ...transitionStyles[mountedState]
        } : void 0
      }, /* @__PURE__ */ React2.createElement(SearchField.SearchField, {
        onChange: onQueryChange,
        onFocus: onQueryFocus,
        onBlur: onQueryBlur,
        onClear: onQueryClear,
        value: queryValue,
        placeholder: queryPlaceholder,
        focused,
        disabled: disabled || disableQueryField,
        borderlessQueryField,
        loading
      })), children))), mountedStateStyles = mountedState && !hideQueryField ? {
        ...defaultFilterStyles,
        ...transitionFilterStyles[mountedState]
      } : void 0, filtersMarkup = hideFilterBar ? null : /* @__PURE__ */ React2.createElement(FiltersBar.FiltersBar, {
        filters,
        appliedFilters,
        onClearAll,
        disabled,
        hideQueryField,
        disableFilters,
        onAddFilterClick,
        closeOnChildOverlayClick,
        mountedStateStyles
      }, children);
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Filters_module.default.Filters, hideQueryField && Filters_module.default.hideQueryField)
      }, queryFieldMarkup, filtersMarkup);
    }
    exports.Filters = Filters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Focus/Focus.js
var require_Focus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Focus/Focus.js"(exports) {
    "use strict";
    var React2 = require("react"), focus = require_focus(), Focus = /* @__PURE__ */ React2.memo(function({
      children,
      disabled,
      root
    }) {
      return React2.useEffect(() => {
        if (disabled || !root)
          return;
        let node = isRef(root) ? root.current : root;
        !node || node.querySelector("[autofocus]") || focus.focusFirstFocusableNode(node, !1);
      }, [disabled, root]), /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
    });
    function isRef(ref) {
      return ref.current !== void 0;
    }
    exports.Focus = Focus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.scss.js
var require_FooterHelp_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FooterHelp: "Polaris-FooterHelp",
      Text: "Polaris-FooterHelp__Text"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.js
var require_FooterHelp = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FooterHelp/FooterHelp.js"(exports) {
    "use strict";
    var React2 = require("react"), FooterHelp_module = require_FooterHelp_scss();
    function FooterHelp({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: FooterHelp_module.default.FooterHelp
      }, /* @__PURE__ */ React2.createElement("div", {
        className: FooterHelp_module.default.Text
      }, children));
    }
    exports.FooterHelp = FooterHelp;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Form/Form.js
var require_Form = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Form/Form.js"(exports) {
    "use strict";
    var React2 = require("react"), hooks = require_hooks2(), Text2 = require_Text();
    function Form({
      acceptCharset,
      action,
      autoComplete,
      children,
      encType,
      implicitSubmit = !0,
      method = "post",
      name,
      noValidate,
      preventDefault = !0,
      target,
      onSubmit
    }) {
      let i18n = hooks.useI18n(), handleSubmit = React2.useCallback((event) => {
        preventDefault && (event.preventDefault(), onSubmit(event));
      }, [onSubmit, preventDefault]), autoCompleteInputs = normalizeAutoComplete(autoComplete), submitMarkup = implicitSubmit ? /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("button", {
        type: "submit",
        "aria-hidden": "true",
        tabIndex: -1
      }, i18n.translate("Polaris.Common.submit"))) : null;
      return /* @__PURE__ */ React2.createElement("form", {
        acceptCharset,
        action,
        autoComplete: autoCompleteInputs,
        encType,
        method,
        name,
        noValidate,
        target,
        onSubmit: handleSubmit
      }, submitMarkup, children);
    }
    function normalizeAutoComplete(autoComplete) {
      return autoComplete == null ? autoComplete : autoComplete ? "on" : "off";
    }
    exports.Form = Form;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.scss.js
var require_FormLayout_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Item: "Polaris-FormLayout__Item",
      grouped: "Polaris-FormLayout--grouped",
      condensed: "Polaris-FormLayout--condensed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Item/Item.js
var require_Item5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), FormLayout_module = require_FormLayout_scss();
    function Item({
      children,
      condensed = !1
    }) {
      let className = css.classNames(FormLayout_module.default.Item, condensed ? FormLayout_module.default.condensed : FormLayout_module.default.grouped);
      return children ? /* @__PURE__ */ React2.createElement("div", {
        className
      }, children) : null;
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Group/Group.js
var require_Group = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/components/Group/Group.js"(exports) {
    "use strict";
    var React2 = require("react"), components = require_components(), Item = require_Item5(), BlockStack2 = require_BlockStack(), InlineStack = require_InlineStack(), Box = require_Box(), Text2 = require_Text();
    function Group({
      children,
      condensed,
      title,
      helpText
    }) {
      let id = React2.useId(), helpTextElement = null, helpTextId, titleElement = null, titleId;
      helpText && (helpTextId = `${id}HelpText`, helpTextElement = /* @__PURE__ */ React2.createElement(Box.Box, {
        id: helpTextId,
        color: "text-secondary"
      }, helpText)), title && (titleId = `${id}Title`, titleElement = /* @__PURE__ */ React2.createElement(Text2.Text, {
        id: titleId,
        as: "p"
      }, title));
      let itemsMarkup = React2.Children.map(children, (child) => components.wrapWithComponent(child, Item.Item, {
        condensed
      }));
      return /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        role: "group",
        gap: "200",
        "aria-labelledby": titleId,
        "aria-describedby": helpTextId
      }, titleElement, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "300"
      }, itemsMarkup), helpTextElement);
    }
    exports.Group = Group;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.js
var require_FormLayout = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FormLayout/FormLayout.js"(exports) {
    "use strict";
    var React2 = require("react"), components = require_components(), Group = require_Group(), BlockStack2 = require_BlockStack(), Item = require_Item5(), FormLayout2 = /* @__PURE__ */ React2.memo(function({
      children
    }) {
      return /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "400"
      }, React2.Children.map(children, wrapChildren));
    });
    FormLayout2.Group = Group.Group;
    function wrapChildren(child, index) {
      if (components.isElementOfType(child, Group.Group))
        return child;
      let props = {
        key: index
      };
      return components.wrapWithComponent(child, Item.Item, props);
    }
    exports.FormLayout = FormLayout2;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/set-root-property.js
var require_set_root_property = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/set-root-property.js"(exports) {
    "use strict";
    function setRootProperty(name, value, node) {
      if (!document)
        return;
      (node || document.documentElement).style.setProperty(name, value);
    }
    exports.setRootProperty = setRootProperty;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.scss.js
var require_Frame_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Frame: "Polaris-Frame",
      Navigation: "Polaris-Frame__Navigation",
      hasTopBar: "Polaris-Frame--hasTopBar",
      "Navigation-enter": "Polaris-Frame__Navigation--enter",
      "Navigation-enterActive": "Polaris-Frame__Navigation--enterActive",
      "Navigation-exit": "Polaris-Frame__Navigation--exit",
      "Navigation-exitActive": "Polaris-Frame__Navigation--exitActive",
      NavigationDismiss: "Polaris-Frame__NavigationDismiss",
      "Navigation-visible": "Polaris-Frame__Navigation--visible",
      TopBar: "Polaris-Frame__TopBar",
      ContextualSaveBar: "Polaris-Frame__ContextualSaveBar",
      Main: "Polaris-Frame__Main",
      hasNav: "Polaris-Frame--hasNav",
      Content: "Polaris-Frame__Content",
      hasSidebar: "Polaris-Frame--hasSidebar",
      GlobalRibbonContainer: "Polaris-Frame__GlobalRibbonContainer",
      LoadingBar: "Polaris-Frame__LoadingBar",
      Skip: "Polaris-Frame__Skip",
      focused: "Polaris-Frame--focused",
      pressed: "Polaris-Frame--pressed"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/media-query/hooks.js
var require_hooks11 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/media-query/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context6();
    function useMediaQuery() {
      let mediaQuery = React2.useContext(context.MediaQueryContext);
      if (!mediaQuery)
        throw new Error("No mediaQuery was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
      return mediaQuery;
    }
    exports.useMediaQuery = useMediaQuery;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-mounted-ref.js
var require_use_is_mounted_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-mounted-ref.js"(exports) {
    "use strict";
    var React2 = require("react");
    function useIsMountedRef() {
      let isMounted = React2.useRef(!1);
      return React2.useEffect(() => (isMounted.current = !0, () => {
        isMounted.current = !1;
      }), []), isMounted;
    }
    exports.useIsMountedRef = useIsMountedRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.scss.js
var require_Loading_scss2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Loading: "Polaris-Frame-Loading",
      Level: "Polaris-Frame-Loading__Level"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.js
var require_Loading2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsMountedRef = require_use_is_mounted_ref(), Loading_module = require_Loading_scss2(), hooks = require_hooks2(), STUCK_THRESHOLD = 99;
    function Loading() {
      let i18n = hooks.useI18n(), isMountedRef = useIsMountedRef.useIsMountedRef(), [progress, setProgress] = React2.useState(0), [animating, setAnimating] = React2.useState(!1);
      React2.useEffect(() => {
        progress >= STUCK_THRESHOLD || animating || requestAnimationFrame(() => {
          if (!isMountedRef.current)
            return;
          let step = Math.max((STUCK_THRESHOLD - progress) / 10, 1);
          setAnimating(!0), setProgress(progress + step);
        });
      }, [progress, animating, isMountedRef]);
      let customStyles = {
        transform: `scaleX(${Math.floor(progress) / 100})`
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Loading,
        "aria-valuenow": progress,
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        role: "progressbar",
        "aria-label": i18n.translate("Polaris.Loading.label")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Loading_module.default.Level,
        style: customStyles,
        onTransitionEnd: () => setAnimating(!1)
      }));
    }
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.scss.js
var require_CSSAnimation_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      startFade: "Polaris-Frame-CSSAnimation--startFade",
      endFade: "Polaris-Frame-CSSAnimation--endFade"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.js
var require_CSSAnimation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/CSSAnimation/CSSAnimation.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), CSSAnimation_module = require_CSSAnimation_scss(), TransitionStatus;
    (function(TransitionStatus2) {
      TransitionStatus2.Entering = "entering", TransitionStatus2.Entered = "entered", TransitionStatus2.Exiting = "exiting", TransitionStatus2.Exited = "exited";
    })(TransitionStatus || (TransitionStatus = {}));
    function CSSAnimation({
      in: inProp,
      className,
      type,
      children
    }) {
      let [transitionStatus, setTransitionStatus] = React2.useState(inProp ? TransitionStatus.Entering : TransitionStatus.Exited), isMounted = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        isMounted.current && transitionStatus === TransitionStatus.Entering && changeTransitionStatus(TransitionStatus.Entered);
      }, [transitionStatus]), React2.useEffect(() => {
        isMounted.current && (inProp && changeTransitionStatus(TransitionStatus.Entering), !inProp && changeTransitionStatus(TransitionStatus.Exiting));
      }, [inProp]), React2.useEffect(() => {
        isMounted.current = !0;
      }, []);
      let wrapperClassName = css.classNames(className, CSSAnimation_module.default[css.variationName("start", type)], inProp && CSSAnimation_module.default[css.variationName("end", type)]), content = transitionStatus === TransitionStatus.Exited && !inProp ? null : children;
      return /* @__PURE__ */ React2.createElement("div", {
        className: wrapperClassName,
        ref: node,
        onTransitionEnd: handleTransitionEnd
      }, content);
      function handleTransitionEnd() {
        transitionStatus === TransitionStatus.Exiting && changeTransitionStatus(TransitionStatus.Exited);
      }
      function changeTransitionStatus(transitionStatus2) {
        setTransitionStatus(transitionStatus2), transitionStatus2 === TransitionStatus.Entering && node.current && node.current.getBoundingClientRect();
      }
    }
    exports.CSSAnimation = CSSAnimation;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/pluck-deep.js
var require_pluck_deep = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/pluck-deep.js"(exports) {
    "use strict";
    var isObject = require_is_object();
    function pluckDeep(obj, key) {
      if (!obj)
        return null;
      let keys = Object.keys(obj);
      for (let currKey of keys) {
        if (currKey === key)
          return obj[key];
        if (isObject.isObject(obj[currKey])) {
          let plucked = pluckDeep(obj[currKey], key);
          if (plucked)
            return plucked;
        }
      }
      return null;
    }
    exports.pluckDeep = pluckDeep;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/get-width.js
var require_get_width = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/get-width.js"(exports) {
    "use strict";
    var pluckDeep = require_pluck_deep();
    function getWidth(value = {}, defaultWidth = 0, key = "width") {
      let width = typeof value == "number" ? value : pluckDeep.pluckDeep(value, key);
      return width ? `${width}px` : `${defaultWidth}px`;
    }
    exports.getWidth = getWidth;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.scss.js
var require_ContextualSaveBar_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ContextualSaveBar: "Polaris-Frame-ContextualSaveBar",
      LogoContainer: "Polaris-Frame-ContextualSaveBar__LogoContainer",
      ContextControl: "Polaris-Frame-ContextualSaveBar__ContextControl",
      Contents: "Polaris-Frame-ContextualSaveBar__Contents",
      fullWidth: "Polaris-Frame-ContextualSaveBar--fullWidth",
      MessageContainer: "Polaris-Frame-ContextualSaveBar__MessageContainer",
      ActionContainer: "Polaris-Frame-ContextualSaveBar__ActionContainer",
      Action: "Polaris-Frame-ContextualSaveBar__Action"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.scss.js
var require_Modal_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Body: "Polaris-Modal__Body",
      IFrame: "Polaris-Modal__IFrame"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.scss.js
var require_Section_scss2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Section: "Polaris-Modal-Section",
      titleHidden: "Polaris-Modal-Section--titleHidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.js
var require_Section5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Section_module = require_Section_scss2(), Box = require_Box();
    function Section({
      children,
      flush = !1,
      subdued = !1,
      titleHidden = !1
    }) {
      let className = css.classNames(Section_module.default.Section, titleHidden && Section_module.default.titleHidden);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement(Box.Box, Object.assign({
        as: "section",
        padding: flush ? "0" : "400"
      }, titleHidden && {
        paddingInlineEnd: "0"
      }, subdued && {
        background: "bg-surface-tertiary"
      }), children));
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.scss.js
var require_Dialog_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-Modal-Dialog__Container",
      Dialog: "Polaris-Modal-Dialog",
      Modal: "Polaris-Modal-Dialog__Modal",
      limitHeight: "Polaris-Modal-Dialog--limitHeight",
      sizeSmall: "Polaris-Modal-Dialog--sizeSmall",
      sizeLarge: "Polaris-Modal-Dialog--sizeLarge",
      sizeFullScreen: "Polaris-Modal-Dialog--sizeFullScreen",
      animateFadeUp: "Polaris-Modal-Dialog--animateFadeUp",
      entering: "Polaris-Modal-Dialog--entering",
      exiting: "Polaris-Modal-Dialog--exiting",
      exited: "Polaris-Modal-Dialog--exited",
      entered: "Polaris-Modal-Dialog--entered"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/hooks.js
var require_hooks12 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/focus-manager/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), errors = require_errors(), context = require_context8();
    function useFocusManager({
      trapping
    }) {
      let focusManager = React2.useContext(context.FocusManagerContext), id = React2.useId();
      if (!focusManager)
        throw new errors.MissingAppProviderError("No FocusManager was provided.");
      let {
        trapFocusList,
        add: addFocusItem,
        remove: removeFocusItem
      } = focusManager, canSafelyFocus = trapFocusList[0] === id, value = React2.useMemo(() => ({
        canSafelyFocus
      }), [canSafelyFocus]);
      return React2.useEffect(() => {
        if (trapping)
          return addFocusItem(id), () => {
            removeFocusItem(id);
          };
      }, [addFocusItem, id, removeFocusItem, trapping]), value;
    }
    exports.useFocusManager = useFocusManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TrapFocus/TrapFocus.js
var require_TrapFocus = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TrapFocus/TrapFocus.js"(exports) {
    "use strict";
    var React2 = require("react"), types = require_types(), focus = require_focus(), shared = require_shared(), hooks = require_hooks12(), Focus = require_Focus(), EventListener = require_EventListener(), KeypressListener = require_KeypressListener();
    function TrapFocus({
      trapping = !0,
      children
    }) {
      let {
        canSafelyFocus
      } = hooks.useFocusManager({
        trapping
      }), focusTrapWrapper = React2.useRef(null), [disableFocus, setDisableFocus] = React2.useState(!0);
      React2.useEffect(() => {
        let disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : !0;
        setDisableFocus(disable);
      }, [canSafelyFocus, trapping]);
      let handleFocusIn = (event) => {
        let containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);
        trapping === !1 || !focusTrapWrapper.current || containerContentsHaveFocus || event.target instanceof Element && event.target.matches(`${shared.portal.selector} *`) || canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target) && focus.focusFirstFocusableNode(focusTrapWrapper.current);
      }, handleTab = (event) => {
        if (trapping === !1 || !focusTrapWrapper.current)
          return;
        let firstFocusableNode = focus.findFirstKeyboardFocusableNode(focusTrapWrapper.current), lastFocusableNode = focus.findLastKeyboardFocusableNode(focusTrapWrapper.current);
        event.target === lastFocusableNode && !event.shiftKey && (event.preventDefault(), focus.focusFirstKeyboardFocusableNode(focusTrapWrapper.current)), event.target === firstFocusableNode && event.shiftKey && (event.preventDefault(), focus.focusLastKeyboardFocusableNode(focusTrapWrapper.current));
      };
      return /* @__PURE__ */ React2.createElement(Focus.Focus, {
        disabled: disableFocus,
        root: focusTrapWrapper.current
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: focusTrapWrapper
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "focusin",
        handler: handleFocusIn
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Tab,
        keyEvent: "keydown",
        handler: handleTab
      }), children));
    }
    exports.TrapFocus = TrapFocus;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.js
var require_Dialog = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Dialog/Dialog.js"(exports) {
    "use strict";
    var React2 = require("react"), reactTransitionGroup = require("react-transition-group"), css = require_css(), focus = require_focus(), types = require_types(), useTheme = require_use_theme(), Dialog_module = require_Dialog_scss(), context = require_context15(), TrapFocus = require_TrapFocus(), Text2 = require_Text(), KeypressListener = require_KeypressListener();
    function Dialog({
      instant,
      labelledBy,
      children,
      limitHeight,
      size,
      onClose,
      onExited,
      onEntered,
      setClosing,
      hasToasts,
      ...props
    }) {
      let theme = useTheme.useTheme(), containerNode = React2.useRef(null), frameContext = React2.useContext(context.FrameContext), toastMessages;
      frameContext && (toastMessages = frameContext.toastMessages);
      let classes = css.classNames(Dialog_module.default.Modal, size && Dialog_module.default[css.variationName("size", size)], limitHeight && Dialog_module.default.limitHeight), TransitionChild = instant ? reactTransitionGroup.Transition : FadeUp;
      React2.useEffect(() => {
        containerNode.current && !containerNode.current.contains(document.activeElement) && focus.focusFirstFocusableNode(containerNode.current);
      }, []);
      let handleKeyDown = () => {
        setClosing && setClosing(!0);
      }, handleKeyUp = () => {
        setClosing && setClosing(!1), onClose();
      }, ariaLiveAnnouncements = /* @__PURE__ */ React2.createElement("div", {
        "aria-live": "assertive"
      }, toastMessages ? toastMessages.map((toastMessage) => /* @__PURE__ */ React2.createElement(Text2.Text, {
        visuallyHidden: !0,
        as: "p",
        key: toastMessage.id
      }, toastMessage.content)) : null);
      return /* @__PURE__ */ React2.createElement(TransitionChild, Object.assign({}, props, {
        nodeRef: containerNode,
        mountOnEnter: !0,
        unmountOnExit: !0,
        timeout: parseInt(theme.motion["motion-duration-200"], 10),
        onEntered,
        onExited
      }), /* @__PURE__ */ React2.createElement("div", {
        className: Dialog_module.default.Container,
        "data-polaris-layer": !0,
        "data-polaris-overlay": !0,
        ref: containerNode
      }, /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, null, /* @__PURE__ */ React2.createElement("div", {
        role: "dialog",
        "aria-modal": !0,
        "aria-label": labelledBy,
        "aria-labelledby": labelledBy,
        tabIndex: -1,
        className: Dialog_module.default.Dialog
      }, /* @__PURE__ */ React2.createElement("div", {
        className: classes
      }, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        keyEvent: "keydown",
        handler: handleKeyDown
      }), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: handleKeyUp
      }), children), ariaLiveAnnouncements))));
    }
    var fadeUpClasses = {
      appear: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entering),
      appearActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entered),
      enter: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entering),
      enterActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.entered),
      exit: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.exiting),
      exitActive: css.classNames(Dialog_module.default.animateFadeUp, Dialog_module.default.exited)
    };
    function FadeUp({
      children,
      ...props
    }) {
      return /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, Object.assign({}, props, {
        classNames: fadeUpClasses
      }), children);
    }
    exports.Dialog = Dialog;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/CloseButton/CloseButton.js
var require_CloseButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/CloseButton/CloseButton.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), hooks = require_hooks2(), Button2 = require_Button();
    function CloseButton({
      pressed,
      onClick
    }) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "tertiary",
        pressed,
        icon: polarisIcons.XIcon,
        onClick,
        accessibilityLabel: i18n.translate("Polaris.Common.close")
      });
    }
    exports.CloseButton = CloseButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Header/Header.js
var require_Header3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require("react"), CloseButton = require_CloseButton(), InlineGrid = require_InlineGrid(), Box = require_Box(), InlineStack = require_InlineStack(), Text2 = require_Text();
    function Header({
      id,
      children,
      closing,
      titleHidden,
      onClose
    }) {
      let headerPaddingInline = "400", headerPaddingBlock = "400";
      return titleHidden || !children ? /* @__PURE__ */ React2.createElement(Box.Box, {
        position: "absolute",
        insetInlineEnd: headerPaddingInline,
        insetBlockStart: headerPaddingBlock,
        zIndex: "1"
      }, /* @__PURE__ */ React2.createElement(CloseButton.CloseButton, {
        onClick: onClose
      })) : /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockStart: "400",
        paddingBlockEnd: "400",
        paddingInlineStart: headerPaddingInline,
        paddingInlineEnd: headerPaddingInline,
        borderBlockEndWidth: "025",
        borderColor: "border",
        background: "bg-surface-tertiary"
      }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
        columns: {
          xs: "1fr auto"
        },
        gap: "400"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        id,
        as: "h2",
        variant: "headingMd",
        breakWord: !0
      }, children)), /* @__PURE__ */ React2.createElement(CloseButton.CloseButton, {
        pressed: closing,
        onClick: onClose
      })));
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/components/Footer/Footer.js
var require_Footer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/components/Footer/Footer.js"(exports) {
    "use strict";
    var React2 = require("react"), utils = require_utils(), InlineStack = require_InlineStack(), Box = require_Box();
    function Footer({
      primaryAction,
      secondaryActions,
      children
    }) {
      let primaryActionButton = primaryAction && utils.buttonsFrom(primaryAction, {
        variant: "primary"
      }) || null, secondaryActionButtons = secondaryActions && utils.buttonsFrom(secondaryActions) || null, actions = primaryActionButton || secondaryActionButtons ? /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "200"
      }, secondaryActionButtons, primaryActionButton) : null;
      return /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        borderColor: "border",
        borderBlockStartWidth: "025",
        padding: "400",
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400",
        blockAlign: "center",
        align: "space-between"
      }, /* @__PURE__ */ React2.createElement(Box.Box, null, children), actions)));
    }
    exports.Footer = Footer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.js
var require_Modal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Modal/Modal.js"(exports) {
    "use strict";
    var React2 = require("react"), reactTransitionGroup = require("react-transition-group"), focus = require_focus(), withinContentContext = require_within_content_context(), components = require_components(), Modal_module = require_Modal_scss(), Section = require_Section5(), Dialog = require_Dialog(), Header = require_Header3(), Backdrop = require_Backdrop(), Footer = require_Footer(), hooks = require_hooks2(), Box = require_Box(), Scrollable = require_Scrollable(), Portal = require_Portal(), InlineStack = require_InlineStack(), Spinner = require_Spinner(), IFRAME_LOADING_HEIGHT = 200, DEFAULT_IFRAME_CONTENT_HEIGHT = 400, Modal = function({
      children,
      title,
      titleHidden = !1,
      src,
      iFrameName,
      open,
      instant,
      sectioned,
      loading,
      size,
      limitHeight,
      footer,
      primaryAction,
      secondaryActions,
      onScrolledToBottom,
      activator,
      activatorWrapper = "div",
      onClose,
      onIFrameLoad,
      onTransitionEnd,
      noScroll
    }) {
      let [iframeHeight, setIframeHeight] = React2.useState(IFRAME_LOADING_HEIGHT), [closing, setClosing] = React2.useState(!1), headerId = React2.useId(), activatorRef = React2.useRef(null), iframeTitle = hooks.useI18n().translate("Polaris.Modal.iFrameTitle"), dialog, backdrop, handleEntered = React2.useCallback(() => {
        onTransitionEnd && onTransitionEnd();
      }, [onTransitionEnd]), handleExited = React2.useCallback(() => {
        setIframeHeight(IFRAME_LOADING_HEIGHT);
        let activatorElement = activator && isRef(activator) ? activator && activator.current : activatorRef.current;
        activatorElement && requestAnimationFrame(() => focus.focusFirstFocusableNode(activatorElement));
      }, [activator]), handleIFrameLoad = React2.useCallback((evt) => {
        let iframe = evt.target;
        if (iframe && iframe.contentWindow)
          try {
            setIframeHeight(iframe.contentWindow.document.body.scrollHeight);
          } catch {
            setIframeHeight(DEFAULT_IFRAME_CONTENT_HEIGHT);
          }
        onIFrameLoad?.(evt);
      }, [onIFrameLoad]);
      if (open) {
        let footerMarkup = !footer && !primaryAction && !secondaryActions ? null : /* @__PURE__ */ React2.createElement(Footer.Footer, {
          primaryAction,
          secondaryActions
        }, footer), content = sectioned ? components.wrapWithComponent(children, Section.Section, {
          titleHidden
        }) : children, body = loading ? /* @__PURE__ */ React2.createElement(Box.Box, {
          padding: "400"
        }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
          gap: "400",
          align: "center",
          blockAlign: "center"
        }, /* @__PURE__ */ React2.createElement(Spinner.Spinner, null))) : content, scrollContainerMarkup = noScroll ? /* @__PURE__ */ React2.createElement(Box.Box, {
          width: "100%",
          overflowX: "hidden",
          overflowY: "hidden"
        }, body) : /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          shadow: !0,
          className: Modal_module.default.Body,
          onScrolledToBottom
        }, body), bodyMarkup = src ? /* @__PURE__ */ React2.createElement("iframe", {
          name: iFrameName,
          title: iframeTitle,
          src,
          className: Modal_module.default.IFrame,
          onLoad: handleIFrameLoad,
          style: {
            height: `${iframeHeight}px`
          }
        }) : scrollContainerMarkup;
        dialog = /* @__PURE__ */ React2.createElement(Dialog.Dialog, {
          instant,
          labelledBy: headerId,
          onClose,
          onEntered: handleEntered,
          onExited: handleExited,
          size,
          limitHeight,
          setClosing
        }, /* @__PURE__ */ React2.createElement(Header.Header, {
          titleHidden,
          id: headerId,
          closing,
          onClose
        }, title), bodyMarkup, footerMarkup), backdrop = /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
          setClosing,
          onClick: onClose
        });
      }
      let animated = !instant, activatorMarkup = activator && !isRef(activator) ? /* @__PURE__ */ React2.createElement(Box.Box, {
        ref: activatorRef,
        as: activatorWrapper
      }, activator) : null;
      return /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, activatorMarkup, /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "modal"
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.TransitionGroup, {
        appear: animated,
        enter: animated,
        exit: animated
      }, dialog), backdrop));
    };
    function isRef(ref) {
      return Object.prototype.hasOwnProperty.call(ref, "current");
    }
    Modal.Section = Section.Section;
    exports.Modal = Modal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/components/DiscardConfirmationModal/DiscardConfirmationModal.js
var require_DiscardConfirmationModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/components/DiscardConfirmationModal/DiscardConfirmationModal.js"(exports) {
    "use strict";
    var React2 = require("react"), Modal = require_Modal(), hooks = require_hooks2();
    function DiscardConfirmationModal({
      open,
      onDiscard,
      onCancel
    }) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(Modal.Modal, {
        title: i18n.translate("Polaris.DiscardConfirmationModal.title"),
        open,
        onClose: onCancel,
        primaryAction: {
          content: i18n.translate("Polaris.DiscardConfirmationModal.primaryAction"),
          destructive: !0,
          onAction: onDiscard
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.DiscardConfirmationModal.secondaryAction"),
          onAction: onCancel
        }],
        sectioned: !0
      }, i18n.translate("Polaris.DiscardConfirmationModal.message"));
    }
    exports.DiscardConfirmationModal = DiscardConfirmationModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.js
var require_ContextualSaveBar2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ContextualSaveBar/ContextualSaveBar.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), getWidth = require_get_width(), useToggle = require_use_toggle(), ContextualSaveBar_module = require_ContextualSaveBar_scss(), DiscardConfirmationModal = require_DiscardConfirmationModal(), hooks = require_hooks2(), hooks$1 = require_hooks9(), Button2 = require_Button(), Image = require_Image(), Icon = require_Icon(), Text2 = require_Text(), LegacyStack = require_LegacyStack();
    function ContextualSaveBar({
      alignContentFlush,
      message,
      saveAction,
      discardAction,
      fullWidth,
      contextControl,
      secondaryMenu
    }) {
      let i18n = hooks.useI18n(), {
        logo
      } = hooks$1.useFrame(), {
        value: discardConfirmationModalVisible,
        toggle: toggleDiscardConfirmationModal,
        setFalse: closeDiscardConfirmationModal
      } = useToggle.useToggle(!1), handleDiscardAction = React2.useCallback(() => {
        discardAction && discardAction.onAction && discardAction.onAction(), closeDiscardConfirmationModal();
      }, [closeDiscardConfirmationModal, discardAction]), discardActionContent = discardAction && discardAction.content ? discardAction.content : i18n.translate("Polaris.ContextualSaveBar.discard"), discardActionHandler;
      discardAction && discardAction.discardConfirmationModal ? discardActionHandler = toggleDiscardConfirmationModal : discardAction && (discardActionHandler = discardAction.onAction);
      let discardConfirmationModalMarkup = discardAction && discardAction.onAction && discardAction.discardConfirmationModal && /* @__PURE__ */ React2.createElement(DiscardConfirmationModal.DiscardConfirmationModal, {
        open: discardConfirmationModalVisible,
        onCancel: toggleDiscardConfirmationModal,
        onDiscard: handleDiscardAction
      }), discardActionMarkup = discardAction && /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "tertiary",
        size: "large",
        url: discardAction.url,
        onClick: discardActionHandler,
        loading: discardAction.loading,
        disabled: discardAction.disabled,
        accessibilityLabel: discardAction.content
      }, discardActionContent), saveActionContent = saveAction && saveAction.content ? saveAction.content : i18n.translate("Polaris.ContextualSaveBar.save"), saveActionMarkup = saveAction && /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "primary",
        tone: "success",
        size: "large",
        url: saveAction.url,
        onClick: saveAction.onAction,
        loading: saveAction.loading,
        disabled: saveAction.disabled,
        accessibilityLabel: saveAction.content
      }, saveActionContent), width = getWidth.getWidth(logo, 104), imageMarkup = logo && /* @__PURE__ */ React2.createElement(Image.Image, {
        style: {
          width
        },
        source: logo.contextualSaveBarSource || "",
        alt: ""
      }), logoMarkup = alignContentFlush || contextControl ? null : /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.LogoContainer,
        style: {
          width
        }
      }, imageMarkup), contextControlMarkup = contextControl ? /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ContextControl
      }, contextControl) : null, contentsClassName = css.classNames(ContextualSaveBar_module.default.Contents, fullWidth && ContextualSaveBar_module.default.fullWidth);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ContextualSaveBar
      }, contextControlMarkup, logoMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: contentsClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.MessageContainer
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.AlertTriangleIcon
      }), message && /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "h2",
        variant: "headingMd",
        tone: "text-inverse",
        truncate: !0
      }, message)), /* @__PURE__ */ React2.createElement("div", {
        className: ContextualSaveBar_module.default.ActionContainer
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        spacing: "tight",
        wrap: !1
      }, secondaryMenu, discardActionMarkup, saveActionMarkup)))), discardConfirmationModalMarkup);
    }
    exports.ContextualSaveBar = ContextualSaveBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-compare-ref.js
var require_use_deep_compare_ref = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-compare-ref.js"(exports) {
    "use strict";
    var React2 = require("react"), isEqual = require("react-fast-compare");
    function useDeepCompareRef(dependencies, comparator = isEqual) {
      let dependencyList = React2.useRef(dependencies);
      return comparator(dependencyList.current, dependencies) || (dependencyList.current = dependencies), dependencyList.current;
    }
    exports.useDeepCompareRef = useDeepCompareRef;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-effect.js
var require_use_deep_effect = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-effect.js"(exports) {
    "use strict";
    var React2 = require("react"), useDeepCompareRef = require_use_deep_compare_ref();
    function useDeepEffect(callback, dependencies, customCompare) {
      React2.useEffect(callback, useDeepCompareRef.useDeepCompareRef(dependencies, customCompare));
    }
    exports.useDeepEffect = useDeepEffect;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-deep-callback.js
var require_use_deep_callback = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-deep-callback.js"(exports) {
    "use strict";
    var React2 = require("react"), useDeepCompareRef = require_use_deep_compare_ref();
    function useDeepCallback(callback, dependencies, customCompare) {
      return React2.useCallback(callback, useDeepCompareRef.useDeepCompareRef(dependencies, customCompare));
    }
    exports.useDeepCallback = useDeepCallback;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.scss.js
var require_ToastManager_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ToastManager: "Polaris-Frame-ToastManager",
      ToastWrapper: "Polaris-Frame-ToastManager__ToastWrapper",
      "ToastWrapper-enter": "Polaris-Frame-ToastManager__ToastWrapper--enter",
      "ToastWrapper-exit": "Polaris-Frame-ToastManager__ToastWrapper--exit",
      "ToastWrapper-enter-done": "Polaris-Frame-ToastManager--toastWrapperEnterDone"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.scss.js
var require_Toast_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Toast: "Polaris-Frame-Toast",
      Action: "Polaris-Frame-Toast__Action",
      error: "Polaris-Frame-Toast--error",
      CloseButton: "Polaris-Frame-Toast__CloseButton",
      LeadingIcon: "Polaris-Frame-Toast__LeadingIcon"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.js
var require_Toast = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/Toast/Toast.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), types = require_types(), Toast_module = require_Toast_scss(), Icon = require_Icon(), Button2 = require_Button(), KeypressListener = require_KeypressListener(), InlineStack = require_InlineStack(), Text2 = require_Text(), DEFAULT_TOAST_DURATION = 5e3, DEFAULT_TOAST_DURATION_WITH_ACTION = 1e4;
    function Toast({
      content,
      onDismiss,
      duration,
      error,
      action
    }) {
      React2.useEffect(() => {
        let timeoutDuration = duration || DEFAULT_TOAST_DURATION;
        action && !duration ? timeoutDuration = DEFAULT_TOAST_DURATION_WITH_ACTION : action && duration && duration < DEFAULT_TOAST_DURATION_WITH_ACTION && console.log("Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.");
        let timer = setTimeout(onDismiss, timeoutDuration);
        return () => {
          clearTimeout(timer);
        };
      }, [action, duration, onDismiss]);
      let dismissMarkup = /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: Toast_module.default.CloseButton,
        onClick: onDismiss
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.XSmallIcon,
        tone: "inherit"
      })), actionMarkup = action ? /* @__PURE__ */ React2.createElement("div", {
        className: Toast_module.default.Action
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "monochromePlain",
        removeUnderline: !0,
        size: "slim",
        onClick: action.onAction
      }, action.content)) : null, leadingIconMarkup = error ? /* @__PURE__ */ React2.createElement("div", {
        className: Toast_module.default.LeadingIcon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.AlertCircleIcon,
        tone: "inherit"
      })) : null, className = css.classNames(Toast_module.default.Toast, error && Toast_module.default.error);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        "aria-live": "assertive"
      }, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: onDismiss
      }), leadingIconMarkup, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        fontWeight: "medium"
      }, content)), actionMarkup, dismissMarkup);
    }
    exports.DEFAULT_TOAST_DURATION = DEFAULT_TOAST_DURATION;
    exports.DEFAULT_TOAST_DURATION_WITH_ACTION = DEFAULT_TOAST_DURATION_WITH_ACTION;
    exports.Toast = Toast;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.js
var require_ToastManager = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/components/ToastManager/ToastManager.js"(exports) {
    "use strict";
    var React2 = require("react"), reactTransitionGroup = require("react-transition-group"), css = require_css(), useDeepEffect = require_use_deep_effect(), useDeepCallback = require_use_deep_callback(), ToastManager_module = require_ToastManager_scss(), Toast = require_Toast(), Portal = require_Portal(), EventListener = require_EventListener(), ToastManager = /* @__PURE__ */ React2.memo(function({
      toastMessages
    }) {
      let toastNodes = [], updateToasts = useDeepCallback.useDeepCallback(() => {
        let targetInPos = 0;
        toastMessages.forEach((_, index) => {
          let currentToast = toastNodes[index];
          currentToast.current && (targetInPos += currentToast.current.clientHeight, currentToast.current.style.setProperty("--pc-toast-manager-translate-y-in", `-${targetInPos}px`), currentToast.current.style.setProperty("--pc-toast-manager-translate-y-out", `${-targetInPos + 150}px`));
        });
      }, [toastMessages, toastNodes]);
      useDeepEffect.useDeepEffect(() => {
        updateToasts();
      }, [toastMessages]);
      let toastsMarkup = toastMessages.map((toast, index) => {
        let toastNode = /* @__PURE__ */ React2.createRef();
        return toastNodes[index] = toastNode, /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
          nodeRef: toastNodes[index],
          key: toast.id,
          timeout: {
            enter: 0,
            exit: 400
          },
          classNames: toastClasses
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: toastNode
        }, /* @__PURE__ */ React2.createElement(Toast.Toast, toast)));
      });
      return /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "toast"
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: updateToasts
      }), /* @__PURE__ */ React2.createElement("div", {
        className: ToastManager_module.default.ToastManager,
        "aria-live": "assertive"
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.TransitionGroup, {
        component: null
      }, toastsMarkup)));
    }), toastClasses = {
      enter: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-enter"]),
      enterDone: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-enter-done"]),
      exit: css.classNames(ToastManager_module.default.ToastWrapper, ToastManager_module.default["ToastWrapper-exit"])
    };
    exports.ToastManager = ToastManager;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.js
var require_Frame = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Frame/Frame.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), reactTransitionGroup = require("react-transition-group"), css = require_css(), shared = require_shared(), setRootProperty = require_set_root_property(), useTheme = require_use_theme(), Frame_module = require_Frame_scss(), hooks$1 = require_hooks11(), Loading = require_Loading2(), CSSAnimation = require_CSSAnimation(), ContextualSaveBar = require_ContextualSaveBar2(), ToastManager = require_ToastManager(), hooks = require_hooks2(), Backdrop = require_Backdrop(), context = require_context15(), EventListener = require_EventListener(), TrapFocus = require_TrapFocus(), Icon = require_Icon(), APP_FRAME_MAIN = "AppFrameMain", APP_FRAME_NAV = "AppFrameNav", APP_FRAME_TOP_BAR = "AppFrameTopBar", APP_FRAME_LOADING_BAR = "AppFrameLoadingBar", FrameInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          skipFocused: !1,
          globalRibbonHeight: 0,
          loadingStack: 0,
          toastMessages: [],
          showContextualSaveBar: !1
        }, this.contextualSaveBar = null, this.globalRibbonContainer = null, this.navigationNode = /* @__PURE__ */ React2.createRef(), this.setGlobalRibbonHeight = () => {
          let {
            globalRibbonContainer
          } = this;
          globalRibbonContainer && this.setState({
            globalRibbonHeight: globalRibbonContainer.offsetHeight
          }, this.setGlobalRibbonRootProperty);
        }, this.setOffset = () => {
          let {
            offset = "0px"
          } = this.props;
          setRootProperty.setRootProperty("--pc-frame-offset", offset);
        }, this.setGlobalRibbonRootProperty = () => {
          let {
            globalRibbonHeight
          } = this.state;
          setRootProperty.setRootProperty("--pc-frame-global-ribbon-height", `${globalRibbonHeight}px`);
        }, this.showToast = (toast) => {
          this.setState(({
            toastMessages
          }) => ({
            toastMessages: toastMessages.find(({
              id
            }) => id === toast.id) != null ? toastMessages : [...toastMessages, toast]
          }));
        }, this.hideToast = ({
          id
        }) => {
          this.setState(({
            toastMessages
          }) => ({
            toastMessages: toastMessages.filter(({
              id: toastId
            }) => id !== toastId)
          }));
        }, this.setContextualSaveBar = (props) => {
          let {
            showContextualSaveBar
          } = this.state;
          this.contextualSaveBar = {
            ...props
          }, showContextualSaveBar === !0 ? this.forceUpdate() : this.setState({
            showContextualSaveBar: !0
          });
        }, this.removeContextualSaveBar = () => {
          this.contextualSaveBar = null, this.setState({
            showContextualSaveBar: !1
          });
        }, this.startLoading = () => {
          this.setState(({
            loadingStack
          }) => ({
            loadingStack: loadingStack + 1
          }));
        }, this.stopLoading = () => {
          this.setState(({
            loadingStack
          }) => ({
            loadingStack: Math.max(0, loadingStack - 1)
          }));
        }, this.handleResize = () => {
          this.props.globalRibbon && this.setGlobalRibbonHeight();
        }, this.handleFocus = () => {
          this.setState({
            skipFocused: !0
          });
        }, this.handleBlur = () => {
          this.setState({
            skipFocused: !1
          });
        }, this.handleClick = (event) => {
          let {
            skipToContentTarget
          } = this.props;
          skipToContentTarget && skipToContentTarget.current && (skipToContentTarget.current.focus(), event?.preventDefault());
        }, this.handleNavigationDismiss = () => {
          let {
            onNavigationDismiss
          } = this.props;
          onNavigationDismiss?.();
        }, this.setGlobalRibbonContainer = (node) => {
          this.globalRibbonContainer = node;
        }, this.handleNavKeydown = (event) => {
          let {
            key
          } = event, {
            mediaQuery: {
              isNavigationCollapsed
            },
            showMobileNavigation
          } = this.props;
          isNavigationCollapsed && showMobileNavigation && key === "Escape" && this.handleNavigationDismiss();
        };
      }
      componentDidMount() {
        this.handleResize(), !this.props.globalRibbon && (this.setGlobalRibbonRootProperty(), this.setOffset());
      }
      componentDidUpdate(prevProps) {
        this.props.globalRibbon !== prevProps.globalRibbon && this.setGlobalRibbonHeight(), this.setOffset();
      }
      render() {
        let {
          skipFocused,
          loadingStack,
          toastMessages,
          showContextualSaveBar
        } = this.state, {
          logo,
          children,
          navigation,
          topBar,
          globalRibbon,
          showMobileNavigation = !1,
          skipToContentTarget,
          i18n,
          sidebar,
          mediaQuery: {
            isNavigationCollapsed
          }
        } = this.props, navClassName = css.classNames(Frame_module.default.Navigation, showMobileNavigation && Frame_module.default["Navigation-visible"]), mobileNavHidden = isNavigationCollapsed && !showMobileNavigation, mobileNavShowing = isNavigationCollapsed && showMobileNavigation, tabIndex = mobileNavShowing ? 0 : -1, mobileNavAttributes = {
          ...mobileNavShowing && {
            "aria-modal": !0,
            role: "dialog"
          }
        }, navigationMarkup = navigation ? /* @__PURE__ */ React2.createElement(useTheme.UseTheme, null, (theme) => /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, {
          trapping: mobileNavShowing
        }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
          nodeRef: this.navigationNode,
          appear: isNavigationCollapsed,
          exit: isNavigationCollapsed,
          in: showMobileNavigation,
          timeout: parseInt(theme.motion["motion-duration-300"], 10),
          classNames: navTransitionClasses
        }, /* @__PURE__ */ React2.createElement("div", Object.assign({
          key: "NavContent"
        }, mobileNavAttributes, {
          "aria-label": i18n.translate("Polaris.Frame.navigationLabel"),
          ref: this.navigationNode,
          className: navClassName,
          onKeyDown: this.handleNavKeydown,
          id: APP_FRAME_NAV,
          hidden: mobileNavHidden
        }), navigation, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: Frame_module.default.NavigationDismiss,
          onClick: this.handleNavigationDismiss,
          "aria-hidden": mobileNavHidden || !isNavigationCollapsed && !showMobileNavigation,
          "aria-label": i18n.translate("Polaris.Frame.Navigation.closeMobileNavigationLabel"),
          tabIndex
        }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: polarisIcons.XIcon
        })))))) : null, loadingMarkup = loadingStack > 0 ? /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.LoadingBar,
          id: APP_FRAME_LOADING_BAR
        }, /* @__PURE__ */ React2.createElement(Loading.Loading, null)) : null, topBarMarkup = topBar ? /* @__PURE__ */ React2.createElement("div", Object.assign({
          className: Frame_module.default.TopBar
        }, shared.layer.props, shared.dataPolarisTopBar.props, {
          id: APP_FRAME_TOP_BAR
        }), topBar) : null, globalRibbonMarkup = globalRibbon ? /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.GlobalRibbonContainer,
          ref: this.setGlobalRibbonContainer
        }, globalRibbon) : null, skipClassName = css.classNames(Frame_module.default.Skip, skipFocused && Frame_module.default.focused), skipTarget = skipToContentTarget?.current ? skipToContentTarget.current.id : APP_FRAME_MAIN, skipMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: skipClassName
        }, /* @__PURE__ */ React2.createElement("a", {
          href: `#${skipTarget}`,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onClick: this.handleClick
        }, i18n.translate("Polaris.Frame.skipToContent"))), navigationAttributes = navigation ? {
          "data-has-navigation": !0
        } : {}, frameClassName = css.classNames(Frame_module.default.Frame, navigation && Frame_module.default.hasNav, topBar && Frame_module.default.hasTopBar, sidebar && Frame_module.default.hasSidebar), contextualSaveBarMarkup = /* @__PURE__ */ React2.createElement(CSSAnimation.CSSAnimation, {
          in: showContextualSaveBar,
          className: Frame_module.default.ContextualSaveBar,
          type: "fade"
        }, /* @__PURE__ */ React2.createElement(ContextualSaveBar.ContextualSaveBar, this.contextualSaveBar)), navigationOverlayMarkup = showMobileNavigation && isNavigationCollapsed ? /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
          belowNavigation: !0,
          onClick: this.handleNavigationDismiss,
          onTouchStart: this.handleNavigationDismiss
        }) : null, context$1 = {
          logo,
          showToast: this.showToast,
          hideToast: this.hideToast,
          toastMessages,
          startLoading: this.startLoading,
          stopLoading: this.stopLoading,
          setContextualSaveBar: this.setContextualSaveBar,
          removeContextualSaveBar: this.removeContextualSaveBar
        };
        return /* @__PURE__ */ React2.createElement(context.FrameContext.Provider, {
          value: context$1
        }, /* @__PURE__ */ React2.createElement("div", Object.assign({
          className: frameClassName
        }, shared.layer.props, navigationAttributes), skipMarkup, topBarMarkup, navigationMarkup, contextualSaveBarMarkup, loadingMarkup, navigationOverlayMarkup, /* @__PURE__ */ React2.createElement("main", {
          className: Frame_module.default.Main,
          id: APP_FRAME_MAIN,
          "data-has-global-ribbon": Boolean(globalRibbon)
        }, /* @__PURE__ */ React2.createElement("div", {
          className: Frame_module.default.Content
        }, children)), /* @__PURE__ */ React2.createElement(ToastManager.ToastManager, {
          toastMessages
        }), globalRibbonMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        })));
      }
    }, navTransitionClasses = {
      enter: css.classNames(Frame_module.default["Navigation-enter"]),
      enterActive: css.classNames(Frame_module.default["Navigation-enterActive"]),
      enterDone: css.classNames(Frame_module.default["Navigation-enterActive"]),
      exit: css.classNames(Frame_module.default["Navigation-exit"]),
      exitActive: css.classNames(Frame_module.default["Navigation-exitActive"])
    };
    function Frame3(props) {
      let i18n = hooks.useI18n(), mediaQuery = hooks$1.useMediaQuery();
      return /* @__PURE__ */ React2.createElement(FrameInner, Object.assign({}, props, {
        i18n,
        mediaQuery
      }));
    }
    exports.Frame = Frame3;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.scss.js
var require_FullscreenBar_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FullscreenBar: "Polaris-FullscreenBar",
      BackAction: "Polaris-FullscreenBar__BackAction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.js
var require_FullscreenBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/FullscreenBar/FullscreenBar.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), FullscreenBar_module = require_FullscreenBar_scss(), hooks = require_hooks2(), Text2 = require_Text(), Icon = require_Icon();
    function FullscreenBar({
      onAction,
      children
    }) {
      let i18n = hooks.useI18n(), backButtonMarkup = /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "bodyLg"
      }, i18n.translate("Polaris.FullscreenBar.back"));
      return /* @__PURE__ */ React2.createElement("div", {
        className: FullscreenBar_module.default.FullscreenBar
      }, /* @__PURE__ */ React2.createElement("button", {
        className: FullscreenBar_module.default.BackAction,
        onClick: onAction,
        "aria-label": i18n.translate("Polaris.FullscreenBar.accessibilityLabel")
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.ExitIcon
      }), backButtonMarkup), children);
    }
    exports.FullscreenBar = FullscreenBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.scss.js
var require_Grid_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Grid: "Polaris-Grid"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.scss.js
var require_Cell_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Cell: "Polaris-Grid-Cell",
      "Cell-1-column-xs": "Polaris-Grid-Cell--cell_1ColumnXs",
      "Cell-2-column-xs": "Polaris-Grid-Cell--cell_2ColumnXs",
      "Cell-3-column-xs": "Polaris-Grid-Cell--cell_3ColumnXs",
      "Cell-4-column-xs": "Polaris-Grid-Cell--cell_4ColumnXs",
      "Cell-5-column-xs": "Polaris-Grid-Cell--cell_5ColumnXs",
      "Cell-6-column-xs": "Polaris-Grid-Cell--cell_6ColumnXs",
      "Cell-1-column-sm": "Polaris-Grid-Cell--cell_1ColumnSm",
      "Cell-2-column-sm": "Polaris-Grid-Cell--cell_2ColumnSm",
      "Cell-3-column-sm": "Polaris-Grid-Cell--cell_3ColumnSm",
      "Cell-4-column-sm": "Polaris-Grid-Cell--cell_4ColumnSm",
      "Cell-5-column-sm": "Polaris-Grid-Cell--cell_5ColumnSm",
      "Cell-6-column-sm": "Polaris-Grid-Cell--cell_6ColumnSm",
      "Cell-1-column-md": "Polaris-Grid-Cell--cell_1ColumnMd",
      "Cell-2-column-md": "Polaris-Grid-Cell--cell_2ColumnMd",
      "Cell-3-column-md": "Polaris-Grid-Cell--cell_3ColumnMd",
      "Cell-4-column-md": "Polaris-Grid-Cell--cell_4ColumnMd",
      "Cell-5-column-md": "Polaris-Grid-Cell--cell_5ColumnMd",
      "Cell-6-column-md": "Polaris-Grid-Cell--cell_6ColumnMd",
      "Cell-1-column-lg": "Polaris-Grid-Cell--cell_1ColumnLg",
      "Cell-2-column-lg": "Polaris-Grid-Cell--cell_2ColumnLg",
      "Cell-3-column-lg": "Polaris-Grid-Cell--cell_3ColumnLg",
      "Cell-4-column-lg": "Polaris-Grid-Cell--cell_4ColumnLg",
      "Cell-5-column-lg": "Polaris-Grid-Cell--cell_5ColumnLg",
      "Cell-6-column-lg": "Polaris-Grid-Cell--cell_6ColumnLg",
      "Cell-7-column-lg": "Polaris-Grid-Cell--cell_7ColumnLg",
      "Cell-8-column-lg": "Polaris-Grid-Cell--cell_8ColumnLg",
      "Cell-9-column-lg": "Polaris-Grid-Cell--cell_9ColumnLg",
      "Cell-10-column-lg": "Polaris-Grid-Cell--cell_10ColumnLg",
      "Cell-11-column-lg": "Polaris-Grid-Cell--cell_11ColumnLg",
      "Cell-12-column-lg": "Polaris-Grid-Cell--cell_12ColumnLg",
      "Cell-1-column-xl": "Polaris-Grid-Cell--cell_1ColumnXl",
      "Cell-2-column-xl": "Polaris-Grid-Cell--cell_2ColumnXl",
      "Cell-3-column-xl": "Polaris-Grid-Cell--cell_3ColumnXl",
      "Cell-4-column-xl": "Polaris-Grid-Cell--cell_4ColumnXl",
      "Cell-5-column-xl": "Polaris-Grid-Cell--cell_5ColumnXl",
      "Cell-6-column-xl": "Polaris-Grid-Cell--cell_6ColumnXl",
      "Cell-7-column-xl": "Polaris-Grid-Cell--cell_7ColumnXl",
      "Cell-8-column-xl": "Polaris-Grid-Cell--cell_8ColumnXl",
      "Cell-9-column-xl": "Polaris-Grid-Cell--cell_9ColumnXl",
      "Cell-10-column-xl": "Polaris-Grid-Cell--cell_10ColumnXl",
      "Cell-11-column-xl": "Polaris-Grid-Cell--cell_11ColumnXl",
      "Cell-12-column-xl": "Polaris-Grid-Cell--cell_12ColumnXl"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.js
var require_Cell2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Cell_module = require_Cell_scss();
    function Cell({
      area: gridArea,
      column,
      columnSpan,
      row,
      children
    }) {
      let className = css.classNames(Cell_module.default.Cell, columnSpan?.xs && Cell_module.default[`Cell-${columnSpan.xs}-column-xs`], columnSpan?.sm && Cell_module.default[`Cell-${columnSpan.sm}-column-sm`], columnSpan?.md && Cell_module.default[`Cell-${columnSpan.md}-column-md`], columnSpan?.lg && Cell_module.default[`Cell-${columnSpan.lg}-column-lg`], columnSpan?.xl && Cell_module.default[`Cell-${columnSpan.xl}-column-xl`]), style = {
        gridArea,
        "--pc-column-xs": column?.xs,
        "--pc-column-sm": column?.sm,
        "--pc-column-md": column?.md,
        "--pc-column-lg": column?.lg,
        "--pc-column-xl": column?.xl,
        "--pc-row-xs": row?.xs,
        "--pc-row-sm": row?.sm,
        "--pc-row-md": row?.md,
        "--pc-row-lg": row?.lg,
        "--pc-row-xl": row?.xl
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        style
      }, children);
    }
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.js
var require_Grid = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Grid/Grid.js"(exports) {
    "use strict";
    var React2 = require("react"), Grid_module = require_Grid_scss(), Cell = require_Cell2(), Grid = function({
      gap,
      areas,
      children,
      columns
    }) {
      let style = {
        "--pc-grid-gap-xs": gap?.xs,
        "--pc-grid-gap-sm": gap?.sm,
        "--pc-grid-gap-md": gap?.md,
        "--pc-grid-gap-lg": gap?.lg,
        "--pc-grid-gap-xl": gap?.xl,
        "--pc-grid-columns-xs": columns?.xs,
        "--pc-grid-columns-sm": columns?.sm,
        "--pc-grid-columns-md": columns?.md,
        "--pc-grid-columns-lg": columns?.lg,
        "--pc-grid-columns-xl": columns?.xl,
        "--pc-grid-areas-xs": formatAreas(areas?.xs),
        "--pc-grid-areas-sm": formatAreas(areas?.sm),
        "--pc-grid-areas-md": formatAreas(areas?.md),
        "--pc-grid-areas-lg": formatAreas(areas?.lg),
        "--pc-grid-areas-xl": formatAreas(areas?.xl)
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className: Grid_module.default.Grid,
        style
      }, children);
    };
    function formatAreas(areas) {
      if (areas)
        return `'${areas?.join("' '")}'`;
    }
    Grid.Cell = Cell.Cell;
    exports.Grid = Grid;
    exports.formatAreas = formatAreas;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/types.js
var require_types3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/types.js"(exports) {
    "use strict";
    exports.IndexFiltersMode = void 0;
    (function(IndexFiltersMode) {
      IndexFiltersMode.Default = "DEFAULT", IndexFiltersMode.Filtering = "FILTERING", IndexFiltersMode.EditingColumns = "EDITING_COLUMNS";
    })(exports.IndexFiltersMode || (exports.IndexFiltersMode = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.scss.js
var require_IndexFilters_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      IndexFiltersWrapper: "Polaris-IndexFilters__IndexFiltersWrapper",
      IndexFilters: "Polaris-IndexFilters",
      IndexFiltersSticky: "Polaris-IndexFilters__IndexFiltersSticky",
      IndexFiltersStickyFlush: "Polaris-IndexFilters__IndexFiltersStickyFlush",
      TabsWrapper: "Polaris-IndexFilters__TabsWrapper",
      SmallScreenTabsWrapper: "Polaris-IndexFilters__SmallScreenTabsWrapper",
      TabsWrapperLoading: "Polaris-IndexFilters__TabsWrapperLoading",
      TabsLoading: "Polaris-IndexFilters__TabsLoading",
      ActionWrap: "Polaris-IndexFilters__ActionWrap",
      Spinner: "Polaris-IndexFilters__Spinner",
      ButtonWrap: "Polaris-IndexFilters__ButtonWrap"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useIsSticky/useIsSticky.js
var require_useIsSticky = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useIsSticky/useIsSticky.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), DEBOUNCE_PERIOD = 250;
    function useIsSticky(mode2, disabled, isFlushWhenSticky) {
      let hasIOSupport = typeof window < "u" && Boolean(window.IntersectionObserver), options = {
        root: null,
        rootMargin: `${isFlushWhenSticky ? "0px" : "-56px"} 0px 0px 0px`,
        threshold: 0
      }, [indexFilteringHeight, setIndexFiltersHeight] = React2.useState(0), [isSticky, setIsSticky] = React2.useState(!1), measurerRef = React2.useRef(null), intersectionRef = React2.useRef(null), handleIntersect = (entries) => {
        entries.forEach((entry2) => {
          setIsSticky(!entry2.isIntersecting);
        });
      }, observerRef = React2.useRef(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null);
      return React2.useEffect(() => {
        function computeDimensions() {
          let node = measurerRef.current;
          if (!node)
            return {
              height: 0
            };
          let height = node.getBoundingClientRect().height;
          setIndexFiltersHeight(height);
        }
        computeDimensions();
        let debouncedComputeDimensions = debounce.debounce(computeDimensions, DEBOUNCE_PERIOD, {
          trailing: !0
        });
        return window.addEventListener("resize", debouncedComputeDimensions), () => window.removeEventListener("resize", debouncedComputeDimensions);
      }, [measurerRef, mode2]), React2.useEffect(() => {
        let observer = observerRef.current;
        if (!observer)
          return;
        let node = intersectionRef.current;
        return node && observer.observe(node), () => {
          observer?.disconnect();
        };
      }, [intersectionRef]), {
        intersectionRef,
        measurerRef,
        isSticky: isSticky && !disabled,
        indexFilteringHeight
      };
    }
    exports.useIsSticky = useIsSticky;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-is-touch-device.js
var require_use_is_touch_device = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-is-touch-device.js"(exports) {
    "use strict";
    var React2 = require("react"), useEventListener = require_use_event_listener();
    function useIsTouchDevice() {
      let [isTouchDevice, setIsTouchDevice] = React2.useState(!1), handleTouchStart = React2.useCallback(() => setIsTouchDevice(!0), []);
      return useEventListener.useEventListener("touchstart", handleTouchStart), isTouchDevice;
    }
    exports.useIsTouchDevice = useIsTouchDevice;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/UpdateButtons/UpdateButtons.js
var require_UpdateButtons = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/UpdateButtons/UpdateButtons.js"(exports) {
    "use strict";
    var React2 = require("react"), focus = require_focus(), useIsTouchDevice = require_use_is_touch_device(), hooks = require_hooks2(), Button2 = require_Button(), InlineStack = require_InlineStack(), Modal = require_Modal(), Form = require_Form(), FormLayout2 = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function UpdateButtons({
      primaryAction,
      cancelAction,
      viewNames,
      disabled
    }) {
      let i18n = hooks.useI18n(), [savedViewName, setSavedViewName] = React2.useState(""), [savedViewModalOpen, setSavedViewModalOpen] = React2.useState(!1), container = React2.useRef(null), isTouchDevice = useIsTouchDevice.useIsTouchDevice();
      React2.useEffect(() => {
        !container.current || isTouchDevice || savedViewModalOpen && focus.focusFirstFocusableNode(container.current);
      }, [savedViewModalOpen, isTouchDevice]);
      async function handleClickSaveButton() {
        primaryAction?.type === "save-as" ? handleOpenModal() : await primaryAction?.onAction("");
      }
      function handleOpenModal() {
        setSavedViewModalOpen(!0);
      }
      function handleCloseModal() {
        setSavedViewModalOpen(!1);
      }
      function handleChange(value) {
        setSavedViewName(value);
      }
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await primaryAction?.onAction(savedViewName), handleCloseModal());
      }
      let buttonText = React2.useMemo(() => {
        switch (primaryAction?.type) {
          case "save":
            return i18n.translate("Polaris.IndexFilters.UpdateButtons.save");
          case "save-as":
          default:
            return i18n.translate("Polaris.IndexFilters.UpdateButtons.saveAs");
        }
      }, [primaryAction?.type, i18n]), saveButton = /* @__PURE__ */ React2.createElement(Button2.Button, {
        size: "micro",
        onClick: handleClickSaveButton,
        disabled: primaryAction?.disabled || disabled
      }, buttonText), hasSameNameError = viewNames.some((name) => name.trim().toLowerCase() === savedViewName.trim().toLowerCase()), isPrimaryActionDisabled = hasSameNameError || !savedViewName || primaryAction?.loading || savedViewName.length > MAX_VIEW_NAME_LENGTH, cancelButtonMarkup = /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "tertiary",
        size: "micro",
        onClick: cancelAction.onAction,
        disabled
      }, i18n.translate("Polaris.IndexFilters.UpdateButtons.cancel"));
      return primaryAction ? /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: "100"
      }, cancelButtonMarkup, primaryAction.type === "save-as" ? /* @__PURE__ */ React2.createElement(Modal.Modal, {
        activator: /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, null, saveButton),
        open: savedViewModalOpen,
        title: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.title"),
        onClose: handleCloseModal,
        primaryAction: {
          onAction: handlePrimaryAction,
          content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.save"),
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          onAction: handleCloseModal,
          content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.cancel")
        }]
      }, /* @__PURE__ */ React2.createElement(Modal.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout2.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.label"),
        value: savedViewName,
        onChange: handleChange,
        autoComplete: "off",
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.sameName", {
          name: savedViewName
        }) : void 0
      })))))) : saveButton) : cancelButtonMarkup;
    }
    exports.UpdateButtons = UpdateButtons;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.scss.js
var require_DirectionButton_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DirectionButton: "Polaris-SortButton-DirectionButton",
      "DirectionButton-active": "Polaris-SortButton-DirectionButton__DirectionButton--active",
      Label: "Polaris-SortButton-DirectionButton__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js
var require_DirectionButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), DirectionButton_module = require_DirectionButton_scss(), UnstyledButton = require_UnstyledButton(), Icon = require_Icon();
    function DirectionButton({
      onClick,
      active,
      children,
      direction,
      value
    }) {
      let classes = css.classNames(DirectionButton_module.default.DirectionButton, active && DirectionButton_module.default["DirectionButton-active"]);
      function handleClick() {
        onClick([value]);
      }
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: classes,
        onClick: handleClick
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: direction === "asc" ? polarisIcons.ArrowUpIcon : polarisIcons.ArrowDownIcon,
        tone: "base"
      }), /* @__PURE__ */ React2.createElement("span", {
        className: DirectionButton_module.default.Label
      }, children));
    }
    exports.DirectionButton = DirectionButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/SortButton.js
var require_SortButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SortButton/SortButton.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), ChoiceList = require_ChoiceList(), DirectionButton = require_DirectionButton(), hooks = require_hooks2(), Tooltip = require_Tooltip(), Button2 = require_Button(), Popover = require_Popover(), Box = require_Box();
    exports.SortButtonDirection = void 0;
    (function(SortButtonDirection) {
      SortButtonDirection.Asc = "asc", SortButtonDirection.Desc = "desc";
    })(exports.SortButtonDirection || (exports.SortButtonDirection = {}));
    function SortButton({
      choices,
      selected,
      onChange,
      disabled,
      onChangeKey,
      onChangeDirection
    }) {
      let i18n = hooks.useI18n(), [active, setActive] = React2.useState(!1), [selectedValueKey, selectedDirection] = selected[0].split(" ");
      function handleClick() {
        setActive((pastActive) => !pastActive);
      }
      function handleClose() {
        setActive(!1);
      }
      function handleChangeChoiceList(sel) {
        if (onChangeKey) {
          let [key] = sel[0].split(" ");
          onChangeKey(key);
        } else
          onChange(sel);
      }
      function handleChangeDirection(sel) {
        if (onChangeDirection) {
          let [, direction] = sel[0].split(" ");
          onChangeDirection(direction);
        } else
          onChange(sel);
      }
      let choiceListChoices = React2.useMemo(() => choices.reduce((acc, curr) => {
        let alreadyExists = acc.some((option) => option.label === curr.label), [, currentValueDirection] = curr.value.split(" "), isSameDirection = currentValueDirection === selectedDirection;
        return alreadyExists ? isSameDirection ? acc.map((option) => option.label === curr.label ? curr : option) : acc : [...acc, curr];
      }, []), [choices, selectedDirection]), selectedChoices = choices.filter((choice) => {
        let [currentKey] = choice.value.split(" ");
        return currentKey === selectedValueKey;
      }), sortButton = /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: i18n.translate("Polaris.IndexFilters.SortButton.tooltip"),
        preferredPosition: "above",
        hoverDelay: 400
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        size: "slim",
        icon: polarisIcons.SortIcon,
        onClick: handleClick,
        disabled,
        accessibilityLabel: i18n.translate("Polaris.IndexFilters.SortButton.ariaLabel")
      }));
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: active && !disabled,
        activator: sortButton,
        autofocusTarget: "first-node",
        onClose: handleClose,
        preferredAlignment: "right",
        fluidContent: !0
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        minWidth: "148px",
        paddingInlineStart: "300",
        paddingInlineEnd: "300",
        paddingBlockStart: "200",
        paddingBlockEnd: "200",
        borderBlockEndWidth: "025",
        borderColor: "border-secondary"
      }, /* @__PURE__ */ React2.createElement(ChoiceList.ChoiceList, {
        title: i18n.translate("Polaris.IndexFilters.SortButton.title"),
        choices: choiceListChoices,
        selected,
        onChange: handleChangeChoiceList
      })), /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingInlineStart: "150",
        paddingInlineEnd: "150",
        paddingBlockStart: "200",
        paddingBlockEnd: "200"
      }, /* @__PURE__ */ React2.createElement(DirectionButton.DirectionButton, {
        direction: "asc",
        active: selectedDirection === exports.SortButtonDirection.Asc,
        onClick: handleChangeDirection,
        value: selectedChoices?.[0]?.value
      }, selectedChoices?.[0]?.directionLabel), /* @__PURE__ */ React2.createElement(DirectionButton.DirectionButton, {
        direction: "desc",
        active: selectedDirection === exports.SortButtonDirection.Desc,
        onClick: handleChangeDirection,
        value: selectedChoices?.[1]?.value
      }, selectedChoices?.[1]?.directionLabel)));
    }
    exports.SortButton = SortButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.scss.js
var require_Container_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Container: "Polaris-IndexFilters-Container"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.js
var require_Container = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/Container/Container.js"(exports) {
    "use strict";
    var React2 = require("react"), Container_module = require_Container_scss(), Container = ({
      children
    }) => /* @__PURE__ */ React2.createElement("div", {
      className: Container_module.default.Container
    }, children);
    exports.Container = Container;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/use-previous.js
var require_use_previous = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/use-previous.js"(exports) {
    "use strict";
    var React2 = require("react");
    function usePrevious(value) {
      let ref = React2.useRef();
      return React2.useEffect(() => {
        ref.current = value;
      }, [value]), ref.current;
    }
    exports.usePrevious = usePrevious;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/utilities.js
var require_utilities7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
      let sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0), arrayOfTabIndices = tabs.map((_, index) => index), visibleTabs = [], hiddenTabs = [];
      if (containerWidth > sumTabWidths)
        visibleTabs.push(...arrayOfTabIndices);
      else {
        visibleTabs.push(selected);
        let tabListWidth = tabWidths[selected];
        arrayOfTabIndices.forEach((currentTabIndex) => {
          if (currentTabIndex !== selected) {
            let currentTabWidth = tabWidths[currentTabIndex];
            if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
              hiddenTabs.push(currentTabIndex);
              return;
            }
            visibleTabs.push(currentTabIndex), tabListWidth += currentTabWidth;
          }
        });
      }
      return {
        visibleTabs,
        hiddenTabs
      };
    }
    exports.getVisibleAndHiddenTabIndices = getVisibleAndHiddenTabIndices;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.scss.js
var require_Tabs_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Outer: "Polaris-Tabs__Outer",
      Wrapper: "Polaris-Tabs__Wrapper",
      WrapperWithNewButton: "Polaris-Tabs__WrapperWithNewButton",
      ButtonWrapper: "Polaris-Tabs__ButtonWrapper",
      Tabs: "Polaris-Tabs",
      Tab: "Polaris-Tabs__Tab",
      "Tab-active": "Polaris-Tabs__Tab--active",
      "Tab-hasActions": "Polaris-Tabs__Tab--hasActions",
      "Tab-iconOnly": "Polaris-Tabs__Tab--iconOnly",
      fillSpace: "Polaris-Tabs--fillSpace",
      TabContainer: "Polaris-Tabs__TabContainer",
      fitted: "Polaris-Tabs--fitted",
      titleWithIcon: "Polaris-Tabs--titleWithIcon",
      List: "Polaris-Tabs__List",
      Item: "Polaris-Tabs__Item",
      DisclosureTab: "Polaris-Tabs__DisclosureTab",
      "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
      DisclosureActivator: "Polaris-Tabs__DisclosureActivator",
      TabsMeasurer: "Polaris-Tabs__TabsMeasurer",
      NewTab: "Polaris-Tabs__NewTab",
      ActionListWrap: "Polaris-Tabs__ActionListWrap",
      Panel: "Polaris-Tabs__Panel",
      "Panel-hidden": "Polaris-Tabs__Panel--hidden"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/DuplicateModal/DuplicateModal.js
var require_DuplicateModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/DuplicateModal/DuplicateModal.js"(exports) {
    "use strict";
    var React2 = require("react"), focus = require_focus(), hooks = require_hooks2(), Modal = require_Modal(), Form = require_Form(), FormLayout2 = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function DuplicateModal({
      open,
      isModalLoading,
      name,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      helpText,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(name), container = React2.useRef(null), hasSameNameError = viewNames?.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = isModalLoading || hasSameNameError || !value || value.length > MAX_VIEW_NAME_LENGTH;
      React2.useEffect(() => {
        container.current && open && focus.focusFirstFocusableNode(container.current);
      }, [open]), React2.useEffect(() => {
        open && setValue(name.slice(0, MAX_VIEW_NAME_LENGTH));
      }, [name, open]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await onClickPrimaryAction(value), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(name), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal.Modal, {
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.DuplicateModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.DuplicateModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.DuplicateModal.cancel"),
          onAction: handleSecondaryAction
        }],
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout2.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.DuplicateModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        helpText,
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.DuplicateModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.DuplicateModal = DuplicateModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/RenameModal/RenameModal.js
var require_RenameModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/components/RenameModal/RenameModal.js"(exports) {
    "use strict";
    var React2 = require("react"), focus = require_focus(), Form = require_Form(), FormLayout2 = require_FormLayout(), hooks = require_hooks2(), Modal = require_Modal(), TextField2 = require_TextField();
    function RenameModal({
      open,
      isModalLoading,
      name,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      helpText,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(name), container = React2.useRef(null), hasSameNameError = viewNames?.filter((viewName) => viewName !== name).some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = isModalLoading || hasSameNameError || value === name || !value;
      React2.useEffect(() => {
        container.current && open && focus.focusFirstFocusableNode(container.current);
      }, [open]), React2.useEffect(() => {
        open && setValue(name);
      }, [name, open]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        isPrimaryActionDisabled || (await onClickPrimaryAction(value), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(name), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal.Modal, {
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.RenameModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.RenameModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.RenameModal.cancel"),
          onAction: handleSecondaryAction
        }],
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout2.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.RenameModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        helpText,
        maxLength: 40,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.RenameModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.RenameModal = RenameModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/Tab.js
var require_Tab = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Tab/Tab.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), breakpoints = require_breakpoints(), Tabs_module = require_Tabs_scss(), DuplicateModal = require_DuplicateModal(), RenameModal = require_RenameModal(), hooks = require_hooks2(), Icon = require_Icon(), Modal = require_Modal(), Popover = require_Popover(), ActionList = require_ActionList(), InlineStack = require_InlineStack(), Text2 = require_Text(), UnstyledLink = require_UnstyledLink(), UnstyledButton = require_UnstyledButton(), Badge = require_Badge(), Tab = /* @__PURE__ */ React2.forwardRef(({
      content,
      accessibilityLabel,
      badge,
      id,
      panelID,
      url,
      onAction,
      actions,
      disabled,
      isModalLoading,
      icon,
      siblingTabHasFocus,
      measuring,
      focused,
      selected,
      onToggleModal,
      onTogglePopover,
      viewNames,
      tabIndexOverride,
      onFocus
    }, ref) => {
      let i18n = hooks.useI18n(), [popoverActive, setPopoverActive] = React2.useState(!1), [activeModalType, setActiveModalType] = React2.useState(null), {
        mdDown
      } = breakpoints.useBreakpoints(), wasSelected = React2.useRef(selected), panelFocused = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        onTogglePopover(popoverActive);
      }, [popoverActive, onTogglePopover]), React2.useEffect(() => {
        onToggleModal(Boolean(activeModalType));
      }, [activeModalType, onToggleModal]), React2.useEffect(() => () => {
        onToggleModal(!1), onTogglePopover(!1);
      }, [onToggleModal, onTogglePopover]), React2.useEffect(() => {
        if (measuring)
          return;
        (focused || document.activeElement && document.activeElement.id === id) && selected && panelID != null && !panelFocused.current && (focusPanelID(panelID), panelFocused.current = !0), selected && !wasSelected.current && panelID != null ? focusPanelID(panelID) : focused && node.current != null && activeModalType == null && !disabled && focus.focusFirstFocusableNode(node.current), wasSelected.current = selected;
      }, [focused, id, content, measuring, panelID, selected, activeModalType, disabled]);
      let tabIndex;
      selected && !siblingTabHasFocus && !measuring || focused && !measuring ? tabIndex = 0 : tabIndex = -1, tabIndexOverride != null && (tabIndex = tabIndexOverride);
      let renameAction = actions?.find((action) => action.type === "rename"), duplicateAction = actions?.find((action) => action.type === "duplicate"), deleteAction = actions?.find((action) => action.type === "delete"), togglePopoverActive = React2.useCallback(() => {
        actions?.length && setPopoverActive((popoverActive2) => !popoverActive2);
      }, [actions]), handleClick = React2.useCallback(() => {
        disabled || (selected ? togglePopoverActive() : onAction?.());
      }, [selected, onAction, togglePopoverActive, disabled]), handleModalOpen = (type) => {
        setActiveModalType(type);
      }, handleModalClose = () => {
        setActiveModalType(null);
      }, handleSaveRenameModal = React2.useCallback(async (value) => {
        await renameAction?.onPrimaryAction?.(value), setTimeout(() => {
          node.current && focus.focusFirstFocusableNode(node.current);
        }, 250);
      }, [renameAction]), handleConfirmDeleteView = React2.useCallback(async () => {
        await deleteAction?.onPrimaryAction?.(content), handleModalClose();
      }, [deleteAction, content]), handleSaveDuplicateModal = React2.useCallback(async (duplicateName) => {
        await duplicateAction?.onPrimaryAction?.(duplicateName);
      }, [duplicateAction]), actionContent = {
        rename: {
          icon: polarisIcons.InfoIcon,
          content: i18n.translate("Polaris.Tabs.Tab.rename")
        },
        duplicate: {
          icon: polarisIcons.DuplicateIcon,
          content: i18n.translate("Polaris.Tabs.Tab.duplicate")
        },
        edit: {
          icon: polarisIcons.EditIcon,
          content: i18n.translate("Polaris.Tabs.Tab.edit")
        },
        "edit-columns": {
          icon: polarisIcons.LayoutColumns3Icon,
          content: i18n.translate("Polaris.Tabs.Tab.editColumns")
        },
        delete: {
          icon: polarisIcons.DeleteIcon,
          content: i18n.translate("Polaris.Tabs.Tab.delete"),
          destructive: !0
        }
      }, formattedActions = actions?.map(({
        type,
        onAction: onAction2,
        onPrimaryAction,
        ...additionalOptions
      }) => {
        let isModalActivator = !type.includes("edit");
        return {
          ...actionContent[type],
          ...additionalOptions,
          onAction: () => {
            onAction2?.(content), togglePopoverActive(), isModalActivator && handleModalOpen(type);
          }
        };
      }), handleKeyDown = React2.useCallback((event) => {
        event.key === " " && (event.preventDefault(), handleClick());
      }, [handleClick]), tabContainerClassNames = css.classNames(Tabs_module.default.TabContainer, selected && Tabs_module.default.Underline), urlIfNotDisabledOrSelected = disabled || selected ? void 0 : url, BaseComponent = urlIfNotDisabledOrSelected ? UnstyledLink.UnstyledLink : UnstyledButton.UnstyledButton, tabClassName = css.classNames(Tabs_module.default.Tab, icon && Tabs_module.default["Tab-iconOnly"], popoverActive && Tabs_module.default["Tab-popoverActive"], selected && Tabs_module.default["Tab-active"], selected && actions?.length && Tabs_module.default["Tab-hasActions"]), badgeMarkup = badge ? /* @__PURE__ */ React2.createElement(Badge.Badge, {
        tone: selected ? void 0 : "new"
      }, badge) : null, disclosureMarkup = selected && actions?.length ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Tabs_module.default.IconWrap)
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.ChevronDownIcon
      })) : null, activator = /* @__PURE__ */ React2.createElement(BaseComponent, {
        id,
        className: tabClassName,
        tabIndex,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        role: tabIndexOverride == null ? "tab" : void 0,
        disabled,
        url: urlIfNotDisabledOrSelected,
        onFocus,
        onMouseUp: focus.handleMouseUpByBlurring,
        onClick: handleClick,
        onKeyDown: handleKeyDown
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "200",
        align: "center",
        blockAlign: "center",
        wrap: !1
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: mdDown ? "bodyLg" : "bodySm",
        fontWeight: "medium"
      }, icon ?? content), badgeMarkup), disclosureMarkup), isPlainButton = !selected || !actions?.length, renameModal = renameAction ? /* @__PURE__ */ React2.createElement(RenameModal.RenameModal, {
        name: content,
        open: activeModalType === "rename",
        onClose: handleModalClose,
        onClickPrimaryAction: handleSaveRenameModal,
        isModalLoading,
        viewNames
      }) : null, duplicateModal = duplicateAction ? /* @__PURE__ */ React2.createElement(DuplicateModal.DuplicateModal, {
        open: activeModalType === "duplicate",
        name: i18n.translate("Polaris.Tabs.Tab.copy", {
          name: content
        }),
        onClose: handleModalClose,
        onClickPrimaryAction: handleSaveDuplicateModal,
        isModalLoading,
        viewNames: viewNames || []
      }) : null, deleteModal = deleteAction ? /* @__PURE__ */ React2.createElement(Modal.Modal, {
        open: activeModalType === "delete",
        onClose: handleModalClose,
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.Tab.deleteModal.delete"),
          onAction: handleConfirmDeleteView,
          destructive: !0,
          disabled: isModalLoading
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.Tab.deleteModal.cancel"),
          onAction: handleModalClose
        }],
        title: i18n.translate("Polaris.Tabs.Tab.deleteModal.title"),
        instant: !0
      }, /* @__PURE__ */ React2.createElement(Modal.Modal.Section, null, i18n.translate("Polaris.Tabs.Tab.deleteModal.description", {
        viewName: content
      }))) : null, markup = isPlainButton || disabled ? activator : /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator,
        autofocusTarget: "first-node",
        onClose: togglePopoverActive
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.ActionListWrap
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        items: formattedActions
      }))), renameModal, duplicateModal, deleteModal);
      return icon ? markup : /* @__PURE__ */ React2.createElement("li", {
        className: tabContainerClassNames,
        ref: mergeRefs([node, ref]),
        role: "presentation"
      }, markup);
    });
    Tab.displayName = "Tab";
    function focusPanelID(panelID) {
      let panel = document.getElementById(panelID);
      panel && panel.focus({
        preventScroll: !0
      });
    }
    function mergeRefs(refs) {
      return (node) => {
        for (let ref of refs)
          ref != null && (ref.current = node);
      };
    }
    exports.Tab = Tab;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/TabMeasurer/TabMeasurer.js
var require_TabMeasurer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/TabMeasurer/TabMeasurer.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), useComponentDidMount = require_use_component_did_mount(), useEventListener = require_use_event_listener(), Tabs_module = require_Tabs_scss(), Tab = require_Tab(), TabMeasurer = /* @__PURE__ */ React2.memo(function({
      selected,
      tabs,
      activator,
      tabToFocus,
      siblingTabHasFocus,
      handleMeasurement: handleMeasurementProp
    }) {
      let containerNode = React2.useRef(null), animationFrame = React2.useRef(null), handleMeasurement = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!containerNode.current)
            return;
          let containerWidth = containerNode.current.offsetWidth - 20 - 28, hiddenTabNodes = containerNode.current.children, hiddenTabWidths = Array.from(hiddenTabNodes).map((node) => Math.ceil(node.getBoundingClientRect().width) + 4), disclosureWidth = hiddenTabWidths.pop() || 0;
          handleMeasurementProp({
            containerWidth,
            disclosureWidth,
            hiddenTabWidths
          });
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, tabs]), useComponentDidMount.useComponentDidMount(() => {
      });
      let tabsMarkup = tabs.map((tab, index) => /* @__PURE__ */ React2.createElement(Tab.Tab, {
        measuring: !0,
        key: `$${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        url: tab.url,
        content: tab.content,
        onTogglePopover: noop,
        onToggleModal: noop
      })), classname = css.classNames(Tabs_module.default.Tabs, Tabs_module.default.TabsMeasurer);
      return useEventListener.useEventListener("resize", handleMeasurement), /* @__PURE__ */ React2.createElement("div", {
        className: classname,
        ref: containerNode
      }, tabsMarkup, activator);
    });
    function noop() {
    }
    exports.TabMeasurer = TabMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Panel/Panel.js
var require_Panel = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Panel/Panel.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Tabs_module = require_Tabs_scss();
    function Panel({
      hidden,
      id,
      tabID,
      children
    }) {
      let className = css.classNames(Tabs_module.default.Panel, hidden && Tabs_module.default["Panel-hidden"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        id,
        role: "tabpanel",
        "aria-labelledby": tabID,
        tabIndex: -1
      }, children);
    }
    exports.Panel = Panel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Item/Item.js
var require_Item6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Tabs_module = require_Tabs_scss(), UnstyledLink = require_UnstyledLink(), Item = /* @__PURE__ */ React2.memo(function({
      id,
      focused,
      children,
      url,
      accessibilityLabel,
      onClick = noop
    }) {
      let focusedNode = React2.useRef(null);
      React2.useEffect(() => {
        focusedNode.current && focusedNode.current instanceof HTMLElement && focused && focusedNode.current.focus();
      }, [focusedNode, focused]);
      let classname = css.classNames(Tabs_module.default.Item), sharedProps = {
        id,
        ref: focusedNode,
        onClick,
        className: classname,
        "aria-selected": !1,
        "aria-label": accessibilityLabel
      }, markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, sharedProps, {
        url
      }), children) : /* @__PURE__ */ React2.createElement("button", Object.assign({}, sharedProps, {
        ref: focusedNode,
        type: "button"
      }), children);
      return /* @__PURE__ */ React2.createElement("li", null, markup);
    });
    function noop() {
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/List/List.js
var require_List = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require("react"), Tabs_module = require_Tabs_scss(), Item = require_Item6();
    function List({
      focusIndex,
      disclosureTabs,
      onClick = noop,
      onKeyPress = noop
    }) {
      let tabs = disclosureTabs.map(({
        id,
        content,
        ...tabProps
      }, index) => /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
        key: id
      }, tabProps, {
        id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content));
      return /* @__PURE__ */ React2.createElement("ul", {
        className: Tabs_module.default.List,
        onKeyDown: handleKeyDown,
        onKeyUp: onKeyPress
      }, tabs);
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/components/CreateViewModal/CreateViewModal.js
var require_CreateViewModal = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/components/CreateViewModal/CreateViewModal.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsTouchDevice = require_use_is_touch_device(), focus = require_focus(), hooks = require_hooks2(), Modal = require_Modal(), Form = require_Form(), FormLayout2 = require_FormLayout(), TextField2 = require_TextField(), MAX_VIEW_NAME_LENGTH = 40;
    function CreateViewModal({
      activator,
      open,
      onClose,
      onClickPrimaryAction,
      onClickSecondaryAction,
      viewNames
    }) {
      let i18n = hooks.useI18n(), [value, setValue] = React2.useState(""), [loading, setLoading] = React2.useState(!1), container = React2.useRef(null), isTouchDevice = useIsTouchDevice.useIsTouchDevice(), hasSameNameError = viewNames.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = !value || hasSameNameError || loading || value.length > MAX_VIEW_NAME_LENGTH;
      React2.useEffect(() => {
        if (!(!container.current || isTouchDevice) && open) {
          focus.focusFirstFocusableNode(container.current);
          let timeout = setTimeout(() => {
            container.current && focus.focusFirstFocusableNode(container.current);
          }, 50);
          return () => clearTimeout(timeout);
        }
      }, [open, isTouchDevice]);
      let handleChange = React2.useCallback((newValue) => {
        setValue(newValue);
      }, []);
      async function handlePrimaryAction() {
        hasSameNameError || isPrimaryActionDisabled || (setLoading(!0), await onClickPrimaryAction(value), setLoading(!1), setValue(""), onClose());
      }
      function handleSecondaryAction() {
        onClickSecondaryAction?.(), setValue(""), onClose();
      }
      return /* @__PURE__ */ React2.createElement(Modal.Modal, {
        activator,
        open,
        onClose,
        title: i18n.translate("Polaris.Tabs.CreateViewModal.title"),
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.CreateViewModal.create"),
          onAction: handlePrimaryAction,
          disabled: isPrimaryActionDisabled
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.CreateViewModal.cancel"),
          onAction: handleSecondaryAction
        }]
      }, /* @__PURE__ */ React2.createElement(Modal.Modal.Section, null, /* @__PURE__ */ React2.createElement(Form.Form, {
        onSubmit: handlePrimaryAction
      }, /* @__PURE__ */ React2.createElement(FormLayout2.FormLayout, null, /* @__PURE__ */ React2.createElement("div", {
        ref: container
      }, /* @__PURE__ */ React2.createElement(TextField2.TextField, {
        label: i18n.translate("Polaris.Tabs.CreateViewModal.label"),
        value,
        onChange: handleChange,
        autoComplete: "off",
        maxLength: MAX_VIEW_NAME_LENGTH,
        showCharacterCount: !0,
        error: hasSameNameError ? i18n.translate("Polaris.Tabs.CreateViewModal.errors.sameName", {
          name: value
        }) : void 0
      }))))));
    }
    exports.CreateViewModal = CreateViewModal;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.js
var require_Tabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tabs/Tabs.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), breakpoints = require_breakpoints(), usePrevious = require_use_previous(), utilities = require_utilities7(), Tabs_module = require_Tabs_scss(), Tab = require_Tab(), TabMeasurer = require_TabMeasurer(), Panel = require_Panel(), List = require_List(), CreateViewModal = require_CreateViewModal(), hooks = require_hooks2(), Text2 = require_Text(), Icon = require_Icon(), UnstyledButton = require_UnstyledButton(), Box = require_Box(), Popover = require_Popover(), Tooltip = require_Tooltip(), CREATE_NEW_VIEW_ID = "create-new-view", Tabs = ({
      tabs,
      children,
      selected,
      newViewAccessibilityLabel,
      canCreateNewView,
      disabled,
      onCreateNewView,
      onSelect,
      fitted,
      disclosureText
    }) => {
      let i18n = hooks.useI18n(), {
        mdDown
      } = breakpoints.useBreakpoints(), scrollRef = React2.useRef(null), wrapRef = React2.useRef(null), selectedTabRef = React2.useRef(null), [state, setState] = React2.useReducer((data, partialData) => ({
        ...data,
        ...partialData
      }), {
        disclosureWidth: 0,
        containerWidth: 1 / 0,
        tabWidths: [],
        visibleTabs: [],
        hiddenTabs: [],
        showDisclosure: !1,
        tabToFocus: -1,
        isNewViewModalActive: !1,
        modalSubmitted: !1,
        isTabsFocused: !1,
        isTabPopoverOpen: !1,
        isTabModalOpen: !1
      }), {
        tabToFocus,
        visibleTabs,
        hiddenTabs,
        showDisclosure,
        isNewViewModalActive,
        modalSubmitted,
        disclosureWidth,
        tabWidths,
        containerWidth,
        isTabsFocused,
        isTabModalOpen,
        isTabPopoverOpen
      } = state, prevModalOpen = usePrevious.usePrevious(isTabModalOpen), prevPopoverOpen = usePrevious.usePrevious(isTabPopoverOpen);
      React2.useEffect(() => {
        prevModalOpen && !isTabModalOpen ? setState({
          isTabsFocused: !0,
          tabToFocus: selected
        }) : prevPopoverOpen && !isTabPopoverOpen && !isTabModalOpen && setState({
          isTabsFocused: !0,
          tabToFocus: selected
        });
      }, [prevPopoverOpen, isTabPopoverOpen, prevModalOpen, isTabModalOpen, selected, tabToFocus]);
      let handleTogglePopover = React2.useCallback((isOpen) => setState({
        isTabPopoverOpen: isOpen
      }), []), handleToggleModal = React2.useCallback((isOpen) => setState({
        isTabModalOpen: isOpen
      }), []), handleCloseNewViewModal = () => {
        setState({
          isNewViewModalActive: !1
        });
      }, handleSaveNewViewModal = async (value) => {
        if (!onCreateNewView)
          return !1;
        let hasExecuted = await onCreateNewView?.(value);
        return hasExecuted && setState({
          modalSubmitted: !0
        }), hasExecuted;
      }, handleClickNewTab = () => {
        setState({
          isNewViewModalActive: !0
        });
      }, handleTabClick = React2.useCallback((id) => {
        let tab = tabs.find((aTab) => aTab.id === id);
        if (tab == null)
          return null;
        let selectedIndex = tabs.indexOf(tab);
        onSelect?.(selectedIndex);
      }, [tabs, onSelect]), renderTabMarkup = React2.useCallback((tab, index) => {
        let handleClick = () => {
          handleTabClick(tab.id), tab.onAction?.();
        }, viewNames2 = tabs.map(({
          content
        }) => content), tabPanelID = tab.panelID || `${tab.id}-panel`;
        return /* @__PURE__ */ React2.createElement(Tab.Tab, Object.assign({}, tab, {
          key: `${index}-${tab.id}`,
          id: tab.id,
          panelID: children ? tabPanelID : void 0,
          disabled: disabled || tab.disabled,
          siblingTabHasFocus: tabToFocus > -1,
          focused: index === tabToFocus,
          selected: index === selected,
          onAction: handleClick,
          accessibilityLabel: tab.accessibilityLabel,
          url: tab.url,
          content: tab.content,
          onToggleModal: handleToggleModal,
          onTogglePopover: handleTogglePopover,
          viewNames: viewNames2,
          ref: index === selected ? selectedTabRef : null
        }));
      }, [disabled, handleTabClick, tabs, children, selected, tabToFocus, handleToggleModal, handleTogglePopover]), handleFocus = React2.useCallback((event) => {
        let target = event.target, isItem = target.classList.contains(Tabs_module.default.Item), isInNaturalDOMOrder = target.closest("[data-tabs-focus-catchment]") || isItem;
        target.classList.contains(Tabs_module.default.DisclosureActivator) || !isInNaturalDOMOrder || setState({
          isTabsFocused: !0
        });
      }, []), handleBlur = React2.useCallback((event) => {
        let target = event.target, relatedTarget = event.relatedTarget, isInNaturalDOMOrder = relatedTarget?.closest?.(`.${Tabs_module.default.Tabs}`), targetIsATab = target?.classList?.contains?.(Tabs_module.default.Tab), focusReceiverIsAnItem = relatedTarget?.classList.contains(Tabs_module.default.Item);
        if (!relatedTarget && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
          setState({
            tabToFocus: -1
          });
          return;
        }
        if (!isInNaturalDOMOrder && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
          setState({
            tabToFocus: -1
          });
          return;
        }
        setState({
          isTabsFocused: !1
        });
      }, [isTabModalOpen]), handleKeyDown = (event) => {
        if (isTabPopoverOpen || isTabModalOpen || isNewViewModalActive)
          return;
        let {
          key
        } = event;
        (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
      };
      React2.useEffect(() => {
        let {
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
        setState({
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        });
      }, [containerWidth, disclosureWidth, tabs, selected, tabWidths, setState]);
      let moveToSelectedTab = React2.useCallback(() => {
        let activeButton = selectedTabRef.current?.querySelector(`.${Tabs_module.default["Tab-active"]}`);
        activeButton && moveToActiveTab(activeButton.offsetLeft);
      }, []);
      React2.useEffect(() => {
        mdDown && moveToSelectedTab();
      }, [moveToSelectedTab, selected, mdDown]), React2.useEffect(() => {
        isTabsFocused && !showDisclosure && setState({
          tabToFocus: selected
        });
      }, [isTabsFocused, selected, setState, showDisclosure]);
      let handleKeyPress = (event) => {
        let {
          showDisclosure: showDisclosure2,
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2,
          tabToFocus: tabToFocus2,
          isNewViewModalActive: isNewViewModalActive2
        } = state;
        if (isTabModalOpen || isTabPopoverOpen || isNewViewModalActive2)
          return;
        let key = event.key, tabsArrayInOrder = showDisclosure2 || mdDown ? visibleTabs2.concat(hiddenTabs2) : [...visibleTabs2], newFocus = tabsArrayInOrder.indexOf(tabToFocus2);
        key === "ArrowRight" && (newFocus += 1, newFocus === tabsArrayInOrder.length && (newFocus = 0)), key === "ArrowLeft" && (newFocus === -1 || newFocus === 0 ? newFocus = tabsArrayInOrder.length - 1 : newFocus -= 1);
        let buttonToFocus = tabsArrayInOrder[newFocus];
        buttonToFocus != null && setState({
          tabToFocus: buttonToFocus
        });
      }, handleDisclosureActivatorClick = () => {
        setState({
          showDisclosure: !showDisclosure,
          tabToFocus: hiddenTabs[0]
        });
      }, handleClose = () => {
        setState({
          showDisclosure: !1
        });
      }, handleMeasurement = React2.useCallback((measurements) => {
        let {
          hiddenTabWidths: tabWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2
        } = measurements, {
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth2, tabWidths2, containerWidth2);
        setState({
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2,
          disclosureWidth: disclosureWidth2,
          containerWidth: containerWidth2,
          tabWidths: tabWidths2
        });
      }, [tabs, selected, setState]), handleListTabClick = (id) => {
        handleTabClick(id), handleClose(), setState({
          isTabsFocused: !0
        });
      }, moveToActiveTab = (offsetLeft) => {
        setTimeout(() => {
          if (scrollRef.current && typeof scrollRef.current.scroll == "function") {
            let scrollRefOffset = wrapRef?.current?.offsetLeft || 0;
            scrollRef?.current?.scroll({
              left: offsetLeft - scrollRefOffset
            });
          }
        }, 0);
      }, createViewA11yLabel = newViewAccessibilityLabel || i18n.translate("Polaris.Tabs.newViewAccessibilityLabel"), tabsToShow = mdDown ? [...visibleTabs, ...hiddenTabs] : visibleTabs, tabsMarkup = tabsToShow.sort((tabA, tabB) => tabA - tabB).filter((tabIndex) => tabs[tabIndex]).map((tabIndex) => renderTabMarkup(tabs[tabIndex], tabIndex)), disclosureActivatorVisible = visibleTabs.length < tabs.length && !mdDown, classname = css.classNames(Tabs_module.default.Tabs, fitted && Tabs_module.default.fitted, disclosureActivatorVisible && Tabs_module.default.fillSpace), wrapperClassNames = css.classNames(Tabs_module.default.Wrapper, canCreateNewView && Tabs_module.default.WrapperWithNewButton), disclosureTabClassName = css.classNames(Tabs_module.default.DisclosureTab, disclosureActivatorVisible && Tabs_module.default["DisclosureTab-visible"]), disclosureButtonClassName = css.classNames(Tabs_module.default.DisclosureActivator), disclosureButtonContent = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel")), /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Tabs_module.default.IconWrap, disclosureActivatorVisible && showDisclosure && Tabs_module.default["IconWrap-open"])
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.ChevronDownIcon,
        tone: "subdued"
      }))), activator = /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        type: "button",
        className: disclosureButtonClassName,
        onClick: handleDisclosureActivatorClick,
        "aria-label": disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel"),
        disabled
      }, disclosureButtonContent), disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]), viewNames = tabs.map(({
        content
      }) => content), tabMeasurer = /* @__PURE__ */ React2.createElement(TabMeasurer.TabMeasurer, {
        tabToFocus,
        activator,
        selected,
        tabs,
        siblingTabHasFocus: tabToFocus > -1,
        handleMeasurement
      }), newTab = /* @__PURE__ */ React2.createElement(Tab.Tab, {
        id: CREATE_NEW_VIEW_ID,
        content: createViewA11yLabel,
        actions: [],
        onAction: handleClickNewTab,
        onFocus: () => {
          modalSubmitted && setState({
            tabToFocus: selected,
            modalSubmitted: !1
          });
        },
        icon: /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: polarisIcons.PlusIcon,
          accessibilityLabel: createViewA11yLabel
        }),
        disabled,
        onTogglePopover: handleTogglePopover,
        onToggleModal: handleToggleModal,
        tabIndexOverride: 0
      }), panelMarkup = children ? tabs.map((_tab, index) => selected === index ? /* @__PURE__ */ React2.createElement(Panel.Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id
      }, children) : /* @__PURE__ */ React2.createElement(Panel.Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id,
        hidden: !0
      })) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.Outer
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        padding: {
          md: "200"
        }
      }, tabMeasurer, /* @__PURE__ */ React2.createElement("div", {
        className: wrapperClassNames,
        ref: scrollRef
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.ButtonWrapper,
        ref: wrapRef
      }, /* @__PURE__ */ React2.createElement("ul", {
        role: tabsMarkup.length > 0 ? "tablist" : void 0,
        className: classname,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyPress,
        "data-tabs-focus-catchment": !0
      }, tabsMarkup, mdDown || tabsToShow.length === 0 ? null : /* @__PURE__ */ React2.createElement("li", {
        className: disclosureTabClassName,
        role: "presentation"
      }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
        preferredPosition: "below",
        preferredAlignment: "left",
        activator,
        active: disclosureActivatorVisible && showDisclosure,
        onClose: handleClose,
        autofocusTarget: "first-node"
      }, /* @__PURE__ */ React2.createElement(List.List, {
        focusIndex: hiddenTabs.indexOf(tabToFocus),
        disclosureTabs,
        onClick: handleListTabClick,
        onKeyPress: handleKeyPress
      })))), canCreateNewView && tabsToShow.length > 0 ? /* @__PURE__ */ React2.createElement("div", {
        className: Tabs_module.default.NewTab
      }, /* @__PURE__ */ React2.createElement(CreateViewModal.CreateViewModal, {
        open: isNewViewModalActive,
        onClose: handleCloseNewViewModal,
        onClickPrimaryAction: handleSaveNewViewModal,
        viewNames,
        activator: disabled ? newTab : /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          content: i18n.translate("Polaris.Tabs.newViewTooltip"),
          preferredPosition: "above",
          hoverDelay: 400
        }, newTab))
      })) : null))), panelMarkup);
    };
    exports.Tabs = Tabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SearchFilterButton/SearchFilterButton.js
var require_SearchFilterButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/SearchFilterButton/SearchFilterButton.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), Tooltip = require_Tooltip(), Button2 = require_Button(), Text2 = require_Text(), InlineStack = require_InlineStack(), Icon = require_Icon();
    function SearchFilterButton({
      onClick,
      label,
      disabled,
      tooltipContent,
      style,
      hideFilters,
      hideQueryField
    }) {
      let iconMarkup = /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "0"
      }, hideQueryField ? null : /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.SearchIcon,
        tone: "base"
      }), hideFilters ? null : /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.FilterIcon,
        tone: "base"
      })), activator = /* @__PURE__ */ React2.createElement("div", {
        style
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        size: "slim",
        onClick,
        disabled,
        icon: iconMarkup,
        accessibilityLabel: label
      })), content = /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "bodyMd",
        alignment: "center"
      }, tooltipContent);
      return /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content,
        preferredPosition: "above",
        hoverDelay: 400
      }, activator);
    }
    exports.SearchFilterButton = SearchFilterButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/EditColumnsButton/EditColumnsButton.js
var require_EditColumnsButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/components/EditColumnsButton/EditColumnsButton.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), hooks = require_hooks2(), Text2 = require_Text(), Tooltip = require_Tooltip(), Button2 = require_Button();
    function EditColumnsButton({
      onClick,
      disabled
    }) {
      let i18n = hooks.useI18n(), tooltipContent = /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "bodyMd",
        alignment: "center"
      }, i18n.translate("Polaris.IndexFilters.EditColumnsButton.tooltip"));
      return /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
        content: tooltipContent,
        preferredPosition: "above",
        hoverDelay: 400
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        size: "slim",
        onClick,
        disabled,
        icon: polarisIcons.LayoutColumns3Icon,
        accessibilityLabel: i18n.translate("Polaris.IndexFilters.EditColumnsButton.accessibilityLabel")
      }));
    }
    exports.EditColumnsButton = EditColumnsButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.js
var require_IndexFilters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/IndexFilters.js"(exports) {
    "use strict";
    var React2 = require("react"), reactTransitionGroup = require("react-transition-group"), css = require_css(), useEventListener = require_use_event_listener(), useToggle = require_use_toggle(), useOnValueChange = require_use_on_value_change(), breakpoints = require_breakpoints(), types = require_types3(), IndexFilters_module = require_IndexFilters_scss(), useIsSticky = require_useIsSticky(), UpdateButtons = require_UpdateButtons(), SortButton = require_SortButton(), Container = require_Container(), Tabs = require_Tabs(), SearchFilterButton = require_SearchFilterButton(), Filters = require_Filters(), EditColumnsButton = require_EditColumnsButton(), hooks = require_hooks2(), InlineStack = require_InlineStack(), Spinner = require_Spinner(), DEFAULT_IGNORED_TAGS = ["INPUT", "SELECT", "TEXTAREA"], TRANSITION_DURATION = 150, defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION}ms var(--p-motion-ease)`,
      opacity: 0
    }, transitionStyles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      },
      unmounted: {
        opacity: 0
      }
    };
    function IndexFilters({
      tabs,
      selected,
      onSelect,
      onSort,
      onSortKeyChange,
      onSortDirectionChange,
      onAddFilterClick,
      sortOptions,
      sortSelected,
      queryValue = "",
      queryPlaceholder,
      primaryAction,
      cancelAction,
      filters,
      appliedFilters,
      onClearAll,
      onQueryChange,
      onQueryFocus,
      onQueryClear,
      onEditStart,
      disabled,
      disableQueryField,
      hideFilters,
      loading,
      mode: mode2,
      setMode,
      disableStickyMode,
      isFlushWhenSticky = !1,
      canCreateNewView = !0,
      onCreateNewView,
      filteringAccessibilityLabel,
      filteringAccessibilityTooltip,
      hideQueryField,
      closeOnChildOverlayClick,
      disableKeyboardShortcuts,
      showEditColumnsButton
    }) {
      let i18n = hooks.useI18n(), {
        mdDown
      } = breakpoints.useBreakpoints(), defaultRef = React2.useRef(null), filteringRef = React2.useRef(null), {
        value: filtersFocused,
        setFalse: setFiltersUnFocused,
        setTrue: setFiltersFocused
      } = useToggle.useToggle(mode2 === types.IndexFiltersMode.Filtering), handleModeChange = (newMode) => {
        newMode === types.IndexFiltersMode.Filtering ? setFiltersFocused() : setFiltersUnFocused();
      };
      useOnValueChange.useOnValueChange(mode2, handleModeChange), useEventListener.useEventListener("keydown", (event) => {
        if (disableKeyboardShortcuts)
          return;
        let {
          key
        } = event, tag = document?.activeElement?.tagName;
        if (mode2 !== types.IndexFiltersMode.Default && event.key === "Escape" && onPressEscape(), key === "f" && mode2 === types.IndexFiltersMode.Default) {
          if (tag && DEFAULT_IGNORED_TAGS.includes(tag))
            return;
          onPressF(), event.preventDefault();
        }
      });
      let {
        intersectionRef,
        measurerRef,
        indexFilteringHeight,
        isSticky
      } = useIsSticky.useIsSticky(mode2, Boolean(disableStickyMode), isFlushWhenSticky), viewNames = tabs.map(({
        content
      }) => content), handleChangeSortButton = React2.useCallback((value) => {
        onSort?.(value);
      }, [onSort]), handleChangeSearch = React2.useCallback((value) => {
        onQueryChange(value);
      }, [onQueryChange]), onExecutedPrimaryAction = ((action, afterEffect) => React2.useCallback(async (name) => {
        await action?.(name) && (setMode(types.IndexFiltersMode.Default), afterEffect?.());
      }, [action, afterEffect]))(primaryAction?.onAction), onExecutedCancelAction = React2.useCallback(() => {
        cancelAction.onAction?.(), setMode(types.IndexFiltersMode.Default);
      }, [cancelAction, setMode]), enhancedPrimaryAction = React2.useMemo(() => primaryAction ? {
        ...primaryAction,
        onAction: onExecutedPrimaryAction
      } : void 0, [onExecutedPrimaryAction, primaryAction]), enhancedCancelAction = React2.useMemo(() => ({
        ...cancelAction,
        onAction: onExecutedCancelAction
      }), [cancelAction, onExecutedCancelAction]), beginEdit = React2.useCallback((mode3) => {
        setMode(mode3), onEditStart?.(mode3);
      }, [onEditStart, setMode]), updateButtonsMarkup = React2.useMemo(() => /* @__PURE__ */ React2.createElement(UpdateButtons.UpdateButtons, {
        primaryAction: enhancedPrimaryAction,
        cancelAction: enhancedCancelAction,
        viewNames,
        disabled
      }), [enhancedPrimaryAction, enhancedCancelAction, disabled, viewNames]), sortMarkup = React2.useMemo(() => sortOptions?.length ? /* @__PURE__ */ React2.createElement(SortButton.SortButton, {
        choices: sortOptions,
        selected: sortSelected,
        onChange: handleChangeSortButton,
        onChangeKey: onSortKeyChange,
        onChangeDirection: onSortDirectionChange,
        disabled
      }) : null, [handleChangeSortButton, onSortDirectionChange, onSortKeyChange, sortOptions, sortSelected, disabled]);
      function handleClickEditColumnsButon() {
        beginEdit(types.IndexFiltersMode.EditingColumns);
      }
      let editColumnsMarkup = showEditColumnsButton ? /* @__PURE__ */ React2.createElement(EditColumnsButton.EditColumnsButton, {
        onClick: handleClickEditColumnsButon,
        disabled
      }) : null, isActionLoading = primaryAction?.loading || cancelAction?.loading;
      function handleClickFilterButton() {
        beginEdit(types.IndexFiltersMode.Filtering);
      }
      let searchFilterTooltipLabelId = disableKeyboardShortcuts ? "Polaris.IndexFilters.searchFilterTooltip" : "Polaris.IndexFilters.searchFilterTooltipWithShortcut", searchFilterTooltip = filteringAccessibilityTooltip || i18n.translate(searchFilterTooltipLabelId), searchFilterAriaLabel = filteringAccessibilityLabel || i18n.translate("Polaris.IndexFilters.searchFilterAccessibilityLabel"), isLoading = loading || isActionLoading;
      function onPressEscape() {
        cancelAction?.onAction(), setMode(types.IndexFiltersMode.Default);
      }
      function handleClearSearch() {
        onQueryClear?.();
      }
      function handleQueryBlur() {
        setFiltersUnFocused();
      }
      function handleQueryFocus() {
        setFiltersFocused(), onQueryFocus?.();
      }
      function onPressF() {
        mode2 === types.IndexFiltersMode.Default && beginEdit(types.IndexFiltersMode.Filtering);
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.IndexFiltersWrapper,
        style: {
          height: indexFilteringHeight
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: intersectionRef
      }), /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(IndexFilters_module.default.IndexFilters, isSticky && IndexFilters_module.default.IndexFiltersSticky, isSticky && isFlushWhenSticky && IndexFilters_module.default.IndexFiltersStickyFlush),
        ref: measurerRef
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        nodeRef: defaultRef,
        in: mode2 !== types.IndexFiltersMode.Filtering,
        timeout: TRANSITION_DURATION
      }, (state) => /* @__PURE__ */ React2.createElement("div", {
        ref: defaultRef
      }, mode2 !== types.IndexFiltersMode.Filtering ? /* @__PURE__ */ React2.createElement(Container.Container, null, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        align: "start",
        blockAlign: "center",
        gap: {
          xs: "0",
          md: "200"
        },
        wrap: !1
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(IndexFilters_module.default.TabsWrapper, mdDown && IndexFilters_module.default.SmallScreenTabsWrapper, isLoading && IndexFilters_module.default.TabsWrapperLoading)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.TabsInner,
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }, /* @__PURE__ */ React2.createElement(Tabs.Tabs, {
        tabs,
        selected,
        onSelect,
        disabled: Boolean(mode2 !== types.IndexFiltersMode.Default || disabled),
        canCreateNewView,
        onCreateNewView
      })), isLoading && mdDown && /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.TabsLoading
      }, /* @__PURE__ */ React2.createElement(Spinner.Spinner, {
        size: "small"
      }))), /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.ActionWrap
      }, isLoading && !mdDown && /* @__PURE__ */ React2.createElement(Spinner.Spinner, {
        size: "small"
      }), mode2 === types.IndexFiltersMode.Default ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, hideFilters && hideQueryField ? null : /* @__PURE__ */ React2.createElement(SearchFilterButton.SearchFilterButton, {
        onClick: handleClickFilterButton,
        label: searchFilterAriaLabel,
        tooltipContent: searchFilterTooltip,
        disabled,
        hideFilters,
        hideQueryField,
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }), editColumnsMarkup, sortMarkup) : null, mode2 === types.IndexFiltersMode.EditingColumns ? updateButtonsMarkup : null))) : null)), /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        nodeRef: filteringRef,
        in: mode2 === types.IndexFiltersMode.Filtering,
        timeout: TRANSITION_DURATION
      }, (state) => /* @__PURE__ */ React2.createElement("div", {
        ref: filteringRef
      }, mode2 === types.IndexFiltersMode.Filtering ? /* @__PURE__ */ React2.createElement(Filters.Filters, {
        queryValue,
        queryPlaceholder,
        onQueryChange: handleChangeSearch,
        onQueryClear: handleClearSearch,
        onQueryFocus: handleQueryFocus,
        onQueryBlur: handleQueryBlur,
        onAddFilterClick,
        filters,
        appliedFilters,
        onClearAll,
        disableFilters: disabled,
        hideFilters,
        hideQueryField,
        disableQueryField: disabled || disableQueryField,
        loading: loading || isActionLoading,
        focused: filtersFocused,
        mountedState: mdDown ? void 0 : state,
        borderlessQueryField: !0,
        closeOnChildOverlayClick
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexFilters_module.default.ButtonWrap
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "200",
        align: "start",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement("div", {
        style: {
          ...defaultStyle,
          ...transitionStyles[state]
        }
      }, updateButtonsMarkup), sortMarkup))) : null))));
    }
    exports.IndexFilters = IndexFilters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useSetIndexFiltersMode/useSetIndexFiltersMode.js
var require_useSetIndexFiltersMode = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexFilters/hooks/useSetIndexFiltersMode/useSetIndexFiltersMode.js"(exports) {
    "use strict";
    var React2 = require("react"), types = require_types3();
    function useSetIndexFiltersMode(defaultMode = types.IndexFiltersMode.Default) {
      let [mode2, setMode] = React2.useState(defaultMode);
      return {
        mode: mode2,
        setMode
      };
    }
    exports.useSetIndexFiltersMode = useSetIndexFiltersMode;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.scss.js
var require_IndexTable_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      IndexTable: "Polaris-IndexTable",
      IndexTableWrapper: "Polaris-IndexTable__IndexTableWrapper",
      "IndexTableWrapper-scrollBarHidden": "Polaris-IndexTable__IndexTableWrapper--scrollBarHidden",
      IndexTableWrapperWithBulkActions: "Polaris-IndexTable__IndexTableWrapperWithBulkActions",
      "LoadingContainer-enter": "Polaris-IndexTable__LoadingContainer--enter",
      "LoadingContainer-enter-active": "Polaris-IndexTable--loadingContainerEnterActive",
      "LoadingContainer-exit": "Polaris-IndexTable__LoadingContainer--exit",
      "LoadingContainer-exit-active": "Polaris-IndexTable--loadingContainerExitActive",
      LoadingPanel: "Polaris-IndexTable__LoadingPanel",
      LoadingPanelRow: "Polaris-IndexTable__LoadingPanelRow",
      LoadingPanelText: "Polaris-IndexTable__LoadingPanelText",
      Table: "Polaris-IndexTable__Table",
      "Table-scrolling": "Polaris-IndexTable__Table--scrolling",
      "TableCell-first": "Polaris-IndexTable__TableCell--first",
      TableCell: "Polaris-IndexTable__TableCell",
      "TableHeading-first": "Polaris-IndexTable__TableHeading--first",
      "TableHeading-second": "Polaris-IndexTable__TableHeading--second",
      "Table-sticky": "Polaris-IndexTable__Table--sticky",
      "Table-unselectable": "Polaris-IndexTable__Table--unselectable",
      TableRow: "Polaris-IndexTable__TableRow",
      "TableRow-unclickable": "Polaris-IndexTable__TableRow--unclickable",
      toneSuccess: "Polaris-IndexTable--toneSuccess",
      "TableRow-child": "Polaris-IndexTable__TableRow--child",
      toneWarning: "Polaris-IndexTable--toneWarning",
      toneCritical: "Polaris-IndexTable--toneCritical",
      toneSubdued: "Polaris-IndexTable--toneSubdued",
      "TableRow-subheader": "Polaris-IndexTable__TableRow--subheader",
      "TableRow-selected": "Polaris-IndexTable__TableRow--selected",
      "TableRow-hovered": "Polaris-IndexTable__TableRow--hovered",
      "TableRow-disabled": "Polaris-IndexTable__TableRow--disabled",
      ZebraStriping: "Polaris-IndexTable__ZebraStriping",
      TableHeading: "Polaris-IndexTable__TableHeading",
      "TableHeading-flush": "Polaris-IndexTable__TableHeading--flush",
      "TableHeading-align-center": "Polaris-IndexTable--tableHeadingAlignCenter",
      "TableHeading-align-end": "Polaris-IndexTable--tableHeadingAlignEnd",
      "TableHeading-extra-padding-right": "Polaris-IndexTable--tableHeadingExtraPaddingRight",
      "TableHeading-sortable": "Polaris-IndexTable__TableHeading--sortable",
      TableHeadingSortButton: "Polaris-IndexTable__TableHeadingSortButton",
      TableHeadingSortIcon: "Polaris-IndexTable__TableHeadingSortIcon",
      "TableHeadingSortButton-heading-align-end": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEnd",
      "TableHeadingSortButton-heading-align-end-currently-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndCurrentlySorted",
      "TableHeadingSortIcon-heading-align-end": "Polaris-IndexTable--tableHeadingSortIconHeadingAlignEnd",
      "TableHeadingSortButton-heading-align-end-previously-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndPreviouslySorted",
      "right-aligned-sort-button-slide-out": "Polaris-IndexTable--rightAlignedSortButtonSlideOut",
      "reveal-right-aligned-sort-button-icon": "Polaris-IndexTable--revealRightAlignedSortButtonIcon",
      TableHeadingUnderline: "Polaris-IndexTable__TableHeadingUnderline",
      TableHeadingTooltipUnderlinePlaceholder: "Polaris-IndexTable__TableHeadingTooltipUnderlinePlaceholder",
      "TableHeadingSortIcon-visible": "Polaris-IndexTable__TableHeadingSortIcon--visible",
      TableHeadingSortSvg: "Polaris-IndexTable__TableHeadingSortSvg",
      SortableTableHeadingWithCustomMarkup: "Polaris-IndexTable__SortableTableHeadingWithCustomMarkup",
      SortableTableHeaderWrapper: "Polaris-IndexTable__SortableTableHeaderWrapper",
      ColumnHeaderCheckboxWrapper: "Polaris-IndexTable__ColumnHeaderCheckboxWrapper",
      FirstStickyHeaderElement: "Polaris-IndexTable__FirstStickyHeaderElement",
      "TableHeading-unselectable": "Polaris-IndexTable__TableHeading--unselectable",
      "TableCell-flush": "Polaris-IndexTable__TableCell--flush",
      "Table-sticky-scrolling": "Polaris-IndexTable--tableStickyScrolling",
      "TableHeading-last": "Polaris-IndexTable__TableHeading--last",
      "Table-sticky-last": "Polaris-IndexTable--tableStickyLast",
      "Table-sortable": "Polaris-IndexTable__Table--sortable",
      StickyTable: "Polaris-IndexTable__StickyTable",
      StickyTableHeader: "Polaris-IndexTable__StickyTableHeader",
      "StickyTableHeader-isSticky": "Polaris-IndexTable__StickyTableHeader--isSticky",
      StickyTableColumnHeader: "Polaris-IndexTable__StickyTableColumnHeader",
      StickyTableHeadings: "Polaris-IndexTable__StickyTableHeadings",
      "StickyTableHeading-second": "Polaris-IndexTable__StickyTableHeading--second",
      unselectable: "Polaris-IndexTable--unselectable",
      "StickyTableHeading-second-scrolling": "Polaris-IndexTable--stickyTableHeadingSecondScrolling",
      ScrollLeft: "Polaris-IndexTable__ScrollLeft",
      ScrollRight: "Polaris-IndexTable__ScrollRight",
      "ScrollRight-onboarding": "Polaris-IndexTable__ScrollRight--onboarding",
      BulkActionsWrapper: "Polaris-IndexTable__BulkActionsWrapper",
      BulkActionsWrapperSticky: "Polaris-IndexTable__BulkActionsWrapperSticky",
      SelectAllActionsWrapper: "Polaris-IndexTable__SelectAllActionsWrapper",
      ScrollBarContainer: "Polaris-IndexTable__ScrollBarContainer",
      scrollBarContainerCondensed: "Polaris-IndexTable--scrollBarContainerCondensed",
      scrollBarContainerHidden: "Polaris-IndexTable--scrollBarContainerHidden",
      ScrollBar: "Polaris-IndexTable__ScrollBar",
      disableTextSelection: "Polaris-IndexTable--disableTextSelection",
      selectMode: "Polaris-IndexTable--selectMode",
      EmptySearchResultWrapper: "Polaris-IndexTable__EmptySearchResultWrapper",
      condensedRow: "Polaris-IndexTable--condensedRow",
      CondensedList: "Polaris-IndexTable__CondensedList",
      HeaderWrapper: "Polaris-IndexTable__HeaderWrapper",
      "StickyTable-condensed": "Polaris-IndexTable__StickyTable--condensed",
      "StickyTableHeader-condensed": "Polaris-IndexTable__StickyTableHeader--condensed",
      ScrollBarContent: "Polaris-IndexTable__ScrollBarContent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/types.js
var require_types4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/types.js"(exports) {
    "use strict";
    var SELECT_ALL_ITEMS = "All";
    exports.SelectionType = void 0;
    (function(SelectionType) {
      SelectionType.All = "all", SelectionType.Page = "page", SelectionType.Multi = "multi", SelectionType.Single = "single", SelectionType.Range = "range";
    })(exports.SelectionType || (exports.SelectionType = {}));
    exports.SELECT_ALL_ITEMS = SELECT_ALL_ITEMS;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/context.js
var require_context17 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/context.js"(exports) {
    "use strict";
    var React2 = require("react"), IndexContext = /* @__PURE__ */ React2.createContext(void 0), IndexSelectionChangeContext = /* @__PURE__ */ React2.createContext(void 0), IndexRowContext = /* @__PURE__ */ React2.createContext(void 0);
    exports.IndexContext = IndexContext;
    exports.IndexRowContext = IndexRowContext;
    exports.IndexSelectionChangeContext = IndexSelectionChangeContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-provider/hooks.js
var require_hooks13 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-provider/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), types = require_types4(), context = require_context17(), hooks = require_hooks2();
    function useIndexSelectionChange() {
      let onSelectionChange = React2.useContext(context.IndexSelectionChangeContext);
      if (!onSelectionChange)
        throw new Error("Missing IndexProvider context");
      return onSelectionChange;
    }
    function useIndexRow() {
      let indexRow = React2.useContext(context.IndexRowContext);
      if (!indexRow)
        throw new Error("Missing IndexProvider context");
      return indexRow;
    }
    function useIndexValue() {
      let index = React2.useContext(context.IndexContext);
      if (!index)
        throw new Error("Missing IndexProvider context");
      return index;
    }
    function useBulkSelectionData({
      selectedItemsCount,
      itemCount,
      hasMoreItems,
      resourceName: passedResourceName
    }) {
      let i18n = hooks.useI18n(), selectable = Boolean(selectedItemsCount), selectMode = selectedItemsCount === "All" || selectedItemsCount > 0, defaultResourceName = {
        singular: i18n.translate("Polaris.IndexProvider.defaultItemSingular"),
        plural: i18n.translate("Polaris.IndexProvider.defaultItemPlural")
      }, resourceName = passedResourceName || defaultResourceName, paginatedSelectAllText = getPaginatedSelectAllText(), bulkActionsLabel = getBulkActionsLabel(), bulkActionsAccessibilityLabel = getBulkActionsAccessibilityLabel(), bulkSelectState = "indeterminate";
      return !selectedItemsCount || selectedItemsCount === 0 ? bulkSelectState = void 0 : (selectedItemsCount === types.SELECT_ALL_ITEMS || selectedItemsCount === itemCount) && (bulkSelectState = !0), {
        paginatedSelectAllText,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        resourceName,
        selectMode,
        bulkSelectState,
        selectable
      };
      function getPaginatedSelectAllText() {
        if (!(!selectable || !hasMoreItems) && selectedItemsCount === types.SELECT_ALL_ITEMS)
          return i18n.translate("Polaris.IndexProvider.allItemsSelected", {
            itemsLength: itemCount,
            resourceNamePlural: resourceName.plural.toLocaleLowerCase()
          });
      }
      function getBulkActionsLabel() {
        let selectedItemsCountLabel = selectedItemsCount === types.SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount;
        return i18n.translate("Polaris.IndexProvider.selected", {
          selectedItemsCount: selectedItemsCountLabel
        });
      }
      function getBulkActionsAccessibilityLabel() {
        let totalItemsCount = itemCount, allSelected = selectedItemsCount === totalItemsCount;
        return totalItemsCount === 1 && allSelected ? i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : totalItemsCount === 1 ? i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : allSelected ? i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural
        }) : i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllMultiple", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural
        });
      }
    }
    function useHandleBulkSelection({
      onSelectionChange = () => {
      }
    }) {
      let lastSelected = React2.useRef(null);
      return React2.useCallback((selectionType, toggleType, selection, sortOrder) => {
        let prevSelected = lastSelected.current;
        if (types.SelectionType.Multi && typeof sortOrder == "number" && (lastSelected.current = sortOrder), selectionType === types.SelectionType.Single || selectionType === types.SelectionType.Multi && (typeof prevSelected != "number" || typeof sortOrder != "number"))
          onSelectionChange(types.SelectionType.Single, toggleType, selection);
        else if (selectionType === types.SelectionType.Multi) {
          let min = Math.min(prevSelected, sortOrder), max = Math.max(prevSelected, sortOrder);
          onSelectionChange(selectionType, toggleType, [min, max]);
        } else
          selectionType === types.SelectionType.Page || selectionType === types.SelectionType.All ? onSelectionChange(selectionType, toggleType) : selectionType === types.SelectionType.Range && onSelectionChange(types.SelectionType.Range, toggleType, selection);
      }, [onSelectionChange]);
    }
    exports.useBulkSelectionData = useBulkSelectionData;
    exports.useHandleBulkSelection = useHandleBulkSelection;
    exports.useIndexRow = useIndexRow;
    exports.useIndexSelectionChange = useIndexSelectionChange;
    exports.useIndexValue = useIndexValue;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexProvider/IndexProvider.js
var require_IndexProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexProvider/IndexProvider.js"(exports) {
    "use strict";
    var React2 = require("react"), hooks = require_hooks13(), context = require_context17();
    function IndexProvider({
      children,
      resourceName: passedResourceName,
      loading,
      onSelectionChange,
      selectedItemsCount = 0,
      itemCount,
      hasMoreItems,
      condensed,
      selectable: isSelectableIndex = !0
    }) {
      let {
        paginatedSelectAllText,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        resourceName,
        selectMode,
        bulkSelectState
      } = hooks.useBulkSelectionData({
        selectedItemsCount,
        itemCount,
        hasMoreItems,
        resourceName: passedResourceName
      }), handleSelectionChange = hooks.useHandleBulkSelection({
        onSelectionChange
      }), contextValue = React2.useMemo(() => ({
        itemCount,
        selectMode: selectMode && isSelectableIndex,
        selectable: isSelectableIndex,
        resourceName,
        loading,
        paginatedSelectAllText,
        hasMoreItems,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        bulkSelectState,
        selectedItemsCount,
        condensed
      }), [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]), rowContextValue = React2.useMemo(() => ({
        selectable: isSelectableIndex,
        selectMode: selectMode && isSelectableIndex,
        condensed
      }), [condensed, selectMode, isSelectableIndex]);
      return /* @__PURE__ */ React2.createElement(context.IndexContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React2.createElement(context.IndexRowContext.Provider, {
        value: rowContextValue
      }, /* @__PURE__ */ React2.createElement(context.IndexSelectionChangeContext.Provider, {
        value: handleSelectionChange
      }, children)));
    }
    exports.IndexProvider = IndexProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Cell/Cell.js
var require_Cell3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Cell/Cell.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), IndexTable_module = require_IndexTable_scss(), Cell = /* @__PURE__ */ React2.memo(function({
      children,
      className: customClassName,
      flush,
      colSpan,
      headers,
      scope,
      as = "td",
      id
    }) {
      let className = css.classNames(customClassName, IndexTable_module.default.TableCell, flush && IndexTable_module.default["TableCell-flush"]);
      return /* @__PURE__ */ React2.createElement(as, {
        id,
        colSpan,
        headers,
        scope,
        className
      }, children);
    });
    exports.Cell = Cell;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.scss.js
var require_Checkbox_scss2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TableCellContentContainer: "Polaris-IndexTable-Checkbox__TableCellContentContainer",
      Wrapper: "Polaris-IndexTable-Checkbox__Wrapper"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-table/context.js
var require_context18 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-table/context.js"(exports) {
    "use strict";
    var React2 = require("react"), RowContext = /* @__PURE__ */ React2.createContext({}), RowHoveredContext = /* @__PURE__ */ React2.createContext(void 0), scrollDefaultContext = {
      scrollableContainer: null,
      canScrollLeft: !1,
      canScrollRight: !1
    }, ScrollContext = /* @__PURE__ */ React2.createContext(scrollDefaultContext);
    exports.RowContext = RowContext;
    exports.RowHoveredContext = RowHoveredContext;
    exports.ScrollContext = ScrollContext;
    exports.scrollDefaultContext = scrollDefaultContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.js
var require_Checkbox2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Checkbox/Checkbox.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), css = require_css(), setRootProperty = require_set_root_property(), IndexTable_module = require_IndexTable_scss(), Checkbox_module = require_Checkbox_scss2(), hooks$1 = require_hooks13(), context = require_context18(), hooks = require_hooks2(), Checkbox$1 = require_Checkbox(), Checkbox = /* @__PURE__ */ React2.memo(function({
      accessibilityLabel
    }) {
      let i18n = hooks.useI18n(), {
        resourceName
      } = hooks$1.useIndexValue(), {
        itemId,
        selected,
        disabled,
        onInteraction
      } = React2.useContext(context.RowContext), wrapperClassName = css.classNames(Checkbox_module.default.Wrapper), label = accessibilityLabel || i18n.translate("Polaris.IndexTable.selectItem", {
        resourceName: resourceName.singular
      });
      return /* @__PURE__ */ React2.createElement(CheckboxWrapper, null, /* @__PURE__ */ React2.createElement("div", {
        className: Checkbox_module.default.TableCellContentContainer
      }, /* @__PURE__ */ React2.createElement("div", {
        className: wrapperClassName,
        onClick: onInteraction,
        onKeyUp: noop
      }, /* @__PURE__ */ React2.createElement(Checkbox$1.Checkbox, {
        id: `Select-${itemId}`,
        label,
        labelHidden: !0,
        checked: selected,
        disabled
      }))));
    });
    function CheckboxWrapper({
      children
    }) {
      let {
        position
      } = React2.useContext(context.RowContext), checkboxNode = React2.useRef(null), handleResize = React2.useCallback(debounce.debounce(() => {
        if (position !== 0 || !checkboxNode.current)
          return;
        let {
          width
        } = checkboxNode.current.getBoundingClientRect();
        setRootProperty.setRootProperty("--pc-checkbox-offset", `${width}px`);
      }), [position]);
      React2.useEffect(() => {
        handleResize();
      }, [handleResize]), React2.useEffect(() => {
        if (checkboxNode.current)
          return window.addEventListener("resize", handleResize), () => {
            window.removeEventListener("resize", handleResize);
          };
      }, [handleResize]);
      let checkboxClassName = css.classNames(IndexTable_module.default.TableCell, IndexTable_module.default["TableCell-first"]);
      return /* @__PURE__ */ React2.createElement("td", {
        className: checkboxClassName,
        ref: checkboxNode
      }, children);
    }
    function noop() {
    }
    exports.Checkbox = Checkbox;
    exports.CheckboxWrapper = CheckboxWrapper;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Row/Row.js
var require_Row = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/Row/Row.js"(exports) {
    "use strict";
    var React2 = require("react"), useToggle = require_use_toggle(), css = require_css(), IndexTable_module = require_IndexTable_scss(), hooks = require_hooks13(), types = require_types4(), Checkbox = require_Checkbox2(), context = require_context18(), Row = /* @__PURE__ */ React2.memo(function({
      children,
      selected,
      id,
      position,
      tone,
      disabled,
      selectionRange,
      rowType = "data",
      accessibilityLabel,
      onNavigation,
      onClick
    }) {
      let {
        selectable,
        selectMode,
        condensed
      } = hooks.useIndexRow(), onSelectionChange = hooks.useIndexSelectionChange(), {
        value: hovered,
        setTrue: setHoverIn,
        setFalse: setHoverOut
      } = useToggle.useToggle(!1), handleInteraction = React2.useCallback((event) => {
        event.stopPropagation();
        let selectionType = types.SelectionType.Single;
        if ("key" in event && event.key !== " " || !onSelectionChange)
          return;
        event.nativeEvent.shiftKey ? selectionType = types.SelectionType.Multi : selectionRange && (selectionType = types.SelectionType.Range), onSelectionChange(selectionType, !selected, selectionRange ?? id, position);
      }, [id, onSelectionChange, selected, selectionRange, position]), contextValue = React2.useMemo(() => ({
        itemId: id,
        selected,
        position,
        onInteraction: handleInteraction,
        disabled
      }), [id, selected, disabled, position, handleInteraction]), primaryLinkElement = React2.useRef(null), isNavigating = React2.useRef(!1), tableRowRef = React2.useRef(null), tableRowCallbackRef = React2.useCallback((node) => {
        tableRowRef.current = node;
        let el = node?.querySelector("[data-primary-link]");
        el && (primaryLinkElement.current = el);
      }, []), rowClassName = css.classNames(IndexTable_module.default.TableRow, rowType === "subheader" && IndexTable_module.default["TableRow-subheader"], rowType === "child" && IndexTable_module.default["TableRow-child"], selectable && condensed && IndexTable_module.default.condensedRow, selected && IndexTable_module.default["TableRow-selected"], hovered && !condensed && IndexTable_module.default["TableRow-hovered"], disabled && IndexTable_module.default["TableRow-disabled"], tone && IndexTable_module.default[css.variationName("tone", tone)], !selectable && !primaryLinkElement.current && IndexTable_module.default["TableRow-unclickable"]), handleRowClick;
      (!disabled && selectable || primaryLinkElement.current) && (handleRowClick = (event) => {
        if (rowType !== "subheader" && !(!tableRowRef.current || isNavigating.current)) {
          if (event.stopPropagation(), event.preventDefault(), onClick) {
            onClick();
            return;
          }
          if (primaryLinkElement.current && !selectMode) {
            isNavigating.current = !0;
            let {
              ctrlKey,
              metaKey
            } = event.nativeEvent;
            if (onNavigation && onNavigation(id), (ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {
              isNavigating.current = !1, window.open(primaryLinkElement.current.href, "_blank");
              return;
            }
            primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));
          } else
            isNavigating.current = !1, handleInteraction(event);
        }
      });
      let RowWrapper = condensed ? "li" : "tr", checkboxMarkup = selectable ? /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        accessibilityLabel
      }) : null;
      return /* @__PURE__ */ React2.createElement(context.RowContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ React2.createElement(context.RowHoveredContext.Provider, {
        value: hovered
      }, /* @__PURE__ */ React2.createElement(RowWrapper, {
        key: id,
        id,
        className: rowClassName,
        onMouseEnter: setHoverIn,
        onMouseLeave: setHoverOut,
        onClick: handleRowClick,
        ref: tableRowCallbackRef
      }, checkboxMarkup, children)));
    });
    exports.Row = Row;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/BulkActions/hooks/use-is-bulk-actions-sticky.js
var require_use_is_bulk_actions_sticky = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/BulkActions/hooks/use-is-bulk-actions-sticky.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), DEBOUNCE_PERIOD = 250, PADDING_IN_SELECT_MODE = 92;
    function useIsBulkActionsSticky(selectMode) {
      let hasIOSupport = typeof window < "u" && Boolean(window.IntersectionObserver), [isBulkActionsSticky, setIsSticky] = React2.useState(!1), [bulkActionsAbsoluteOffset, setBulkActionsAbsoluteOffset] = React2.useState(0), [bulkActionsMaxWidth, setBulkActionsMaxWidth] = React2.useState(0), [bulkActionsOffsetLeft, setBulkActionsOffsetLeft] = React2.useState(0), bulkActionsIntersectionRef = React2.useRef(null), tableMeasurerRef = React2.useRef(null), handleIntersect = (entries) => {
        entries.forEach((entry2) => {
          setIsSticky(!entry2.isIntersecting);
        });
      }, options = {
        root: null,
        rootMargin: "-12px",
        threshold: 0
      }, observerRef = React2.useRef(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null), computeTableDimensions = React2.useCallback(() => {
        let node = tableMeasurerRef.current;
        if (!node)
          return {
            maxWidth: 0,
            offsetHeight: 0,
            offsetLeft: 0
          };
        let box = node.getBoundingClientRect(), paddingHeight = selectMode ? PADDING_IN_SELECT_MODE : 0, offsetHeight = box.height - paddingHeight, maxWidth = box.width, offsetLeft = box.left;
        setBulkActionsAbsoluteOffset(offsetHeight), setBulkActionsMaxWidth(maxWidth), setBulkActionsOffsetLeft(offsetLeft);
      }, [selectMode]);
      return React2.useEffect(() => {
        computeTableDimensions();
        let debouncedComputeTableHeight = debounce.debounce(computeTableDimensions, DEBOUNCE_PERIOD, {
          trailing: !0
        });
        return window.addEventListener("resize", debouncedComputeTableHeight), () => window.removeEventListener("resize", debouncedComputeTableHeight);
      }, [computeTableDimensions]), React2.useEffect(() => {
        let observer = observerRef.current;
        if (!observer)
          return;
        let node = bulkActionsIntersectionRef.current;
        return node && observer.observe(node), () => {
          observer?.disconnect();
        };
      }, [bulkActionsIntersectionRef]), {
        bulkActionsIntersectionRef,
        tableMeasurerRef,
        isBulkActionsSticky,
        bulkActionsAbsoluteOffset,
        bulkActionsMaxWidth,
        bulkActionsOffsetLeft,
        computeTableDimensions
      };
    }
    exports.useIsBulkActionsSticky = useIsBulkActionsSticky;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/utilities/utilities.js
var require_utilities8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/utilities/utilities.js"(exports) {
    "use strict";
    function getTableHeadingsBySelector(wrapperElement, selector) {
      return wrapperElement ? Array.from(wrapperElement.querySelectorAll(selector)) : [];
    }
    exports.getTableHeadingsBySelector = getTableHeadingsBySelector;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.scss.js
var require_ScrollContainer_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ScrollContainer: "Polaris-IndexTable-ScrollContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.js
var require_ScrollContainer = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/components/ScrollContainer/ScrollContainer.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), ScrollContainer_module = require_ScrollContainer_scss(), context = require_context18();
    function ScrollContainer({
      children,
      scrollableContainerRef,
      onScroll
    }) {
      React2.useEffect(() => {
        scrollableContainerRef.current && scrollableContainerRef.current.dispatchEvent(new Event("scroll"));
      }, [scrollableContainerRef]);
      let [containerScroll, setContainerScroll] = React2.useState(context.scrollDefaultContext), handleScroll = React2.useCallback(debounce.debounce(() => {
        if (!scrollableContainerRef.current)
          return;
        let availableScrollAmount = scrollableContainerRef.current.scrollWidth - scrollableContainerRef.current.offsetWidth, canScrollLeft = scrollableContainerRef.current.scrollLeft > 0, canScrollRight = scrollableContainerRef.current.scrollLeft < availableScrollAmount;
        onScroll(canScrollLeft, canScrollRight), setContainerScroll({
          scrollableContainer: scrollableContainerRef.current,
          canScrollLeft,
          canScrollRight
        });
      }, 40, {
        trailing: !0,
        leading: !0,
        maxWait: 40
      }), [onScroll, scrollableContainerRef]);
      return /* @__PURE__ */ React2.createElement(context.ScrollContext.Provider, {
        value: containerScroll
      }, /* @__PURE__ */ React2.createElement("div", {
        className: ScrollContainer_module.default.ScrollContainer,
        ref: scrollableContainerRef,
        onScroll: handleScroll
      }, children));
    }
    exports.ScrollContainer = ScrollContainer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.scss.js
var require_SelectAllActions_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SelectAllActions: "Polaris-SelectAllActions",
      "SelectAllActions-entering": "Polaris-SelectAllActions__SelectAllActions--entering",
      "SelectAllActions-exiting": "Polaris-SelectAllActions__SelectAllActions--exiting",
      "SelectAllActions-entered": "Polaris-SelectAllActions__SelectAllActions--entered",
      "SelectAllActions-exited": "Polaris-SelectAllActions__SelectAllActions--exited",
      PaginatedSelectAll: "Polaris-SelectAllActions__PaginatedSelectAll",
      AllAction: "Polaris-SelectAllActions__AllAction"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.scss.js
var require_CheckableButton_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      CheckableButton: "Polaris-CheckableButton",
      Checkbox: "Polaris-CheckableButton__Checkbox",
      Label: "Polaris-CheckableButton__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.js
var require_CheckableButton = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/CheckableButton/CheckableButton.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), CheckableButton_module = require_CheckableButton_scss(), Checkbox = require_Checkbox(), CheckableButton = /* @__PURE__ */ React2.forwardRef(function({
      accessibilityLabel,
      label = "",
      onToggleAll,
      selected,
      disabled,
      ariaLive
    }, ref) {
      let checkBoxRef = React2.useRef(null);
      function focus() {
        checkBoxRef?.current?.focus();
      }
      React2.useImperativeHandle(ref, () => ({
        focus
      }));
      let className = css.classNames(CheckableButton_module.default.CheckableButton);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        onClick: onToggleAll
      }, /* @__PURE__ */ React2.createElement("div", {
        className: CheckableButton_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        label: accessibilityLabel,
        labelHidden: !0,
        checked: selected,
        disabled,
        onChange: onToggleAll,
        ref: checkBoxRef
      })), /* @__PURE__ */ React2.createElement("span", {
        className: CheckableButton_module.default.Label,
        "aria-live": ariaLive
      }, label));
    });
    exports.CheckableButton = CheckableButton;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.js
var require_SelectAllActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SelectAllActions/SelectAllActions.js"(exports) {
    "use strict";
    var React2 = require("react"), reactTransitionGroup = require("react-transition-group"), css = require_css(), SelectAllActions_module = require_SelectAllActions_scss(), CheckableButton = require_CheckableButton(), UnstyledButton = require_UnstyledButton(), SelectAllActions = /* @__PURE__ */ React2.forwardRef(function({
      accessibilityLabel,
      label,
      selected,
      selectMode,
      paginatedSelectAllText,
      paginatedSelectAllAction,
      disabled,
      onToggleAll
    }, ref) {
      let paginatedSelectAllActionMarkup = paginatedSelectAllAction ? /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: SelectAllActions_module.default.AllAction,
        onClick: paginatedSelectAllAction.onAction,
        size: "slim",
        disabled
      }, paginatedSelectAllAction.content) : null, hasTextAndAction = paginatedSelectAllText && paginatedSelectAllAction, paginatedSelectAllMarkup = paginatedSelectAllActionMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: SelectAllActions_module.default.PaginatedSelectAll
      }, paginatedSelectAllActionMarkup) : null, checkableButtonProps = {
        accessibilityLabel,
        label: hasTextAndAction ? paginatedSelectAllText : label,
        selected,
        onToggleAll,
        disabled,
        ariaLive: hasTextAndAction ? "polite" : void 0,
        ref
      };
      return /* @__PURE__ */ React2.createElement(reactTransitionGroup.Transition, {
        timeout: 0,
        in: selectMode,
        key: "markup"
      }, (status) => {
        let wrapperClasses = css.classNames(SelectAllActions_module.default.SelectAllActions, SelectAllActions_module.default[`SelectAllActions-${status}`]);
        return /* @__PURE__ */ React2.createElement("div", {
          className: wrapperClasses
        }, /* @__PURE__ */ React2.createElement(CheckableButton.CheckableButton, checkableButtonProps), paginatedSelectAllMarkup);
      });
    });
    exports.SelectAllActions = SelectAllActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.js
var require_IndexTable = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/IndexTable/IndexTable.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), reactTransitionGroup = require("react-transition-group"), polarisTokens = require("@shopify/polaris-tokens"), debounce = require_debounce(), useToggle = require_use_toggle(), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), css = require_css(), useTheme = require_use_theme(), IndexTable_module = require_IndexTable_scss(), IndexProvider = require_IndexProvider(), Cell = require_Cell3(), Row = require_Row(), useIsBulkActionsSticky = require_use_is_bulk_actions_sticky(), types = require_types4(), utilities = require_utilities8(), EmptySearchResult = require_EmptySearchResult(), ScrollContainer = require_ScrollContainer(), BulkActions = require_BulkActions(), SelectAllActions = require_SelectAllActions(), Pagination = require_Pagination(), hooks = require_hooks13(), hooks$1 = require_hooks2(), LegacyStack = require_LegacyStack(), Spinner = require_Spinner(), AfterInitialMount = require_AfterInitialMount(), EventListener = require_EventListener(), Checkbox = require_Checkbox(), Badge = require_Badge(), Text2 = require_Text(), UnstyledButton = require_UnstyledButton(), Tooltip = require_Tooltip(), Sticky = require_Sticky(), SCROLL_BAR_PADDING = 4, SCROLL_BAR_DEBOUNCE_PERIOD = 300;
    function IndexTableBase({
      headings,
      bulkActions = [],
      promotedBulkActions = [],
      children,
      emptyState,
      sort,
      paginatedSelectAllActionText,
      lastColumnSticky = !1,
      sortable,
      sortDirection,
      defaultSortDirection = "descending",
      sortColumnIndex,
      onSort,
      sortToggleLabels,
      hasZebraStriping,
      ...restProps
    }) {
      let theme = useTheme.useTheme(), {
        loading,
        bulkSelectState,
        resourceName,
        bulkActionsAccessibilityLabel,
        selectMode,
        selectable = restProps.selectable,
        paginatedSelectAllText,
        itemCount,
        hasMoreItems,
        selectedItemsCount,
        condensed
      } = hooks.useIndexValue(), handleSelectionChange = hooks.useIndexSelectionChange(), i18n = hooks$1.useI18n(), {
        value: hasMoreLeftColumns,
        toggle: toggleHasMoreLeftColumns
      } = useToggle.useToggle(!1), tablePosition = React2.useRef({
        top: 0,
        left: 0
      }), tableHeadingRects = React2.useRef([]), scrollableContainerElement = React2.useRef(null), tableElement = React2.useRef(null), condensedListElement = React2.useRef(null), loadingElement = React2.useRef(null), [tableInitialized, setTableInitialized] = React2.useState(!1), [stickyWrapper, setStickyWrapper] = React2.useState(null), [hideScrollContainer, setHideScrollContainer] = React2.useState(!1), tableHeadings = React2.useRef([]), stickyTableHeadings = React2.useRef([]), stickyHeaderWrapperElement = React2.useRef(null), firstStickyHeaderElement = React2.useRef(null), stickyHeaderElement = React2.useRef(null), scrollBarElement = React2.useRef(null), scrollContainerElement = React2.useRef(null), scrollingWithBar = React2.useRef(!1), scrollingContainer = React2.useRef(!1), lastSortedColumnIndex = React2.useRef(sortColumnIndex), renderAfterSelectEvent = React2.useRef(!1), lastSelectedItemsCount = React2.useRef(0), hasSelected = React2.useRef(!1);
      selectedItemsCount !== lastSelectedItemsCount.current && (renderAfterSelectEvent.current = !0, lastSelectedItemsCount.current = selectedItemsCount), !hasSelected.current && selectedItemsCount !== 0 && (hasSelected.current = !0);
      let {
        bulkActionsIntersectionRef,
        tableMeasurerRef,
        isBulkActionsSticky,
        bulkActionsAbsoluteOffset,
        bulkActionsMaxWidth,
        bulkActionsOffsetLeft,
        computeTableDimensions
      } = useIsBulkActionsSticky.useIsBulkActionsSticky(selectMode);
      React2.useEffect(() => {
        computeTableDimensions();
      }, [computeTableDimensions, itemCount]);
      let tableBodyRef = React2.useCallback((node) => {
        node !== null && !tableInitialized && setTableInitialized(!0);
      }, [tableInitialized]), handleSelectAllItemsInStore = React2.useCallback(() => {
        handleSelectionChange(selectedItemsCount === types.SELECT_ALL_ITEMS ? types.SelectionType.Page : types.SelectionType.All, !0);
      }, [handleSelectionChange, selectedItemsCount]), calculateFirstHeaderOffset = React2.useCallback(() => selectable ? condensed ? tableHeadingRects.current[0].offsetWidth : tableHeadingRects.current[0].offsetWidth + tableHeadingRects.current[1].offsetWidth : tableHeadingRects.current[0].offsetWidth, [condensed, selectable]), resizeTableHeadings = React2.useMemo(() => debounce.debounce(() => {
        if (!tableElement.current || !scrollableContainerElement.current)
          return;
        let boundingRect = scrollableContainerElement.current.getBoundingClientRect();
        tablePosition.current = {
          top: boundingRect.top,
          left: boundingRect.left
        }, tableHeadingRects.current = tableHeadings.current.map((heading) => ({
          offsetWidth: heading.offsetWidth || 0,
          offsetLeft: heading.offsetLeft || 0
        })), tableHeadings.current.length !== 0 && (selectable && tableHeadings.current.length > 1 && (tableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`), stickyTableHeadings.current.forEach((heading, index) => {
          let minWidth = 0;
          index === 0 && (!isBreakpointsXS() || !selectable) ? minWidth = calculateFirstHeaderOffset() : selectable && tableHeadingRects.current.length > index ? minWidth = tableHeadingRects.current[index]?.offsetWidth || 0 : !selectable && tableHeadingRects.current.length >= index && (minWidth = tableHeadingRects.current[index - 1]?.offsetWidth || 0), heading.style.minWidth = `${minWidth}px`;
        }));
      }), [calculateFirstHeaderOffset, selectable]), resizeTableScrollBar = React2.useCallback(() => {
        scrollBarElement.current && tableElement.current && tableInitialized && (scrollBarElement.current.style.setProperty("--pc-index-table-scroll-bar-content-width", `${tableElement.current.offsetWidth - SCROLL_BAR_PADDING}px`), setHideScrollContainer(scrollContainerElement.current?.offsetWidth === tableElement.current?.offsetWidth));
      }, [tableInitialized]), debounceResizeTableScrollbar = React2.useCallback(debounce.debounce(resizeTableScrollBar, SCROLL_BAR_DEBOUNCE_PERIOD, {
        trailing: !0
      }), [resizeTableScrollBar]), [canScrollRight, setCanScrollRight] = React2.useState(!0), handleCanScrollRight = React2.useCallback(debounce.debounce(() => {
        if (!lastColumnSticky || !tableElement.current || !scrollableContainerElement.current)
          return;
        let tableRect = tableElement.current.getBoundingClientRect(), scrollableRect = scrollableContainerElement.current.getBoundingClientRect();
        setCanScrollRight(tableRect.width > scrollableRect.width);
      }), [lastColumnSticky]);
      React2.useEffect(() => {
        handleCanScrollRight();
      }, [handleCanScrollRight]);
      let [canFitStickyColumn, setCanFitStickyColumn] = React2.useState(!0), handleCanFitStickyColumn = React2.useCallback(() => {
        if (!scrollableContainerElement.current || !tableHeadings.current.length)
          return;
        let scrollableRect = scrollableContainerElement.current.getBoundingClientRect(), checkboxColumnWidth = selectable ? tableHeadings.current[0].getBoundingClientRect().width : 0, firstStickyColumnWidth = tableHeadings.current[selectable ? 1 : 0].getBoundingClientRect().width, lastColumnIsNotTheFirst = selectable ? tableHeadings.current.length > 2 : 1, lastStickyColumnWidth = lastColumnSticky && lastColumnIsNotTheFirst ? tableHeadings.current[tableHeadings.current.length - 1].getBoundingClientRect().width : 0, restOfContentMinWidth = 100;
        setCanFitStickyColumn(scrollableRect.width > firstStickyColumnWidth + checkboxColumnWidth + lastStickyColumnWidth + restOfContentMinWidth);
      }, [lastColumnSticky, selectable]);
      React2.useEffect(() => {
        tableInitialized && handleCanFitStickyColumn();
      }, [handleCanFitStickyColumn, tableInitialized]);
      let handleResize = React2.useCallback(() => {
        scrollBarElement.current?.style.setProperty("--pc-index-table-scroll-bar-content-width", "0px"), resizeTableHeadings(), debounceResizeTableScrollbar(), handleCanScrollRight(), handleCanFitStickyColumn();
      }, [resizeTableHeadings, debounceResizeTableScrollbar, handleCanScrollRight, handleCanFitStickyColumn]), handleScrollContainerScroll = React2.useCallback((canScrollLeft, canScrollRight2) => {
        !scrollableContainerElement.current || !scrollBarElement.current || (scrollingWithBar.current || (scrollingContainer.current = !0, scrollBarElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft), scrollingWithBar.current = !1, stickyHeaderElement.current && (stickyHeaderElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft), (canScrollLeft && !hasMoreLeftColumns || !canScrollLeft && hasMoreLeftColumns) && toggleHasMoreLeftColumns(), setCanScrollRight(canScrollRight2));
      }, [hasMoreLeftColumns, toggleHasMoreLeftColumns]), handleScrollBarScroll = React2.useCallback(() => {
        !scrollableContainerElement.current || !scrollBarElement.current || (scrollingContainer.current || (scrollingWithBar.current = !0, scrollableContainerElement.current.scrollLeft = scrollBarElement.current.scrollLeft), scrollingContainer.current = !1);
      }, []);
      useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        tableHeadings.current = utilities.getTableHeadingsBySelector(tableElement.current, "[data-index-table-heading]"), stickyTableHeadings.current = utilities.getTableHeadingsBySelector(stickyHeaderWrapperElement.current, "[data-index-table-sticky-heading]"), resizeTableHeadings();
      }, [headings, resizeTableHeadings, firstStickyHeaderElement, tableInitialized]), React2.useEffect(() => {
        resizeTableScrollBar(), setStickyWrapper(condensed ? condensedListElement.current : tableElement.current);
      }, [tableInitialized, resizeTableScrollBar, condensed]);
      let hasBulkActions = Boolean(promotedBulkActions && promotedBulkActions.length > 0 || bulkActions && bulkActions.length > 0), headingsMarkup = headings.map(renderHeading).reduce((acc, heading) => acc.concat(heading), []), bulkActionsSelectable = Boolean(promotedBulkActions.length > 0 || bulkActions.length > 0), stickyColumnHeaderStyle = tableHeadingRects.current && tableHeadingRects.current.length > 0 ? {
        minWidth: calculateFirstHeaderOffset()
      } : void 0, stickyColumnHeader = /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(IndexTable_module.default.TableHeading, selectable && IndexTable_module.default["TableHeading-first"], headings[0].flush && IndexTable_module.default["TableHeading-flush"]),
        key: getHeadingKey(headings[0]),
        style: stickyColumnHeaderStyle,
        "data-index-table-sticky-heading": !0
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        spacing: "none",
        wrap: !1,
        alignment: "center"
      }, selectable && /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.FirstStickyHeaderElement,
        ref: firstStickyHeaderElement
      }, renderCheckboxContent()), selectable && /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default["StickyTableHeading-second-scrolling"]
      }, renderHeadingContent(headings[0], 0)), !selectable && /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(IndexTable_module.default.FirstStickyHeaderElement),
        ref: firstStickyHeaderElement
      }, renderHeadingContent(headings[0], 0)))), stickyHeadingsMarkup = headings.map(renderStickyHeading), selectedItemsCountLabel = selectedItemsCount === types.SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount, handleTogglePage = React2.useCallback(() => {
        handleSelectionChange(types.SelectionType.Page, Boolean(!bulkSelectState || bulkSelectState === "indeterminate"));
      }, [bulkSelectState, handleSelectionChange]), paginatedSelectAllAction = getPaginatedSelectAllAction(), loadingTransitionClassNames = {
        enter: IndexTable_module.default["LoadingContainer-enter"],
        enterActive: IndexTable_module.default["LoadingContainer-enter-active"],
        exit: IndexTable_module.default["LoadingContainer-exit"],
        exitActive: IndexTable_module.default["LoadingContainer-exit-active"]
      }, loadingMarkup = /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        in: loading,
        classNames: loadingTransitionClassNames,
        timeout: parseInt(theme.motion["motion-duration-100"], 10),
        nodeRef: loadingElement,
        appear: !0,
        unmountOnExit: !0
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.LoadingPanel,
        ref: loadingElement
      }, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.LoadingPanelRow
      }, /* @__PURE__ */ React2.createElement(Spinner.Spinner, {
        size: "small"
      }), /* @__PURE__ */ React2.createElement("span", {
        className: IndexTable_module.default.LoadingPanelText
      }, i18n.translate("Polaris.IndexTable.resourceLoadingAccessibilityLabel", {
        resourceNamePlural: resourceName.plural.toLocaleLowerCase()
      }))))), stickyTableClassNames = css.classNames(IndexTable_module.default.StickyTable, condensed && IndexTable_module.default["StickyTable-condensed"]), shouldShowBulkActions = bulkActionsSelectable && selectedItemsCount, bulkActionClassNames = css.classNames(IndexTable_module.default.BulkActionsWrapper, isBulkActionsSticky && IndexTable_module.default.BulkActionsWrapperSticky), shouldShowActions = !condensed || selectedItemsCount, promotedActions = shouldShowActions ? promotedBulkActions : [], actions = shouldShowActions ? bulkActions : [], bulkActionsMarkup = shouldShowBulkActions && !condensed ? /* @__PURE__ */ React2.createElement("div", {
        className: bulkActionClassNames,
        style: {
          insetBlockStart: isBulkActionsSticky ? void 0 : bulkActionsAbsoluteOffset,
          width: bulkActionsMaxWidth,
          insetInlineStart: isBulkActionsSticky ? bulkActionsOffsetLeft : void 0
        }
      }, /* @__PURE__ */ React2.createElement(BulkActions.BulkActions, {
        selectMode,
        promotedActions,
        actions,
        onSelectModeToggle: condensed ? handleSelectModeToggle : void 0,
        isSticky: isBulkActionsSticky,
        width: bulkActionsMaxWidth
      })) : null, stickyHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: stickyTableClassNames,
        role: "presentation"
      }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
        boundingElement: stickyWrapper
      }, (isSticky) => {
        let stickyHeaderClassNames = css.classNames(IndexTable_module.default.StickyTableHeader, isSticky && IndexTable_module.default["StickyTableHeader-isSticky"]), selectAllActionsClassName = css.classNames(IndexTable_module.default.SelectAllActionsWrapper, condensed && IndexTable_module.default["StickyTableHeader-condensed"], isSticky && IndexTable_module.default["StickyTableHeader-isSticky"]), selectAllActionsMarkup = shouldShowBulkActions && !condensed ? /* @__PURE__ */ React2.createElement("div", {
          className: selectAllActionsClassName
        }, /* @__PURE__ */ React2.createElement(SelectAllActions.SelectAllActions, {
          label: i18n.translate("Polaris.IndexTable.selected", {
            selectedItemsCount: selectedItemsCountLabel
          }),
          accessibilityLabel: bulkActionsAccessibilityLabel,
          selected: bulkSelectState,
          selectMode,
          onToggleAll: handleTogglePage,
          paginatedSelectAllText,
          paginatedSelectAllAction
        }), loadingMarkup) : null, headerMarkup = condensed ? /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(IndexTable_module.default.HeaderWrapper, (!selectable || condensed) && IndexTable_module.default.unselectable)
        }, loadingMarkup, sort) : /* @__PURE__ */ React2.createElement("div", {
          className: stickyHeaderClassNames,
          ref: stickyHeaderWrapperElement
        }, loadingMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: IndexTable_module.default.StickyTableColumnHeader
        }, stickyColumnHeader), /* @__PURE__ */ React2.createElement("div", {
          className: IndexTable_module.default.StickyTableHeadings,
          ref: stickyHeaderElement
        }, stickyHeadingsMarkup));
        return selectAllActionsMarkup ?? headerMarkup;
      }), bulkActionsMarkup), scrollBarWrapperClassNames = css.classNames(IndexTable_module.default.ScrollBarContainer, condensed && IndexTable_module.default.scrollBarContainerCondensed, hideScrollContainer && IndexTable_module.default.scrollBarContainerHidden), scrollBarClassNames = css.classNames(tableElement.current && tableInitialized && IndexTable_module.default.ScrollBarContent), scrollBarMarkup = itemCount > 0 ? /* @__PURE__ */ React2.createElement(AfterInitialMount.AfterInitialMount, {
        onMount: resizeTableScrollBar
      }, /* @__PURE__ */ React2.createElement("div", {
        className: scrollBarWrapperClassNames,
        ref: scrollContainerElement
      }, /* @__PURE__ */ React2.createElement("div", {
        onScroll: handleScrollBarScroll,
        className: IndexTable_module.default.ScrollBar,
        ref: scrollBarElement
      }, /* @__PURE__ */ React2.createElement("div", {
        className: scrollBarClassNames
      })))) : null, isSortable = sortable?.some((value) => value), tableClassNames = css.classNames(IndexTable_module.default.Table, hasMoreLeftColumns && IndexTable_module.default["Table-scrolling"], selectMode && IndexTable_module.default.disableTextSelection, selectMode && shouldShowBulkActions && IndexTable_module.default.selectMode, !selectable && IndexTable_module.default["Table-unselectable"], canFitStickyColumn && IndexTable_module.default["Table-sticky"], isSortable && IndexTable_module.default["Table-sortable"], canFitStickyColumn && lastColumnSticky && IndexTable_module.default["Table-sticky-last"], canFitStickyColumn && lastColumnSticky && canScrollRight && IndexTable_module.default["Table-sticky-scrolling"], hasZebraStriping && IndexTable_module.default.ZebraStriping), emptyStateMarkup = emptyState || /* @__PURE__ */ React2.createElement(EmptySearchResult.EmptySearchResult, {
        title: i18n.translate("Polaris.IndexTable.emptySearchTitle", {
          resourceNamePlural: resourceName.plural
        }),
        description: i18n.translate("Polaris.IndexTable.emptySearchDescription"),
        withIllustration: !0
      }), sharedMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleResize
      }), /* @__PURE__ */ React2.createElement(AfterInitialMount.AfterInitialMount, null, stickyHeaderMarkup)), condensedClassNames = css.classNames(IndexTable_module.default.CondensedList, hasZebraStriping && IndexTable_module.default.ZebraStriping), bodyMarkup = condensed ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, sharedMarkup, /* @__PURE__ */ React2.createElement("ul", {
        "data-selectmode": Boolean(selectMode),
        className: condensedClassNames,
        ref: condensedListElement
      }, children)) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, sharedMarkup, /* @__PURE__ */ React2.createElement(ScrollContainer.ScrollContainer, {
        scrollableContainerRef: scrollableContainerElement,
        onScroll: handleScrollContainerScroll
      }, /* @__PURE__ */ React2.createElement("table", {
        ref: tableElement,
        className: tableClassNames
      }, /* @__PURE__ */ React2.createElement("thead", null, /* @__PURE__ */ React2.createElement("tr", {
        className: IndexTable_module.default.HeadingRow
      }, headingsMarkup)), /* @__PURE__ */ React2.createElement("tbody", {
        ref: tableBodyRef
      }, children)))), tableContentMarkup = itemCount > 0 ? bodyMarkup : /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.EmptySearchResultWrapper
      }, emptyStateMarkup), tableWrapperClassNames = css.classNames(IndexTable_module.default.IndexTableWrapper, hideScrollContainer && IndexTable_module.default["IndexTableWrapper-scrollBarHidden"], Boolean(bulkActionsMarkup) && selectMode && IndexTable_module.default.IndexTableWrapperWithBulkActions);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("div", {
        className: IndexTable_module.default.IndexTable
      }, /* @__PURE__ */ React2.createElement("div", {
        className: tableWrapperClassNames,
        ref: tableMeasurerRef
      }, !shouldShowBulkActions && !condensed && loadingMarkup, tableContentMarkup), /* @__PURE__ */ React2.createElement("div", {
        ref: bulkActionsIntersectionRef
      })), scrollBarMarkup);
      function renderHeading(heading, index) {
        let isSecond = index === 0, isLast = index === headings.length - 1, hasSortable = sortable?.some((value) => value === !0), headingAlignment = heading.alignment || "start", headingContentClassName = css.classNames(IndexTable_module.default.TableHeading, headingAlignment === "center" && IndexTable_module.default["TableHeading-align-center"], headingAlignment === "end" && IndexTable_module.default["TableHeading-align-end"], hasSortable && IndexTable_module.default["TableHeading-sortable"], isSecond && IndexTable_module.default["TableHeading-second"], isLast && !heading.hidden && IndexTable_module.default["TableHeading-last"], !selectable && IndexTable_module.default["TableHeading-unselectable"], heading.flush && IndexTable_module.default["TableHeading-flush"]), stickyPositioningStyle = selectable !== !1 && isSecond && tableHeadingRects.current && tableHeadingRects.current.length > 0 ? {
          left: tableHeadingRects.current[0].offsetWidth
        } : void 0, headingContent = /* @__PURE__ */ React2.createElement("th", {
          id: heading.id,
          className: headingContentClassName,
          key: getHeadingKey(heading),
          "data-index-table-heading": !0,
          style: stickyPositioningStyle
        }, renderHeadingContent(heading, index));
        if (index !== 0 || !selectable)
          return headingContent;
        let checkboxClassName = css.classNames(IndexTable_module.default.TableHeading, hasSortable && IndexTable_module.default["TableHeading-sortable"], index === 0 && IndexTable_module.default["TableHeading-first"]);
        return [/* @__PURE__ */ React2.createElement("th", {
          className: checkboxClassName,
          key: `${heading}-${index}`,
          "data-index-table-heading": !0
        }, renderCheckboxContent()), headingContent];
      }
      function renderCheckboxContent() {
        return /* @__PURE__ */ React2.createElement("div", {
          className: IndexTable_module.default.ColumnHeaderCheckboxWrapper
        }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
          label: i18n.translate("Polaris.IndexTable.selectAllLabel", {
            resourceNamePlural: resourceName.plural
          }),
          labelHidden: !0,
          onChange: handleSelectPage,
          checked: bulkSelectState
        }));
      }
      function handleSortHeadingClick(index, direction) {
        renderAfterSelectEvent.current = !1, hasSelected.current = !1, lastSortedColumnIndex.current = sortColumnIndex, onSort?.(index, direction);
      }
      function renderHeadingContent(heading, index) {
        let headingContent, defaultTooltipProps = {
          width: heading.tooltipWidth ?? "default",
          activatorWrapper: "div",
          dismissOnMouseOut: !0,
          persistOnClick: heading.tooltipPersistsOnClick
        }, defaultHeaderTooltipProps = {
          ...defaultTooltipProps,
          padding: "400",
          borderRadius: "200",
          content: heading.tooltipContent,
          preferredPosition: "above"
        };
        heading.new ? headingContent = /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
          wrap: !1,
          alignment: "center"
        }, /* @__PURE__ */ React2.createElement("span", null, heading.title), /* @__PURE__ */ React2.createElement(Badge.Badge, {
          tone: "new"
        }, i18n.translate("Polaris.IndexTable.onboardingBadgeText"))) : heading.hidden ? headingContent = /* @__PURE__ */ React2.createElement(Text2.Text, {
          as: "span",
          visuallyHidden: !0
        }, heading.title) : headingContent = heading.title;
        let style = {
          "--pc-index-table-heading-extra-padding-right": heading.paddingBlockEnd ? `var(--p-space-${heading.paddingBlockEnd})` : "0"
        };
        if (sortable?.[index]) {
          let isCurrentlySorted = index === sortColumnIndex, isPreviouslySorted = !isCurrentlySorted && index === lastSortedColumnIndex.current, isRenderAfterSelectEvent = renderAfterSelectEvent.current || !hasSelected.current && selectedItemsCount !== 0, isAscending = sortDirection === "ascending", newDirection = heading.defaultSortDirection ?? defaultSortDirection, SourceComponent = newDirection === "ascending" ? polarisIcons.SortAscendingIcon : polarisIcons.SortDescendingIcon;
          isCurrentlySorted && (newDirection = isAscending ? "descending" : "ascending", SourceComponent = sortDirection === "ascending" ? polarisIcons.SortAscendingIcon : polarisIcons.SortDescendingIcon);
          let iconMarkup = /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(IndexTable_module.default.TableHeadingSortIcon, heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortIcon-heading-align-end"], isCurrentlySorted && IndexTable_module.default["TableHeadingSortIcon-visible"])
          }, /* @__PURE__ */ React2.createElement(SourceComponent, {
            focusable: "false",
            "aria-hidden": "true",
            className: IndexTable_module.default.TableHeadingSortSvg
          })), defaultSortButtonProps = {
            onClick: () => handleSortHeadingClick(index, newDirection),
            className: css.classNames(IndexTable_module.default.TableHeadingSortButton, !isCurrentlySorted && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end"], isCurrentlySorted && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end-currently-sorted"], isPreviouslySorted && !isRenderAfterSelectEvent && heading?.alignment === "end" && IndexTable_module.default["TableHeadingSortButton-heading-align-end-previously-sorted"]),
            tabIndex: selectMode ? -1 : 0
          }, sortMarkup = /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, defaultSortButtonProps, iconMarkup, /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(sortToggleLabels && selectMode && heading.tooltipContent && IndexTable_module.default.TableHeadingTooltipUnderlinePlaceholder)
          }, headingContent));
          if (!sortToggleLabels || selectMode)
            return /* @__PURE__ */ React2.createElement("div", {
              className: IndexTable_module.default.SortableTableHeadingWithCustomMarkup
            }, sortMarkup);
          let tooltipDirection = isCurrentlySorted ? sortDirection : newDirection, sortTooltipContent = sortToggleLabels[index][tooltipDirection];
          if (!heading.tooltipContent)
            return (
              // Regular header with sort icon and sort direction tooltip
              /* @__PURE__ */ React2.createElement("div", {
                style,
                className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
              }, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultTooltipProps, {
                content: sortTooltipContent,
                preferredPosition: "above"
              }), sortMarkup))
            );
          if (heading.tooltipContent)
            return (
              // Header text and sort icon have separate tooltips
              /* @__PURE__ */ React2.createElement("div", {
                className: css.classNames(IndexTable_module.default.SortableTableHeadingWithCustomMarkup, heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"]),
                style
              }, /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, defaultSortButtonProps, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, defaultHeaderTooltipProps, /* @__PURE__ */ React2.createElement("span", {
                className: IndexTable_module.default.TableHeadingUnderline
              }, headingContent)), /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultTooltipProps, {
                content: sortTooltipContent,
                preferredPosition: "above"
              }), iconMarkup)))
            );
        }
        return heading.tooltipContent ? (
          // Non-sortable header with tooltip
          /* @__PURE__ */ React2.createElement("div", {
            style,
            className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
          }, /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, Object.assign({}, defaultHeaderTooltipProps, {
            activatorWrapper: "span"
          }), /* @__PURE__ */ React2.createElement("span", {
            className: css.classNames(IndexTable_module.default.TableHeadingUnderline, IndexTable_module.default.SortableTableHeaderWrapper)
          }, headingContent)))
        ) : /* @__PURE__ */ React2.createElement("div", {
          style,
          className: css.classNames(heading.paddingBlockEnd && IndexTable_module.default["TableHeading-extra-padding-right"])
        }, headingContent);
      }
      function handleSelectPage(checked) {
        handleSelectionChange(types.SelectionType.Page, checked);
      }
      function renderStickyHeading(heading, index) {
        let position = selectable ? index + 1 : index, headingStyle = tableHeadingRects.current && tableHeadingRects.current.length > position ? {
          minWidth: tableHeadingRects.current[position].offsetWidth
        } : void 0, headingAlignment = heading.alignment || "start", headingContent = renderHeadingContent(heading, index), stickyHeadingClassName = css.classNames(IndexTable_module.default.TableHeading, heading.flush && IndexTable_module.default["TableHeading-flush"], headingAlignment === "center" && IndexTable_module.default["TableHeading-align-center"], headingAlignment === "end" && IndexTable_module.default["TableHeading-align-end"], index === 0 && IndexTable_module.default["StickyTableHeading-second"], index === 0 && !selectable && IndexTable_module.default.unselectable);
        return /* @__PURE__ */ React2.createElement("div", {
          className: stickyHeadingClassName,
          key: getHeadingKey(heading),
          style: headingStyle,
          "data-index-table-sticky-heading": !0
        }, headingContent);
      }
      function getPaginatedSelectAllAction() {
        if (!selectable || !hasBulkActions || !hasMoreItems)
          return;
        let customActionText = paginatedSelectAllActionText ?? i18n.translate("Polaris.IndexTable.selectAllItems", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural.toLocaleLowerCase()
        });
        return {
          content: selectedItemsCount === types.SELECT_ALL_ITEMS ? i18n.translate("Polaris.IndexTable.undo") : customActionText,
          onAction: handleSelectAllItemsInStore
        };
      }
      function handleSelectModeToggle() {
        handleSelectionChange(types.SelectionType.All, !1);
      }
    }
    var isBreakpointsXS = () => typeof window > "u" ? !1 : window.innerWidth < parseFloat(polarisTokens.toPx(polarisTokens.themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    function getHeadingKey(heading) {
      return heading.id ? heading.id : typeof heading.title == "string" ? heading.title : "";
    }
    function IndexTable({
      children,
      selectable = !0,
      itemCount,
      selectedItemsCount = 0,
      resourceName: passedResourceName,
      loading,
      hasMoreItems,
      condensed,
      onSelectionChange,
      pagination,
      ...indexTableBaseProps
    }) {
      let paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
        type: "table"
      }, pagination)) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(IndexProvider.IndexProvider, {
        selectable: selectable && !condensed,
        itemCount,
        selectedItemsCount,
        resourceName: passedResourceName,
        loading,
        hasMoreItems,
        condensed,
        onSelectionChange
      }, /* @__PURE__ */ React2.createElement(IndexTableBase, indexTableBaseProps, children)), paginationMarkup);
    }
    IndexTable.Cell = Cell.Cell;
    IndexTable.Row = Row.Row;
    exports.IndexTable = IndexTable;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.scss.js
var require_InlineCode_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Code: "Polaris-InlineCode__Code"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.js
var require_InlineCode = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/InlineCode/InlineCode.js"(exports) {
    "use strict";
    var React2 = require("react"), InlineCode_module = require_InlineCode_scss(), InlineCode = ({
      children
    }) => /* @__PURE__ */ React2.createElement("code", {
      className: InlineCode_module.default.Code
    }, children);
    exports.InlineCode = InlineCode;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.scss.js
var require_KeyboardKey_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      KeyboardKey: "Polaris-KeyboardKey",
      small: "Polaris-KeyboardKey--small"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.js
var require_KeyboardKey = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/KeyboardKey/KeyboardKey.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), KeyboardKey_module = require_KeyboardKey_scss();
    function KeyboardKey({
      children = "",
      size
    }) {
      let key = !size && children.length > 1 ? children.toLowerCase() : children.toUpperCase(), className = css.classNames(KeyboardKey_module.default.KeyboardKey, size && KeyboardKey_module.default[size]);
      return /* @__PURE__ */ React2.createElement("kbd", {
        className
      }, key);
    }
    exports.KeyboardKey = KeyboardKey;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.scss.js
var require_Layout_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Layout: "Polaris-Layout",
      Section: "Polaris-Layout__Section",
      "Section-fullWidth": "Polaris-Layout__Section--fullWidth",
      "Section-oneHalf": "Polaris-Layout__Section--oneHalf",
      "Section-oneThird": "Polaris-Layout__Section--oneThird",
      AnnotatedSection: "Polaris-Layout__AnnotatedSection",
      AnnotationWrapper: "Polaris-Layout__AnnotationWrapper",
      AnnotationContent: "Polaris-Layout__AnnotationContent",
      Annotation: "Polaris-Layout__Annotation"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/components/AnnotatedSection/AnnotatedSection.js
var require_AnnotatedSection = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/components/AnnotatedSection/AnnotatedSection.js"(exports) {
    "use strict";
    var React2 = require("react"), Layout_module = require_Layout_scss(), TextContainer = require_TextContainer(), Text2 = require_Text(), Box = require_Box();
    function AnnotatedSection({
      children,
      title,
      description,
      id
    }) {
      let descriptionMarkup = typeof description == "string" ? /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "p",
        variant: "bodyMd"
      }, description) : description;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotatedSection
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotationWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.Annotation
      }, /* @__PURE__ */ React2.createElement(TextContainer.TextContainer, {
        spacing: "tight"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        id,
        variant: "headingMd",
        as: "h2"
      }, title), descriptionMarkup && /* @__PURE__ */ React2.createElement(Box.Box, {
        color: "text-secondary"
      }, descriptionMarkup))), /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.AnnotationContent
      }, children)));
    }
    exports.AnnotatedSection = AnnotatedSection;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/components/Section/Section.js
var require_Section6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Layout_module = require_Layout_scss();
    function Section({
      children,
      variant
    }) {
      let className = css.classNames(Layout_module.default.Section, Layout_module.default[`Section-${variant}`]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, children);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.js
var require_Layout = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Layout/Layout.js"(exports) {
    "use strict";
    var React2 = require("react"), Layout_module = require_Layout_scss(), AnnotatedSection = require_AnnotatedSection(), Section = require_Section6(), Layout2 = function({
      sectioned,
      children
    }) {
      let content = sectioned ? /* @__PURE__ */ React2.createElement(Section.Section, null, children) : children;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Layout_module.default.Layout
      }, content);
    };
    Layout2.AnnotatedSection = AnnotatedSection.AnnotatedSection;
    Layout2.Section = Section.Section;
    exports.Layout = Layout2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.scss.js
var require_LegacyFilters_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyFilters: "Polaris-LegacyFilters",
      LegacyFiltersContainer: "Polaris-LegacyFilters__LegacyFiltersContainer",
      LegacyFiltersContainerHeader: "Polaris-LegacyFilters__LegacyFiltersContainerHeader",
      LegacyFiltersDesktopContainerContent: "Polaris-LegacyFilters__LegacyFiltersDesktopContainerContent",
      LegacyFiltersMobileContainerContent: "Polaris-LegacyFilters__LegacyFiltersMobileContainerContent",
      LegacyFiltersContainerFooter: "Polaris-LegacyFilters__LegacyFiltersContainerFooter",
      LegacyFiltersMobileContainerFooter: "Polaris-LegacyFilters__LegacyFiltersMobileContainerFooter",
      EmptyFooterState: "Polaris-LegacyFilters__EmptyFooterState",
      FilterTriggerContainer: "Polaris-LegacyFilters__FilterTriggerContainer",
      FilterTrigger: "Polaris-LegacyFilters__FilterTrigger",
      FilterTriggerTitle: "Polaris-LegacyFilters__FilterTriggerTitle",
      AppliedFilterBadgeContainer: "Polaris-LegacyFilters__AppliedFilterBadgeContainer",
      open: "Polaris-LegacyFilters--open",
      FilterTriggerLabelContainer: "Polaris-LegacyFilters__FilterTriggerLabelContainer",
      first: "Polaris-LegacyFilters--first",
      last: "Polaris-LegacyFilters--last",
      FilterNodeContainer: "Polaris-LegacyFilters__FilterNodeContainer",
      SearchIcon: "Polaris-LegacyFilters__SearchIcon",
      Backdrop: "Polaris-LegacyFilters__Backdrop",
      HelpText: "Polaris-LegacyFilters__HelpText",
      TagsContainer: "Polaris-LegacyFilters__TagsContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/resource-list/context.js
var require_context19 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/resource-list/context.js"(exports) {
    "use strict";
    var React2 = require("react"), ResourceListContext = /* @__PURE__ */ React2.createContext({});
    exports.ResourceListContext = ResourceListContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.scss.js
var require_ConnectedFilterControl_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ConnectedFilterControl: "Polaris-LegacyFilters-ConnectedFilterControl",
      CenterContainer: "Polaris-LegacyFilters-ConnectedFilterControl__CenterContainer",
      right: "Polaris-LegacyFilters-ConnectedFilterControl--right",
      Item: "Polaris-LegacyFilters-ConnectedFilterControl__Item",
      "Item-focused": "Polaris-LegacyFilters-ConnectedFilterControl__Item--focused",
      ProxyButtonContainer: "Polaris-LegacyFilters-ConnectedFilterControl__ProxyButtonContainer",
      RightContainer: "Polaris-LegacyFilters-ConnectedFilterControl__RightContainer",
      MoreFiltersButtonContainer: "Polaris-LegacyFilters-ConnectedFilterControl__MoreFiltersButtonContainer",
      queryFieldHidden: "Polaris-LegacyFilters-ConnectedFilterControl--queryFieldHidden",
      RightContainerWithoutMoreFilters: "Polaris-LegacyFilters-ConnectedFilterControl__RightContainerWithoutMoreFilters",
      onlyButtonVisible: "Polaris-LegacyFilters-ConnectedFilterControl--onlyButtonVisible",
      Wrapper: "Polaris-LegacyFilters-ConnectedFilterControl__Wrapper",
      AuxiliaryContainer: "Polaris-LegacyFilters-ConnectedFilterControl__AuxiliaryContainer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/components/Item/Item.js
var require_Item7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), useToggle = require_use_toggle(), ConnectedFilterControl_module = require_ConnectedFilterControl_scss();
    function Item({
      children
    }) {
      let {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), className = css.classNames(ConnectedFilterControl_module.default.Item, focused && ConnectedFilterControl_module.default["Item-focused"]);
      return /* @__PURE__ */ React2.createElement("div", {
        onBlur: forceFalseFocused,
        onFocus: forceTrueFocused,
        className
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.js
var require_ConnectedFilterControl = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), css = require_css(), ConnectedFilterControl_module = require_ConnectedFilterControl_scss(), Item = require_Item7(), EventListener = require_EventListener(), Button2 = require_Button(), Popover = require_Popover(), FILTER_FIELD_MIN_WIDTH = 150, ConnectedFilterControl = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          availableWidth: 0,
          proxyButtonsWidth: {}
        }, this.container = /* @__PURE__ */ React2.createRef(), this.proxyButtonContainer = /* @__PURE__ */ React2.createRef(), this.moreFiltersButtonContainer = /* @__PURE__ */ React2.createRef(), this.handleResize = debounce.debounce(() => {
          this.measureProxyButtons(), this.measureAvailableWidth();
        }, 40, {
          leading: !0,
          trailing: !0,
          maxWait: 40
        });
      }
      componentDidMount() {
        this.handleResize();
      }
      render() {
        let {
          children,
          rightPopoverableActions,
          rightAction,
          auxiliary,
          forceShowMorefiltersButton = !0,
          queryFieldHidden
        } = this.props, actionsToRender = rightPopoverableActions != null ? this.getActionsToRender(rightPopoverableActions) : [], className = css.classNames(ConnectedFilterControl_module.default.ConnectedFilterControl, rightPopoverableActions && ConnectedFilterControl_module.default.right), shouldRenderMoreFiltersButton = forceShowMorefiltersButton || rightPopoverableActions && rightPopoverableActions.length !== actionsToRender.length, RightContainerClassName = css.classNames(ConnectedFilterControl_module.default.RightContainer, !shouldRenderMoreFiltersButton && ConnectedFilterControl_module.default.RightContainerWithoutMoreFilters, queryFieldHidden && ConnectedFilterControl_module.default.queryFieldHidden), rightMarkup = actionsToRender.length > 0 ? /* @__PURE__ */ React2.createElement("div", {
          className: RightContainerClassName
        }, this.popoverFrom(actionsToRender)) : null, moreFiltersButtonContainerClassname = css.classNames(ConnectedFilterControl_module.default.MoreFiltersButtonContainer, actionsToRender.length === 0 && ConnectedFilterControl_module.default.onlyButtonVisible), rightActionMarkup = rightAction ? /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersButtonContainer,
          className: moreFiltersButtonContainerClassname
        }, shouldRenderMoreFiltersButton && /* @__PURE__ */ React2.createElement(Item.Item, null, rightAction)) : null, proxyButtonMarkup = rightPopoverableActions ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.ProxyButtonContainer,
          ref: this.proxyButtonContainer,
          "aria-hidden": !0
        }, rightPopoverableActions.map((action) => /* @__PURE__ */ React2.createElement("div", {
          key: action.key,
          "data-key": action.key
        }, this.activatorButtonFrom(action, {
          proxy: !0
        })))) : null, auxMarkup = auxiliary ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.AuxiliaryContainer
        }, auxiliary) : null;
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, proxyButtonMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.Wrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className,
          ref: this.container
        }, children ? /* @__PURE__ */ React2.createElement("div", {
          className: ConnectedFilterControl_module.default.CenterContainer
        }, /* @__PURE__ */ React2.createElement(Item.Item, null, children)) : null, rightMarkup, rightActionMarkup, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.handleResize
        })), auxMarkup));
      }
      measureProxyButtons() {
        if (this.proxyButtonContainer.current) {
          let proxyButtonsWidth = {};
          this.proxyButtonContainer.current && Array.from(this.proxyButtonContainer.current.children).forEach((element) => {
            let buttonWidth = element.getBoundingClientRect().width + 78, buttonKey = element instanceof HTMLElement && element.dataset.key;
            buttonKey && (proxyButtonsWidth[buttonKey] = buttonWidth);
          }), this.setState({
            proxyButtonsWidth
          });
        }
      }
      measureAvailableWidth() {
        if (this.container.current && this.moreFiltersButtonContainer.current) {
          let containerWidth = this.container.current.getBoundingClientRect().width, moreFiltersButtonWidth = this.moreFiltersButtonContainer.current.getBoundingClientRect().width, filtersActionWidth = 0, filterFieldMinWidth = this.props.queryFieldHidden ? 0 : FILTER_FIELD_MIN_WIDTH, availableWidth = containerWidth - filterFieldMinWidth - moreFiltersButtonWidth - filtersActionWidth;
          this.setState({
            availableWidth
          });
        }
      }
      getActionsToRender(actions) {
        let remainingWidth = this.state.availableWidth, actionsToReturn = [];
        for (let i = 0; remainingWidth > 0 && i < actions.length; i++) {
          let action = actions[i], actionWidth = this.state.proxyButtonsWidth[action.key];
          if (actionWidth <= remainingWidth)
            actionsToReturn.push(action), remainingWidth -= actionWidth;
          else
            break;
        }
        return actionsToReturn;
      }
      activatorButtonFrom(action, options) {
        let id = options?.proxy ? void 0 : `Activator-${action.key}`;
        return /* @__PURE__ */ React2.createElement(Button2.Button, {
          onClick: action.onAction,
          disclosure: !0,
          disabled: this.props.disabled || action.disabled,
          id,
          size: "large"
        }, action.content);
      }
      popoverFrom(actions) {
        return actions.map((action) => /* @__PURE__ */ React2.createElement(Item.Item, {
          key: action.key
        }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
          active: action.popoverOpen,
          activator: this.activatorButtonFrom(action),
          onClose: action.onAction,
          preferredAlignment: "left",
          sectioned: !0
        }, action.popoverContent)));
      }
    };
    exports.ConnectedFilterControl = ConnectedFilterControl;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/TagsWrapper/TagsWrapper.js
var require_TagsWrapper = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/components/TagsWrapper/TagsWrapper.js"(exports) {
    "use strict";
    var React2 = require("react"), Text2 = require_Text();
    function TagsWrapper({
      children,
      hidden
    }) {
      return hidden ? /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, children) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
    }
    exports.TagsWrapper = TagsWrapper;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.scss.js
var require_Tag_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Tag: "Polaris-Tag",
      disabled: "Polaris-Tag--disabled",
      clickable: "Polaris-Tag--clickable",
      linkable: "Polaris-Tag--linkable",
      removable: "Polaris-Tag--removable",
      TagText: "Polaris-Tag__TagText",
      Button: "Polaris-Tag__Button",
      Link: "Polaris-Tag__Link",
      LinkText: "Polaris-Tag__LinkText",
      segmented: "Polaris-Tag--segmented"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.js
var require_Tag = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Tag/Tag.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), Tag_module = require_Tag_scss(), hooks = require_hooks2(), Icon = require_Icon();
    function Tag({
      children,
      disabled = !1,
      onClick,
      onRemove,
      accessibilityLabel,
      url
    }) {
      let i18n = hooks.useI18n(), segmented = onRemove && url, className = css.classNames(Tag_module.default.Tag, disabled && Tag_module.default.disabled, onClick && Tag_module.default.clickable, onRemove && Tag_module.default.removable, url && !disabled && Tag_module.default.linkable, segmented && Tag_module.default.segmented);
      if (onClick)
        return /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          disabled,
          className,
          onClick
        }, children);
      let tagTitle = accessibilityLabel;
      tagTitle || (tagTitle = typeof children == "string" ? children : void 0);
      let ariaLabel = i18n.translate("Polaris.Tag.ariaLabel", {
        children: tagTitle || ""
      }), removeButton = onRemove ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        "aria-label": ariaLabel,
        className: css.classNames(Tag_module.default.Button, segmented && Tag_module.default.segmented),
        onClick: onRemove,
        onMouseUp: focus.handleMouseUpByBlurring,
        disabled
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.XSmallIcon
      })) : null, tagContent = url && !disabled ? /* @__PURE__ */ React2.createElement("a", {
        className: css.classNames(Tag_module.default.Link, segmented && Tag_module.default.segmented),
        href: url
      }, /* @__PURE__ */ React2.createElement("span", {
        title: tagTitle,
        className: Tag_module.default.LinkText
      }, children)) : /* @__PURE__ */ React2.createElement("span", {
        title: tagTitle,
        className: Tag_module.default.TagText
      }, children);
      return /* @__PURE__ */ React2.createElement("span", {
        className,
        "aria-disabled": disabled
      }, tagContent, removeButton);
    }
    exports.Tag = Tag;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.scss.js
var require_Sheet_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Sheet: "Polaris-Sheet",
      Container: "Polaris-Sheet__Container",
      Bottom: "Polaris-Sheet__Bottom",
      enterBottom: "Polaris-Sheet--enterBottom",
      enterBottomActive: "Polaris-Sheet--enterBottomActive",
      exitBottom: "Polaris-Sheet--exitBottom",
      exitBottomActive: "Polaris-Sheet--exitBottomActive",
      Right: "Polaris-Sheet__Right",
      enterRight: "Polaris-Sheet--enterRight",
      enterRightActive: "Polaris-Sheet--enterRightActive",
      exitRight: "Polaris-Sheet--exitRight",
      exitRightActive: "Polaris-Sheet--exitRightActive"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.js
var require_Sheet = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Sheet/Sheet.js"(exports) {
    "use strict";
    var React2 = require("react"), reactTransitionGroup = require("react-transition-group"), focus = require_focus(), css = require_css(), types = require_types(), shared = require_shared(), useTheme = require_use_theme(), Sheet_module = require_Sheet_scss(), hooks = require_hooks11(), Portal = require_Portal(), TrapFocus = require_TrapFocus(), KeypressListener = require_KeypressListener(), Backdrop = require_Backdrop(), BOTTOM_CLASS_NAMES = {
      enter: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.enterBottom),
      enterActive: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.enterBottomActive),
      exit: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.exitBottom),
      exitActive: css.classNames(Sheet_module.default.Bottom, Sheet_module.default.exitBottomActive)
    }, RIGHT_CLASS_NAMES = {
      enter: css.classNames(Sheet_module.default.Right, Sheet_module.default.enterRight),
      enterActive: css.classNames(Sheet_module.default.Right, Sheet_module.default.enterRightActive),
      exit: css.classNames(Sheet_module.default.Right, Sheet_module.default.exitRight),
      exitActive: css.classNames(Sheet_module.default.Right, Sheet_module.default.exitRightActive)
    };
    function Sheet({
      children,
      open,
      onClose,
      onEntered,
      onExit,
      accessibilityLabel,
      activator
    }) {
      let theme = useTheme.useTheme(), {
        isNavigationCollapsed
      } = hooks.useMediaQuery(), container = React2.useRef(null), activatorRef = React2.useRef(null), handleClose = React2.useCallback(() => {
        onClose();
        let activatorElement = activator && isRef(activator) ? activator && activator.current : activatorRef.current;
        activatorElement && requestAnimationFrame(() => focus.focusFirstFocusableNode(activatorElement));
      }, [activator, onClose]);
      React2.useEffect(() => {
      }, []);
      let activatorMarkup = activator && !isRef(activator) ? /* @__PURE__ */ React2.createElement("div", {
        ref: activatorRef
      }, activator) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, activatorMarkup, /* @__PURE__ */ React2.createElement(Portal.Portal, {
        idPrefix: "sheet"
      }, /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        nodeRef: container,
        classNames: isNavigationCollapsed ? BOTTOM_CLASS_NAMES : RIGHT_CLASS_NAMES,
        timeout: parseInt(theme.motion["motion-duration-300"], 10),
        in: open,
        mountOnEnter: !0,
        unmountOnExit: !0,
        onEntered,
        onExit
      }, /* @__PURE__ */ React2.createElement("div", Object.assign({
        className: Sheet_module.default.Container
      }, shared.layer.props, shared.overlay.props, {
        ref: container
      }), /* @__PURE__ */ React2.createElement(TrapFocus.TrapFocus, {
        trapping: open
      }, /* @__PURE__ */ React2.createElement("div", {
        role: "dialog",
        "aria-modal": !0,
        tabIndex: -1,
        className: Sheet_module.default.Sheet,
        "aria-label": accessibilityLabel
      }, children)))), /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
        keyCode: types.Key.Escape,
        handler: handleClose
      }), open && /* @__PURE__ */ React2.createElement(Backdrop.Backdrop, {
        transparent: !0,
        onClick: handleClose
      })));
    }
    function isRef(ref) {
      return Object.prototype.hasOwnProperty.call(ref, "current");
    }
    exports.Sheet = Sheet;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.js
var require_LegacyFilters = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyFilters/LegacyFilters.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), focus = require_focus(), withinFilterContext = require_within_filter_context(), types = require_types(), LegacyFilters_module = require_LegacyFilters_scss(), context = require_context19(), Collapsible = require_Collapsible(), ConnectedFilterControl = require_ConnectedFilterControl(), TagsWrapper = require_TagsWrapper(), Tag = require_Tag(), Sheet = require_Sheet(), hooks = require_hooks2(), hooks$1 = require_hooks11(), ScrollLock = require_ScrollLock(), Badge = require_Badge(), Text2 = require_Text(), Icon = require_Icon(), Focus = require_Focus(), Button2 = require_Button(), TextField2 = require_TextField(), Scrollable = require_Scrollable(), KeypressListener = require_KeypressListener(), LegacyStack = require_LegacyStack(), Suffix;
    (function(Suffix2) {
      Suffix2.Filter = "Filter", Suffix2.Shortcut = "Shortcut";
    })(Suffix || (Suffix = {}));
    var LegacyFiltersInner = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          open: !1,
          readyForFocus: !1
        }, this.moreFiltersButtonContainer = /* @__PURE__ */ React2.createRef(), this.moreFiltersDoneButtonContainer = /* @__PURE__ */ React2.createRef(), this.focusNode = /* @__PURE__ */ React2.createRef(), this.closeFilters = () => {
          this.setState({
            open: !1
          }, () => {
            this.moreFiltersButtonContainer.current && focus.focusFirstFocusableNode(this.moreFiltersButtonContainer.current, !1);
          });
        }, this.toggleFilters = () => {
          this.state.open === !0 ? this.closeFilters() : this.openFilters();
        }, this.setReadyForFocus = (newState) => () => {
          this.setState({
            readyForFocus: newState
          });
        }, this.handleClearAll = () => {
          this.props.onClearAll(), this.moreFiltersDoneButtonContainer.current && focus.focusFirstFocusableNode(this.moreFiltersDoneButtonContainer.current, !1);
        };
      }
      render() {
        let {
          filters,
          queryValue,
          onQueryBlur,
          onQueryChange,
          onQueryFocus,
          focused,
          onClearAll,
          appliedFilters,
          onQueryClear,
          queryPlaceholder,
          children,
          disabled = !1,
          helpText,
          hideTags,
          hideQueryField,
          disableQueryField = !1,
          i18n,
          mediaQuery: {
            isNavigationCollapsed
          }
        } = this.props, {
          resourceName
        } = this.context, {
          open,
          readyForFocus
        } = this.state, backdropMarkup = open ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null), /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.Backdrop,
          onClick: this.closeFilters
        })) : null, filtersContentMarkup = filters.map((filter, index) => {
          let filterIsOpen = this.state[`${filter.key}${Suffix.Filter}`] === !0, icon = filterIsOpen ? polarisIcons.ChevronUpIcon : polarisIcons.ChevronDownIcon, className = css.classNames(LegacyFilters_module.default.FilterTriggerContainer, filterIsOpen && LegacyFilters_module.default.open, index === 0 && LegacyFilters_module.default.first, filters.length !== 1 && index === filters.length - 1 && LegacyFilters_module.default.last), appliedFilterContent = this.getAppliedFilterContent(filter.key), appliedFilterBadgeMarkup = appliedFilterContent ? /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.AppliedFilterBadgeContainer
          }, /* @__PURE__ */ React2.createElement(Badge.Badge, {
            tone: "new"
          }, appliedFilterContent)) : null, collapsibleID = `${filter.key}Collapsible`, buttonClassName = css.classNames(LegacyFilters_module.default.FilterTrigger);
          return /* @__PURE__ */ React2.createElement("div", {
            key: filter.key,
            className
          }, /* @__PURE__ */ React2.createElement("button", {
            onClick: () => this.toggleFilter(filter.key),
            className: buttonClassName,
            id: `${filter.key}ToggleButton`,
            type: "button",
            "aria-controls": collapsibleID,
            "aria-expanded": filterIsOpen
          }, /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.FilterTriggerLabelContainer
          }, /* @__PURE__ */ React2.createElement("h3", {
            className: LegacyFilters_module.default.FilterTriggerTitle
          }, /* @__PURE__ */ React2.createElement(Text2.Text, {
            as: "span",
            tone: this.props.disabled || filter.disabled ? "subdued" : void 0
          }, filter.label)), /* @__PURE__ */ React2.createElement("span", {
            className: LegacyFilters_module.default.FilterTriggerIcon
          }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
            source: icon,
            tone: "base"
          }))), appliedFilterBadgeMarkup), /* @__PURE__ */ React2.createElement(Collapsible.Collapsible, {
            id: collapsibleID,
            open: filterIsOpen,
            onAnimationEnd: this.setReadyForFocus(!0)
          }, /* @__PURE__ */ React2.createElement("div", {
            className: LegacyFilters_module.default.FilterNodeContainer
          }, /* @__PURE__ */ React2.createElement(Focus.Focus, {
            disabled: !filterIsOpen || !readyForFocus || !open,
            root: this.focusNode
          }, this.generateFilterMarkup(filter)))));
        }), appliedFiltersCount = appliedFilters ? appliedFilters.length : 0, moreFiltersLabel = hideTags && appliedFiltersCount > 0 ? i18n.translate("Polaris.Filters.moreFiltersWithCount", {
          count: appliedFiltersCount
        }) : i18n.translate("Polaris.Filters.moreFilters"), rightActionMarkup = filters.length ? /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersButtonContainer
        }, /* @__PURE__ */ React2.createElement(Button2.Button, {
          onClick: this.toggleFilters,
          disabled,
          size: "large"
        }, moreFiltersLabel)) : null, filterResourceName = resourceName || {
          singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
          plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
        }, transformedFilters = this.transformFilters(filters), filtersControlMarkup = /* @__PURE__ */ React2.createElement(ConnectedFilterControl.ConnectedFilterControl, {
          rightPopoverableActions: transformedFilters,
          rightAction: rightActionMarkup,
          auxiliary: children,
          disabled,
          forceShowMorefiltersButton: filters.length > transformedFilters.length,
          queryFieldHidden: hideQueryField
        }, hideQueryField ? null : /* @__PURE__ */ React2.createElement(TextField2.TextField, {
          placeholder: queryPlaceholder || i18n.translate("Polaris.Filters.filter", {
            resourceName: filterResourceName.plural
          }),
          onChange: onQueryChange,
          onBlur: onQueryBlur,
          onFocus: onQueryFocus,
          value: queryValue,
          focused,
          label: queryPlaceholder || i18n.translate("Polaris.Filters.filter", {
            resourceName: filterResourceName.plural
          }),
          labelHidden: !0,
          prefix: /* @__PURE__ */ React2.createElement("span", {
            className: LegacyFilters_module.default.SearchIcon
          }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
            source: polarisIcons.SearchIcon
          })),
          clearButton: !0,
          onClearButtonClick: onQueryClear,
          disabled: disabled || disableQueryField,
          autoComplete: "off"
        })), filtersContainerHeaderClassname = css.classNames(LegacyFilters_module.default.LegacyFiltersContainerHeader), filtersDesktopHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersContainerHeaderClassname
        }, /* @__PURE__ */ React2.createElement(Text2.Text, {
          variant: "headingLg",
          as: "h3"
        }, moreFiltersLabel), /* @__PURE__ */ React2.createElement(Button2.Button, {
          icon: polarisIcons.XSmallIcon,
          variant: "plain",
          accessibilityLabel: i18n.translate("Polaris.Filters.cancel"),
          onClick: this.closeFilters
        })), filtersMobileHeaderMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersContainerHeaderClassname
        }, /* @__PURE__ */ React2.createElement(Button2.Button, {
          icon: polarisIcons.XSmallIcon,
          variant: "plain",
          accessibilityLabel: i18n.translate("Polaris.Filters.cancel"),
          onClick: this.closeFilters
        }), /* @__PURE__ */ React2.createElement(Text2.Text, {
          variant: "headingLg",
          as: "h3"
        }, moreFiltersLabel), /* @__PURE__ */ React2.createElement(Button2.Button, {
          onClick: this.closeFilters,
          variant: "primary"
        }, i18n.translate("Polaris.Filters.done"))), filtersDesktopFooterClassname = css.classNames(LegacyFilters_module.default.LegacyFiltersContainerFooter), filtersDesktopFooterMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: filtersDesktopFooterClassname
        }, /* @__PURE__ */ React2.createElement(Button2.Button, {
          onClick: this.handleClearAll,
          disabled: !this.hasAppliedFilters()
        }, i18n.translate("Polaris.Filters.clearAllFilters")), /* @__PURE__ */ React2.createElement("div", {
          ref: this.moreFiltersDoneButtonContainer
        }, /* @__PURE__ */ React2.createElement(Button2.Button, {
          onClick: this.closeFilters,
          variant: "primary"
        }, i18n.translate("Polaris.Filters.done")))), filtersMobileFooterMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFiltersMobileContainerFooter
        }, this.hasAppliedFilters() ? /* @__PURE__ */ React2.createElement(Button2.Button, {
          onClick: onClearAll,
          fullWidth: !0
        }, i18n.translate("Polaris.Filters.clearAllFilters")) : /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.EmptyFooterState
        }, /* @__PURE__ */ React2.createElement(Text2.Text, {
          tone: "subdued",
          as: "span"
        }, /* @__PURE__ */ React2.createElement("p", null, i18n.translate("Polaris.Filters.noFiltersApplied"))))), shouldHideTagsContainer = !appliedFilters || appliedFilters.length < 1, tagsMarkup = hideTags ? null : /* @__PURE__ */ React2.createElement(TagsWrapper.TagsWrapper, {
          hidden: shouldHideTagsContainer
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.TagsContainer,
          "aria-live": "polite"
        }, (appliedFilters || []).map((filter) => /* @__PURE__ */ React2.createElement(Tag.Tag, {
          key: filter.key,
          onRemove: () => {
            filter.onRemove(filter.key);
          },
          disabled
        }, filter.label)))), filtersMobileContainerContentClassName = css.classNames(LegacyFilters_module.default.LegacyFiltersMobileContainerContent), filtersDesktopContainerContentClassName = css.classNames(LegacyFilters_module.default.LegacyFiltersDesktopContainerContent), filtersContainerMarkup = isNavigationCollapsed ? /* @__PURE__ */ React2.createElement(Sheet.Sheet, {
          accessibilityLabel: moreFiltersLabel,
          open,
          onClose: this.closeFilters,
          onEntered: this.setReadyForFocus(!0),
          onExit: this.setReadyForFocus(!1)
        }, filtersMobileHeaderMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          className: filtersMobileContainerContentClassName,
          shadow: !0
        }, filtersContentMarkup, filtersMobileFooterMarkup)) : /* @__PURE__ */ React2.createElement(Sheet.Sheet, {
          accessibilityLabel: moreFiltersLabel,
          open,
          onClose: this.closeFilters,
          onEntered: this.setReadyForFocus(!0),
          onExit: this.setReadyForFocus(!1)
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFiltersContainer
        }, filtersDesktopHeaderMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
          className: filtersDesktopContainerContentClassName,
          shadow: !0
        }, filtersContentMarkup), filtersDesktopFooterMarkup)), helpTextMarkup = helpText ? /* @__PURE__ */ React2.createElement("div", {
          id: "FiltersHelpText",
          className: LegacyFilters_module.default.HelpText
        }, /* @__PURE__ */ React2.createElement(Text2.Text, {
          tone: "subdued",
          as: "span"
        }, helpText)) : null;
        return /* @__PURE__ */ React2.createElement(withinFilterContext.WithinFilterContext.Provider, {
          value: !0
        }, /* @__PURE__ */ React2.createElement("div", {
          className: LegacyFilters_module.default.LegacyFilters
        }, filtersControlMarkup, filtersContainerMarkup, tagsMarkup, helpTextMarkup, backdropMarkup, /* @__PURE__ */ React2.createElement(KeypressListener.KeypressListener, {
          keyCode: types.Key.Escape,
          handler: this.closeFilters
        })));
      }
      hasAppliedFilters() {
        let {
          appliedFilters,
          queryValue
        } = this.props, filtersApplied = Boolean(appliedFilters && appliedFilters.length > 0), queryApplied = Boolean(queryValue && queryValue !== "");
        return filtersApplied || queryApplied;
      }
      getAppliedFilterContent(key) {
        let {
          appliedFilters
        } = this.props;
        if (!appliedFilters)
          return;
        let filter = appliedFilters.find((filter2) => filter2.key === key);
        return filter?.label;
      }
      getAppliedFilterRemoveHandler(key) {
        let {
          appliedFilters
        } = this.props;
        if (!appliedFilters)
          return;
        let filter = appliedFilters.find((filter2) => filter2.key === key);
        return filter?.onRemove;
      }
      openFilters() {
        this.setState({
          open: !0
        });
      }
      toggleFilter(key) {
        this.state[`${key}${Suffix.Filter}`] === !0 ? this.setState({
          readyForFocus: !1,
          [`${key}${Suffix.Filter}`]: !1
        }) : this.setState({
          readyForFocus: !1,
          [`${key}${Suffix.Filter}`]: !0
        });
      }
      openFilterShortcut(key) {
        this.setState({
          [`${key}${Suffix.Shortcut}`]: !0
        });
      }
      closeFilterShortcut(key) {
        this.setState({
          [`${key}${Suffix.Shortcut}`]: !1
        });
      }
      toggleFilterShortcut(key) {
        this.state[`${key}${Suffix.Shortcut}`] === !0 ? this.closeFilterShortcut(key) : this.openFilterShortcut(key);
      }
      transformFilters(filters) {
        let transformedActions = [];
        return getShortcutFilters(filters).forEach((filter) => {
          let {
            key,
            label,
            disabled
          } = filter;
          transformedActions.push({
            popoverContent: this.generateFilterMarkup(filter),
            popoverOpen: Boolean(this.state[`${key}${Suffix.Shortcut}`]),
            key,
            content: label,
            disabled,
            onAction: () => this.toggleFilterShortcut(key)
          });
        }), transformedActions;
      }
      generateFilterMarkup(filter) {
        let i18n = this.props.i18n, removeCallback = this.getAppliedFilterRemoveHandler(filter.key), removeHandler = removeCallback == null ? void 0 : () => {
          removeCallback(filter.key);
        }, clearButtonMarkup = !filter.hideClearButton && /* @__PURE__ */ React2.createElement(Button2.Button, {
          variant: "plain",
          disabled: removeHandler == null,
          onClick: removeHandler,
          accessibilityLabel: i18n.translate("Polaris.Filters.clearLabel", {
            filterName: filter.label
          })
        }, i18n.translate("Polaris.Filters.clear"));
        return /* @__PURE__ */ React2.createElement("div", {
          ref: this.focusNode
        }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
          vertical: !0,
          spacing: "tight"
        }, filter.filter, clearButtonMarkup));
      }
    };
    LegacyFiltersInner.contextType = context.ResourceListContext;
    function getShortcutFilters(filters) {
      return filters.filter((filter) => filter.shortcut === !0);
    }
    function LegacyFilters(props) {
      let i18n = hooks.useI18n(), mediaQuery = hooks$1.useMediaQuery();
      return /* @__PURE__ */ React2.createElement(LegacyFiltersInner, Object.assign({}, props, {
        i18n,
        mediaQuery
      }));
    }
    exports.LegacyFilters = LegacyFilters;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/utilities.js
var require_utilities9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/utilities.js"(exports) {
    "use strict";
    function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
      let sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0), arrayOfTabIndices = tabs.map((_, index) => index), visibleTabs = [], hiddenTabs = [];
      if (containerWidth > sumTabWidths)
        visibleTabs.push(...arrayOfTabIndices);
      else {
        visibleTabs.push(selected);
        let tabListWidth = tabWidths[selected];
        arrayOfTabIndices.forEach((currentTabIndex) => {
          if (currentTabIndex !== selected) {
            let currentTabWidth = tabWidths[currentTabIndex];
            if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
              hiddenTabs.push(currentTabIndex);
              return;
            }
            visibleTabs.push(currentTabIndex), tabListWidth += currentTabWidth;
          }
        });
      }
      return {
        visibleTabs,
        hiddenTabs
      };
    }
    exports.getVisibleAndHiddenTabIndices = getVisibleAndHiddenTabIndices;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.scss.js
var require_LegacyTabs_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      LegacyTabs: "Polaris-LegacyTabs",
      fitted: "Polaris-LegacyTabs--fitted",
      TabContainer: "Polaris-LegacyTabs__TabContainer",
      Title: "Polaris-LegacyTabs__Title",
      fillSpace: "Polaris-LegacyTabs--fillSpace",
      Tab: "Polaris-LegacyTabs__Tab",
      "Tab-selected": "Polaris-LegacyTabs__Tab--selected",
      titleWithIcon: "Polaris-LegacyTabs--titleWithIcon",
      Panel: "Polaris-LegacyTabs__Panel",
      "Panel-hidden": "Polaris-LegacyTabs__Panel--hidden",
      Item: "Polaris-LegacyTabs__Item",
      DisclosureTab: "Polaris-LegacyTabs__DisclosureTab",
      "DisclosureTab-visible": "Polaris-LegacyTabs__DisclosureTab--visible",
      DisclosureActivator: "Polaris-LegacyTabs__DisclosureActivator",
      TabMeasurer: "Polaris-LegacyTabs__TabMeasurer"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Panel/Panel.js
var require_Panel2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Panel/Panel.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), LegacyTabs_module = require_LegacyTabs_scss();
    function Panel({
      hidden,
      id,
      tabID,
      children
    }) {
      let className = css.classNames(LegacyTabs_module.default.Panel, hidden && LegacyTabs_module.default["Panel-hidden"]);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        id,
        role: "tabpanel",
        "aria-labelledby": tabID,
        tabIndex: -1
      }, children);
    }
    exports.Panel = Panel;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Tab/Tab.js
var require_Tab2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Tab/Tab.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), focus = require_focus(), LegacyTabs_module = require_LegacyTabs_scss(), UnstyledLink = require_UnstyledLink();
    function Tab({
      id,
      focused,
      siblingTabHasFocus,
      children,
      onClick,
      selected,
      url,
      panelID,
      measuring,
      accessibilityLabel
    }) {
      let wasSelected = React2.useRef(selected), panelFocused = React2.useRef(!1), node = React2.useRef(null);
      React2.useEffect(() => {
        if (measuring)
          return;
        (focused || document.activeElement && document.activeElement.id === id) && selected && panelID != null && !panelFocused.current && (focusPanelID(panelID), panelFocused.current = !0), selected && !wasSelected.current && panelID != null ? focusPanelID(panelID) : focused && node.current != null && focus.focusFirstFocusableNode(node.current), wasSelected.current = selected;
      }, [focused, id, measuring, panelID, selected]);
      let handleClick = onClick && onClick.bind(null, id), className = css.classNames(LegacyTabs_module.default.Tab, selected && LegacyTabs_module.default["Tab-selected"]), tabIndex;
      selected && !siblingTabHasFocus && !measuring || focused && !measuring ? tabIndex = 0 : tabIndex = -1;
      let tabContainerClassNames = css.classNames(LegacyTabs_module.default.TabContainer, selected && LegacyTabs_module.default.Underline), markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        id,
        url,
        role: "tab",
        tabIndex,
        onClick: handleClick,
        className,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        onMouseUp: focus.handleMouseUpByBlurring
      }, /* @__PURE__ */ React2.createElement("span", {
        className: LegacyTabs_module.default.Title
      }, children)) : /* @__PURE__ */ React2.createElement("button", {
        id,
        role: "tab",
        type: "button",
        tabIndex,
        className,
        onClick: handleClick,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        onMouseUp: focus.handleMouseUpByBlurring
      }, /* @__PURE__ */ React2.createElement("span", {
        className: LegacyTabs_module.default.Title
      }, children));
      return /* @__PURE__ */ React2.createElement("li", {
        className: tabContainerClassNames,
        ref: node,
        role: "presentation"
      }, markup);
    }
    function focusPanelID(panelID) {
      let panel = document.getElementById(panelID);
      panel && panel.focus({
        preventScroll: !0
      });
    }
    exports.Tab = Tab;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/TabMeasurer/TabMeasurer.js
var require_TabMeasurer2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/TabMeasurer/TabMeasurer.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), useComponentDidMount = require_use_component_did_mount(), LegacyTabs_module = require_LegacyTabs_scss(), Tab = require_Tab2(), EventListener = require_EventListener(), TabMeasurer = /* @__PURE__ */ React2.memo(function({
      selected,
      tabs,
      activator,
      tabToFocus,
      siblingTabHasFocus,
      handleMeasurement: handleMeasurementProp
    }) {
      let containerNode = React2.useRef(null), animationFrame = React2.useRef(null), handleMeasurement = React2.useCallback(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!containerNode.current)
            return;
          let containerWidth = containerNode.current.offsetWidth, hiddenTabNodes = containerNode.current.children, hiddenTabWidths = Array.from(hiddenTabNodes).map((node) => Math.ceil(node.getBoundingClientRect().width)), disclosureWidth = hiddenTabWidths.pop() || 0;
          handleMeasurementProp({
            containerWidth,
            disclosureWidth,
            hiddenTabWidths
          });
        });
      }, [handleMeasurementProp]);
      React2.useEffect(() => {
        handleMeasurement();
      }, [handleMeasurement, tabs]), useComponentDidMount.useComponentDidMount(() => {
      });
      let tabsMarkup = tabs.map((tab, index) => /* @__PURE__ */ React2.createElement(Tab.Tab, {
        measuring: !0,
        key: `${index}${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        onClick: noop,
        url: tab.url
      }, tab.content)), classname = css.classNames(LegacyTabs_module.default.LegacyTabs, LegacyTabs_module.default.TabMeasurer);
      return /* @__PURE__ */ React2.createElement("div", {
        className: classname,
        ref: containerNode
      }, /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
        event: "resize",
        handler: handleMeasurement
      }), tabsMarkup, activator);
    });
    function noop() {
    }
    exports.TabMeasurer = TabMeasurer;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Item/Item.js
var require_Item8 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), LegacyTabs_module = require_LegacyTabs_scss(), UnstyledLink = require_UnstyledLink(), context = require_context(), Item = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.focusedNode = null, this.setFocusedNode = (node) => {
          this.focusedNode = node;
        };
      }
      componentDidMount() {
        let {
          focusedNode
        } = this, {
          focused
        } = this.props;
        focusedNode && focusedNode instanceof HTMLElement && focused && focusedNode.focus();
      }
      componentDidUpdate() {
        let {
          focusedNode
        } = this, {
          focused
        } = this.props;
        focusedNode && focusedNode instanceof HTMLElement && focused && focusedNode.focus();
      }
      render() {
        let {
          id,
          panelID,
          children,
          url,
          accessibilityLabel,
          onClick = noop
        } = this.props, classname = css.classNames(LegacyTabs_module.default.Item), sharedProps = {
          id,
          ref: this.setFocusedNode,
          onClick,
          className: classname,
          "aria-controls": panelID,
          "aria-selected": !1,
          "aria-label": accessibilityLabel
        }, markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({}, sharedProps, {
          url
        }), children) : /* @__PURE__ */ React2.createElement("button", Object.assign({}, sharedProps, {
          type: "button"
        }), children);
        return /* @__PURE__ */ React2.createElement("li", null, markup);
      }
    };
    Item.contextType = context.FeaturesContext;
    function noop() {
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/List/List.js
var require_List2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require("react"), Item = require_Item8(), Box = require_Box();
    function List({
      focusIndex,
      disclosureTabs,
      onClick = noop,
      onKeyPress = noop
    }) {
      let tabs = disclosureTabs.map(({
        id,
        content,
        ...tabProps
      }, index) => /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
        key: id
      }, tabProps, {
        id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content));
      return /* @__PURE__ */ React2.createElement("div", {
        onKeyDown: handleKeyDown,
        onKeyUp: onKeyPress
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        as: "ul",
        padding: "200"
      }, tabs));
    }
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.js
var require_LegacyTabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/LegacyTabs/LegacyTabs.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), utilities = require_utilities9(), LegacyTabs_module = require_LegacyTabs_scss(), Panel = require_Panel2(), TabMeasurer = require_TabMeasurer2(), List = require_List2(), hooks = require_hooks2(), Tab = require_Tab2(), Icon = require_Icon(), Box = require_Box(), Popover = require_Popover(), TabsInner = class extends React2.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          disclosureWidth: 0,
          containerWidth: 1 / 0,
          tabWidths: [],
          visibleTabs: [],
          hiddenTabs: [],
          showDisclosure: !1,
          tabToFocus: -1
        }, this.handleKeyPress = (event) => {
          let {
            tabToFocus,
            visibleTabs,
            hiddenTabs,
            showDisclosure
          } = this.state, key = event.key, tabsArrayInOrder = showDisclosure ? visibleTabs.concat(hiddenTabs) : [...visibleTabs], newFocus = tabsArrayInOrder.indexOf(tabToFocus);
          key === "ArrowRight" && (newFocus += 1, newFocus === tabsArrayInOrder.length && (newFocus = 0)), key === "ArrowLeft" && (newFocus === -1 || newFocus === 0 ? newFocus = tabsArrayInOrder.length - 1 : newFocus -= 1), this.setState({
            tabToFocus: tabsArrayInOrder[newFocus]
          });
        }, this.renderTabMarkup = (tab, index) => {
          let {
            selected,
            children
          } = this.props, {
            tabToFocus
          } = this.state, tabPanelID = tab.panelID || `${tab.id}-panel`;
          return /* @__PURE__ */ React2.createElement(Tab.Tab, {
            key: `${index}-${tab.id}`,
            id: tab.id,
            siblingTabHasFocus: tabToFocus > -1,
            focused: index === tabToFocus,
            selected: index === selected,
            onClick: this.handleTabClick,
            panelID: children ? tabPanelID : void 0,
            accessibilityLabel: tab.accessibilityLabel,
            url: tab.url
          }, tab.content);
        }, this.handleFocus = (event) => {
          let {
            selected,
            tabs
          } = this.props, target = event.target;
          if (target.classList.contains(LegacyTabs_module.default.Tab) || target.classList.contains(LegacyTabs_module.default.Item)) {
            let tabToFocus = -1;
            tabs.every((tab, index) => tab.id === target.id ? (tabToFocus = index, !1) : !0), this.setState({
              tabToFocus
            });
            return;
          }
          if (target.classList.contains(LegacyTabs_module.default.DisclosureActivator))
            return;
          if (!event.relatedTarget) {
            this.setState({
              tabToFocus: selected
            });
            return;
          }
          let relatedTarget = event.relatedTarget;
          relatedTarget instanceof HTMLElement && !relatedTarget.classList.contains(LegacyTabs_module.default.Tab) && !relatedTarget.classList.contains(LegacyTabs_module.default.Item) && !relatedTarget.classList.contains(LegacyTabs_module.default.DisclosureActivator) && this.setState({
            tabToFocus: selected
          });
        }, this.handleBlur = (event) => {
          if (event.relatedTarget == null) {
            this.setState({
              tabToFocus: -1
            });
            return;
          }
          let target = event.relatedTarget;
          target instanceof HTMLElement && !target.classList.contains(LegacyTabs_module.default.Tab) && !target.classList.contains(LegacyTabs_module.default.Item) && this.setState({
            tabToFocus: -1
          });
        }, this.handleDisclosureActivatorClick = () => {
          this.setState(({
            showDisclosure
          }) => ({
            showDisclosure: !showDisclosure
          }));
        }, this.handleClose = () => {
          this.setState({
            showDisclosure: !1
          });
        }, this.handleMeasurement = (measurements) => {
          let {
            tabs,
            selected
          } = this.props, {
            tabToFocus
          } = this.state, {
            hiddenTabWidths: tabWidths,
            containerWidth,
            disclosureWidth
          } = measurements, {
            visibleTabs,
            hiddenTabs
          } = utilities.getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
          this.setState({
            tabToFocus: tabToFocus === -1 ? -1 : selected,
            visibleTabs,
            hiddenTabs,
            disclosureWidth,
            containerWidth,
            tabWidths
          });
        }, this.handleTabClick = (id) => {
          let {
            tabs,
            onSelect = noop
          } = this.props, tab = tabs.find((aTab) => aTab.id === id);
          if (tab == null)
            return;
          let selectedIndex = tabs.indexOf(tab);
          onSelect(selectedIndex);
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let {
          disclosureWidth,
          tabWidths,
          containerWidth
        } = prevState, {
          visibleTabs,
          hiddenTabs
        } = utilities.getVisibleAndHiddenTabIndices(nextProps.tabs, nextProps.selected, disclosureWidth, tabWidths, containerWidth);
        return {
          visibleTabs,
          hiddenTabs,
          selected: nextProps.selected
        };
      }
      render() {
        let {
          tabs,
          selected,
          fitted,
          children,
          i18n,
          disclosureText
        } = this.props, {
          tabToFocus,
          visibleTabs,
          hiddenTabs,
          showDisclosure
        } = this.state, disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]), panelMarkup = children ? tabs.map((_tab, index) => selected === index ? /* @__PURE__ */ React2.createElement(Panel.Panel, {
          id: tabs[index].panelID || `${tabs[index].id}-panel`,
          tabID: tabs[index].id,
          key: tabs[index].id
        }, children) : /* @__PURE__ */ React2.createElement(Panel.Panel, {
          id: tabs[index].panelID || `${tabs[index].id}-panel`,
          tabID: tabs[index].id,
          key: tabs[index].id,
          hidden: !0
        })) : null, tabsMarkup = visibleTabs.sort((tabA, tabB) => tabA - tabB).map((tabIndex) => this.renderTabMarkup(tabs[tabIndex], tabIndex)), disclosureActivatorVisible = visibleTabs.length < tabs.length, hasCustomDisclosure = Boolean(disclosureText), classname = css.classNames(LegacyTabs_module.default.LegacyTabs, fitted && LegacyTabs_module.default.fitted, disclosureActivatorVisible && LegacyTabs_module.default.fillSpace), disclosureTabClassName = css.classNames(LegacyTabs_module.default.DisclosureTab, disclosureActivatorVisible && LegacyTabs_module.default["DisclosureTab-visible"]), disclosureButtonClassName = css.classNames(LegacyTabs_module.default.DisclosureActivator, hasCustomDisclosure && LegacyTabs_module.default.Tab), disclosureButtonContentWrapperClassName = css.classNames(LegacyTabs_module.default.Title, hasCustomDisclosure && LegacyTabs_module.default.titleWithIcon), disclosureButtonContent = hasCustomDisclosure ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, disclosureText, /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: polarisIcons.ChevronDownIcon,
          tone: "subdued"
        })) : /* @__PURE__ */ React2.createElement(Icon.Icon, {
          source: polarisIcons.MenuHorizontalIcon,
          tone: "subdued"
        }), disclosureButton = /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: disclosureButtonClassName,
          onClick: this.handleDisclosureActivatorClick,
          "aria-label": i18n.translate("Polaris.Tabs.toggleTabsLabel")
        }, /* @__PURE__ */ React2.createElement("span", {
          className: disclosureButtonContentWrapperClassName
        }, disclosureButtonContent)), activator = disclosureText ? /* @__PURE__ */ React2.createElement("div", {
          className: LegacyTabs_module.default.TabContainer
        }, disclosureButton) : disclosureButton;
        return /* @__PURE__ */ React2.createElement("div", null, /* @__PURE__ */ React2.createElement(Box.Box, {
          borderBlockEndWidth: "025",
          borderColor: "border-secondary",
          paddingInlineStart: "200",
          paddingInlineEnd: "200"
        }, /* @__PURE__ */ React2.createElement(TabMeasurer.TabMeasurer, {
          tabToFocus,
          activator,
          selected,
          tabs,
          siblingTabHasFocus: tabToFocus > -1,
          handleMeasurement: this.handleMeasurement
        }), /* @__PURE__ */ React2.createElement("ul", {
          role: "tablist",
          className: classname,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyDown: handleKeyDown,
          onKeyUp: this.handleKeyPress
        }, tabsMarkup, /* @__PURE__ */ React2.createElement("li", {
          className: disclosureTabClassName,
          role: "presentation"
        }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
          preferredPosition: "below",
          activator,
          active: disclosureActivatorVisible && showDisclosure,
          onClose: this.handleClose,
          autofocusTarget: "first-node"
        }, /* @__PURE__ */ React2.createElement(List.List, {
          focusIndex: hiddenTabs.indexOf(tabToFocus),
          disclosureTabs,
          onClick: this.handleTabClick,
          onKeyPress: this.handleKeyPress
        }))))), panelMarkup);
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    function noop() {
    }
    function handleKeyDown(event) {
      let {
        key
      } = event;
      (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
    }
    function LegacyTabs(props) {
      let i18n = hooks.useI18n();
      return /* @__PURE__ */ React2.createElement(TabsInner, Object.assign({}, props, {
        i18n
      }));
    }
    exports.LegacyTabs = LegacyTabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Link/Link.scss.js
var require_Link_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Link/Link.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Link: "Polaris-Link",
      monochrome: "Polaris-Link--monochrome",
      removeUnderline: "Polaris-Link--removeUnderline"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Link/Link.js
var require_Link = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Link/Link.js"(exports) {
    "use strict";
    var React2 = require("react"), bannerContext = require_banner_context(), css = require_css(), Link_module = require_Link_scss(), UnstyledLink = require_UnstyledLink();
    function Link2({
      url,
      children,
      onClick,
      external,
      target,
      id,
      monochrome,
      removeUnderline,
      accessibilityLabel,
      dataPrimaryLink
    }) {
      return /* @__PURE__ */ React2.createElement(bannerContext.BannerContext.Consumer, null, (BannerContext) => {
        let shouldBeMonochrome = monochrome || BannerContext, className = css.classNames(Link_module.default.Link, shouldBeMonochrome && Link_module.default.monochrome, removeUnderline && Link_module.default.removeUnderline);
        return url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          onClick,
          className,
          url,
          external,
          target,
          id,
          "aria-label": accessibilityLabel,
          "data-primary-link": dataPrimaryLink
        }, children) : /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          onClick,
          className,
          id,
          "aria-label": accessibilityLabel,
          "data-primary-link": dataPrimaryLink
        }, children);
      });
    }
    exports.Link = Link2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/List.scss.js
var require_List_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/List.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      List: "Polaris-List",
      typeNumber: "Polaris-List--typeNumber",
      Item: "Polaris-List__Item",
      spacingLoose: "Polaris-List--spacingLoose"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/components/Item/Item.js
var require_Item9 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), List_module = require_List_scss();
    function Item({
      children
    }) {
      return /* @__PURE__ */ React2.createElement("li", {
        className: List_module.default.Item
      }, children);
    }
    exports.Item = Item;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/List/List.js
var require_List3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/List/List.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), List_module = require_List_scss(), Item = require_Item9(), List = function({
      children,
      gap = "loose",
      type = "bullet"
    }) {
      let className = css.classNames(List_module.default.List, gap && List_module.default[css.variationName("spacing", gap)], type && List_module.default[css.variationName("type", type)]), ListElement = type === "bullet" ? "ul" : "ol";
      return /* @__PURE__ */ React2.createElement(ListElement, {
        className
      }, children);
    };
    List.Item = Item.Item;
    exports.List = List;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Loading/Loading.js
var require_Loading3 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Loading/Loading.js"(exports) {
    "use strict";
    var React2 = require("react"), hooks = require_hooks9(), Loading = /* @__PURE__ */ React2.memo(function() {
      let {
        startLoading,
        stopLoading
      } = hooks.useFrame();
      return React2.useEffect(() => (startLoading(), () => {
        stopLoading();
      }), [startLoading, stopLoading]), null;
    });
    exports.Loading = Loading;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.scss.js
var require_MediaCard_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      MediaCard: "Polaris-MediaCard",
      portrait: "Polaris-MediaCard--portrait",
      MediaContainer: "Polaris-MediaCard__MediaContainer",
      sizeSmall: "Polaris-MediaCard--sizeSmall",
      InfoContainer: "Polaris-MediaCard__InfoContainer",
      ActionContainer: "Polaris-MediaCard__ActionContainer",
      Description: "Polaris-MediaCard__Description"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.js
var require_MediaCard = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MediaCard/MediaCard.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), css = require_css(), MediaCard_module = require_MediaCard_scss(), hooks = require_hooks2(), Button2 = require_Button(), InlineStack = require_InlineStack(), Popover = require_Popover(), ActionList = require_ActionList(), utils = require_utils(), LegacyCard = require_LegacyCard(), Box = require_Box(), BlockStack2 = require_BlockStack(), ButtonGroup = require_ButtonGroup(), Text2 = require_Text();
    function MediaCard({
      title,
      children,
      primaryAction,
      secondaryAction,
      description,
      popoverActions = [],
      portrait = !1,
      size = "medium",
      onDismiss
    }) {
      let i18n = hooks.useI18n(), {
        value: popoverActive,
        toggle: togglePopoverActive
      } = useToggle.useToggle(!1), headerMarkup = null;
      if (title) {
        let headerContent = typeof title == "string" ? /* @__PURE__ */ React2.createElement(Text2.Text, {
          variant: "headingSm",
          as: "h2"
        }, title) : title;
        headerMarkup = /* @__PURE__ */ React2.createElement("div", null, headerContent);
      }
      let dismissButtonMarkup = onDismiss ? /* @__PURE__ */ React2.createElement(Button2.Button, {
        icon: polarisIcons.XIcon,
        onClick: onDismiss,
        size: "slim",
        accessibilityLabel: i18n.translate("Polaris.MediaCard.dismissButton"),
        variant: "tertiary"
      }) : null, popoverActivator = /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        icon: polarisIcons.MenuHorizontalIcon,
        onClick: togglePopoverActive,
        size: "slim",
        accessibilityLabel: i18n.translate("Polaris.MediaCard.popoverButton"),
        variant: "tertiary"
      })), popoverActionsMarkup = popoverActions.length > 0 ? /* @__PURE__ */ React2.createElement(Popover.Popover, {
        active: popoverActive,
        activator: popoverActivator,
        onClose: togglePopoverActive,
        preferredAlignment: "left",
        preferredPosition: "below"
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        items: popoverActions,
        onActionAnyItem: togglePopoverActive
      })) : null, primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement("div", null, utils.buttonFrom(primaryAction)) : null, secondaryActionMarkup = secondaryAction ? /* @__PURE__ */ React2.createElement("div", null, utils.buttonFrom(secondaryAction)) : null, actionClassName = css.classNames(MediaCard_module.default.ActionContainer, portrait && MediaCard_module.default.portrait), actionMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: actionClassName
      }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup)) : null, mediaCardClassName = css.classNames(MediaCard_module.default.MediaCard, portrait && MediaCard_module.default.portrait), mediaContainerClassName = css.classNames(MediaCard_module.default.MediaContainer, portrait && MediaCard_module.default.portrait, size === "small" && MediaCard_module.default.sizeSmall), infoContainerClassName = css.classNames(MediaCard_module.default.InfoContainer, portrait && MediaCard_module.default.portrait, size === "small" && MediaCard_module.default.sizeSmall), popoverOrDismissMarkup = popoverActionsMarkup || dismissButtonMarkup ? /* @__PURE__ */ React2.createElement(Box.Box, {
        position: "absolute",
        insetInlineEnd: "500",
        zIndex: "var(--p-z-index-2)"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "100",
        wrap: !1
      }, popoverActionsMarkup, dismissButtonMarkup)) : null;
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, null, /* @__PURE__ */ React2.createElement("div", {
        className: mediaCardClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: mediaContainerClassName
      }, children), /* @__PURE__ */ React2.createElement("div", {
        className: infoContainerClassName
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        padding: "500"
      }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "200"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        wrap: !1,
        align: "space-between",
        gap: "200"
      }, headerMarkup, popoverOrDismissMarkup), /* @__PURE__ */ React2.createElement("p", {
        className: MediaCard_module.default.Description
      }, description), actionMarkup)))));
    }
    exports.MediaCard = MediaCard;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/context.js
var require_context20 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/context.js"(exports) {
    "use strict";
    var React2 = require("react"), NavigationContext = /* @__PURE__ */ React2.createContext({
      location: ""
    });
    exports.NavigationContext = NavigationContext;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.scss.js
var require_Navigation_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Navigation: "Polaris-Navigation",
      UserMenu: "Polaris-Navigation__UserMenu",
      ContextControl: "Polaris-Navigation__ContextControl",
      PrimaryNavigation: "Polaris-Navigation__PrimaryNavigation",
      LogoContainer: "Polaris-Navigation__LogoContainer",
      hasLogoSuffix: "Polaris-Navigation--hasLogoSuffix",
      Logo: "Polaris-Navigation__Logo",
      LogoLink: "Polaris-Navigation__LogoLink",
      Item: "Polaris-Navigation__Item",
      "Icon-resized": "Polaris-Navigation__Icon--resized",
      Badge: "Polaris-Navigation__Badge",
      ItemInnerWrapper: "Polaris-Navigation__ItemInnerWrapper",
      ItemWrapper: "Polaris-Navigation__ItemWrapper",
      ItemInnerDisabled: "Polaris-Navigation__ItemInnerDisabled",
      "ItemInnerWrapper-display-actions-on-hover": "Polaris-Navigation--itemInnerWrapperDisplayActionsOnHover",
      SecondaryActions: "Polaris-Navigation__SecondaryActions",
      "ItemInnerWrapper-selected": "Polaris-Navigation__ItemInnerWrapper--selected",
      Text: "Polaris-Navigation__Text",
      "ItemInnerWrapper-open": "Polaris-Navigation__ItemInnerWrapper--open",
      "Item-selected": "Polaris-Navigation__Item--selected",
      "Item-child-active": "Polaris-Navigation--itemChildActive",
      "Item-disabled": "Polaris-Navigation__Item--disabled",
      Icon: "Polaris-Navigation__Icon",
      "ListItem-hasAction": "Polaris-Navigation__ListItem--hasAction",
      subNavigationActive: "Polaris-Navigation--subNavigationActive",
      ListItem: "Polaris-Navigation__ListItem",
      RollupSection: "Polaris-Navigation__RollupSection",
      SecondaryNavigation: "Polaris-Navigation__SecondaryNavigation",
      "Text-truncated": "Polaris-Navigation__Text--truncated",
      ItemWithFloatingActions: "Polaris-Navigation__ItemWithFloatingActions",
      SecondaryAction: "Polaris-Navigation__SecondaryAction",
      List: "Polaris-Navigation__List",
      "Item-line": "Polaris-Navigation__Item--line",
      "Item-hover-line": "Polaris-Navigation--itemHoverLine",
      "Item-line-pointer": "Polaris-Navigation--itemLinePointer",
      "Item-hover-pointer": "Polaris-Navigation--itemHoverPointer",
      "SecondaryNavigation-noIcon": "Polaris-Navigation__SecondaryNavigation--noIcon",
      Section: "Polaris-Navigation__Section",
      "Section-fill": "Polaris-Navigation__Section--fill",
      "Section-withSeparator": "Polaris-Navigation__Section--withSeparator",
      SectionHeading: "Polaris-Navigation__SectionHeading",
      Action: "Polaris-Navigation__Action",
      RollupToggle: "Polaris-Navigation__RollupToggle",
      Indicator: "Polaris-Navigation__Indicator",
      SecondaryNavigationOpen: "Polaris-Navigation__SecondaryNavigationOpen",
      "snappy-grow": "Polaris-Navigation__snappy--grow"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/types.js
var require_types5 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/types.js"(exports) {
    "use strict";
    exports.MatchState = void 0;
    (function(MatchState) {
      MatchState[MatchState.MatchForced = 0] = "MatchForced", MatchState[MatchState.MatchUrl = 1] = "MatchUrl", MatchState[MatchState.MatchPaths = 2] = "MatchPaths", MatchState[MatchState.Excluded = 3] = "Excluded", MatchState[MatchState.NoMatch = 4] = "NoMatch";
    })(exports.MatchState || (exports.MatchState = {}));
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/components/SecondaryNavigation/SecondaryNavigation.js
var require_SecondaryNavigation = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/components/SecondaryNavigation/SecondaryNavigation.js"(exports) {
    "use strict";
    var React2 = require("react"), isEqual = require("react-fast-compare"), css = require_css(), context = require_context20(), Navigation_module = require_Navigation_scss(), Collapsible = require_Collapsible();
    function SecondaryNavigation({
      ItemComponent,
      icon,
      longestMatch,
      subNavigationItems,
      showExpanded,
      truncateText,
      secondaryNavigationId
    }) {
      let uid = React2.useId(), {
        onNavigationDismiss
      } = React2.useContext(context.NavigationContext), [hoveredItem, setHoveredItem] = React2.useState(), matchedItemPosition = subNavigationItems.findIndex((item) => isEqual(item, longestMatch)), hoveredItemPosition = subNavigationItems.findIndex((item) => isEqual(item, hoveredItem));
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.SecondaryNavigation, showExpanded && Navigation_module.default.SecondaryNavigationOpen, !icon && Navigation_module.default["SecondaryNavigation-noIcon"])
      }, /* @__PURE__ */ React2.createElement(Collapsible.Collapsible, {
        id: secondaryNavigationId || uid,
        open: showExpanded,
        transition: !1
      }, /* @__PURE__ */ React2.createElement("ul", {
        className: Navigation_module.default.List
      }, subNavigationItems.map((item, index) => {
        let {
          label,
          ...rest
        } = item, onClick = () => {
          onNavigationDismiss?.(), item.onClick && item.onClick !== onNavigationDismiss && item.onClick();
        }, shouldShowVerticalLine = index < matchedItemPosition;
        return /* @__PURE__ */ React2.createElement(ItemComponent, Object.assign({
          key: label
        }, rest, {
          label,
          showVerticalLine: shouldShowVerticalLine,
          showVerticalHoverPointer: index === hoveredItemPosition,
          onMouseEnter: item.disabled ? void 0 : () => setHoveredItem(item),
          onMouseLeave: item.disabled ? void 0 : () => setHoveredItem(void 0),
          matches: isEqual(item, longestMatch),
          onClick,
          truncateText
        }));
      }))));
    }
    exports.SecondaryNavigation = SecondaryNavigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/Item.js
var require_Item10 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Item/Item.js"(exports) {
    "use strict";
    var React2 = require("react"), useIsomorphicLayoutEffect = require_use_isomorphic_layout_effect(), css = require_css(), context = require_context20(), Navigation_module = require_Navigation_scss(), types = require_types5(), SecondaryNavigation = require_SecondaryNavigation(), hooks = require_hooks2(), hooks$1 = require_hooks11(), Indicator = require_Indicator(), Icon = require_Icon(), Badge = require_Badge(), UnstyledLink = require_UnstyledLink(), UnstyledButton = require_UnstyledButton(), Tooltip = require_Tooltip(), MAX_SECONDARY_ACTIONS = 2, TOOLTIP_HOVER_DELAY = 1e3;
    function Item({
      url,
      icon: baseIcon,
      matchedItemIcon,
      label,
      subNavigationItems = [],
      secondaryAction,
      secondaryActions,
      displayActionsOnHover,
      disabled,
      onClick,
      accessibilityLabel,
      selected: selectedOverride,
      badge,
      new: isNew,
      matches,
      exactMatch,
      matchPaths,
      excludePaths,
      external,
      onToggleExpandedState,
      expanded,
      shouldResizeIcon,
      truncateText,
      showVerticalLine,
      showVerticalHoverPointer,
      onMouseEnter,
      onMouseLeave
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), secondaryNavigationId = React2.useId(), {
        location,
        onNavigationDismiss
      } = React2.useContext(context.NavigationContext), navTextRef = React2.useRef(null), [isTruncated, setIsTruncated] = React2.useState(!1);
      React2.useEffect(() => {
        !isNavigationCollapsed && expanded && onToggleExpandedState?.();
      }, [expanded, isNavigationCollapsed, onToggleExpandedState]), useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        let navTextNode = navTextRef.current;
        truncateText && navTextNode && setIsTruncated(navTextNode.scrollHeight > navTextNode.clientHeight);
      }, [truncateText]);
      let tabIndex = disabled ? -1 : 0, indicatorMarkup = subNavigationItems.filter((subNavigationItem) => subNavigationItem.new).length > 0 ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.Indicator
      }, /* @__PURE__ */ React2.createElement(Indicator.Indicator, {
        pulse: !0
      })) : null, matchState = matchStateForItem({
        url,
        matches,
        exactMatch,
        matchPaths,
        excludePaths
      }, location), matchingSubNavigationItems = subNavigationItems.filter((item) => {
        let subMatchState = matchStateForItem(item, location);
        return subMatchState === types.MatchState.MatchForced || subMatchState === types.MatchState.MatchUrl || subMatchState === types.MatchState.MatchPaths;
      }), childIsActive = matchingSubNavigationItems.length > 0, selected = selectedOverride ?? (matchState === types.MatchState.MatchForced || matchState === types.MatchState.MatchUrl || matchState === types.MatchState.MatchPaths), icon = selected || childIsActive ? matchedItemIcon ?? baseIcon : baseIcon, iconMarkup = icon ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.Icon, shouldResizeIcon && Navigation_module.default["Icon-resized"])
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: icon
      })) : null, badgeMarkup = null;
      isNew ? badgeMarkup = /* @__PURE__ */ React2.createElement(Badge.Badge, {
        tone: "new"
      }, i18n.translate("Polaris.Badge.TONE_LABELS.new")) : typeof badge == "string" ? badgeMarkup = /* @__PURE__ */ React2.createElement(Badge.Badge, {
        tone: "new"
      }, badge) : badgeMarkup = badge;
      let wrappedBadgeMarkup = badgeMarkup == null ? null : /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.Badge
      }, badgeMarkup), itemLabelMarkup = /* @__PURE__ */ React2.createElement("span", {
        className: css.classNames(Navigation_module.default.Text, truncateText && Navigation_module.default["Text-truncated"]),
        ref: navTextRef
      }, label, indicatorMarkup);
      if (url == null) {
        let className2 = css.classNames(Navigation_module.default.Item, disabled && Navigation_module.default["Item-disabled"], selectedOverride && Navigation_module.default["Item-selected"]);
        return /* @__PURE__ */ React2.createElement("li", {
          className: Navigation_module.default.ListItem
        }, /* @__PURE__ */ React2.createElement("div", {
          className: Navigation_module.default.ItemWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(Navigation_module.default.ItemInnerWrapper, disabled && Navigation_module.default.ItemInnerDisabled, selectedOverride && Navigation_module.default["ItemInnerWrapper-selected"])
        }, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: className2,
          disabled,
          "aria-disabled": disabled,
          "aria-label": accessibilityLabel,
          onClick: getClickHandler(onClick)
        }, iconMarkup, itemLabelMarkup, wrappedBadgeMarkup))));
      }
      let actions = secondaryActions || secondaryAction && [secondaryAction];
      actions && actions.length > MAX_SECONDARY_ACTIONS && (actions.length = MAX_SECONDARY_ACTIONS);
      let secondaryActionMarkup = actions?.length ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.SecondaryActions
      }, actions.map((action) => /* @__PURE__ */ React2.createElement(ItemSecondaryAction, Object.assign({
        key: action.accessibilityLabel
      }, action, {
        tabIndex,
        disabled
      })))) : null, itemContentMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, iconMarkup, itemLabelMarkup, secondaryActionMarkup ? null : wrappedBadgeMarkup), outerContentMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActionMarkup ? wrappedBadgeMarkup : null), showExpanded = selected || expanded || childIsActive, itemClassName = css.classNames(Navigation_module.default.Item, disabled && Navigation_module.default["Item-disabled"], (selected || childIsActive) && Navigation_module.default["Item-selected"], showExpanded && Navigation_module.default.subNavigationActive, childIsActive && Navigation_module.default["Item-child-active"], showVerticalLine && Navigation_module.default["Item-line"], matches && Navigation_module.default["Item-line-pointer"], showVerticalHoverPointer && Navigation_module.default["Item-hover-pointer"]), secondaryNavigationMarkup = null;
      if (subNavigationItems.length > 0) {
        let longestMatch = matchingSubNavigationItems.sort(({
          url: firstUrl
        }, {
          url: secondUrl
        }) => secondUrl.length - firstUrl.length)[0];
        secondaryNavigationMarkup = /* @__PURE__ */ React2.createElement(SecondaryNavigation.SecondaryNavigation, {
          ItemComponent: Item,
          icon,
          longestMatch,
          subNavigationItems,
          showExpanded,
          truncateText,
          secondaryNavigationId
        });
      }
      let className = css.classNames(Navigation_module.default.ListItem, Boolean(actions && actions.length) && Navigation_module.default["ListItem-hasAction"]), itemLinkMarkup = () => {
        let linkMarkup = /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, Object.assign({
          url,
          className: itemClassName,
          external,
          tabIndex,
          "aria-disabled": disabled,
          "aria-label": accessibilityLabel,
          onClick: getClickHandler(onClick)
        }, normalizeAriaAttributes(secondaryNavigationId, subNavigationItems.length > 0, showExpanded)), itemContentMarkup);
        return isTruncated ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          hoverDelay: TOOLTIP_HOVER_DELAY,
          content: label,
          preferredPosition: "above"
        }, linkMarkup) : linkMarkup;
      };
      return /* @__PURE__ */ React2.createElement("li", {
        className,
        onMouseEnter: () => {
          onMouseEnter?.(label);
        },
        onMouseLeave
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.ItemInnerWrapper, selected && childIsActive && Navigation_module.default["ItemInnerWrapper-open"] || selected && !childIsActive && Navigation_module.default["ItemInnerWrapper-selected"], displayActionsOnHover && Navigation_module.default["ItemInnerWrapper-display-actions-on-hover"], disabled && Navigation_module.default.ItemInnerDisabled)
      }, displayActionsOnHover && secondaryActionMarkup && wrappedBadgeMarkup ? /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.ItemWithFloatingActions
      }, itemLinkMarkup(), secondaryActionMarkup) : /* @__PURE__ */ React2.createElement(React2.Fragment, null, itemLinkMarkup(), secondaryActionMarkup), outerContentMarkup)), secondaryNavigationMarkup);
      function getClickHandler(onClick2) {
        return (event) => {
          let {
            currentTarget
          } = event;
          if (currentTarget.getAttribute("href") === location && event.preventDefault(), subNavigationItems && subNavigationItems.length > 0 && isNavigationCollapsed)
            event.preventDefault(), onToggleExpandedState?.();
          else if (onNavigationDismiss) {
            onNavigationDismiss(), onClick2 && onClick2 !== onNavigationDismiss && onClick2();
            return;
          }
          onClick2 && onClick2();
        };
      }
    }
    function ItemSecondaryAction({
      url,
      icon,
      accessibilityLabel,
      tooltip,
      onClick,
      disabled,
      tabIndex
    }) {
      let markup = url ? /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        external: !0,
        url,
        className: Navigation_module.default.SecondaryAction,
        tabIndex,
        "aria-disabled": disabled,
        "aria-label": accessibilityLabel,
        onClick
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: icon
      })) : /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, {
        className: Navigation_module.default.SecondaryAction,
        tabIndex,
        disabled,
        accessibilityLabel,
        onClick
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: icon
      }));
      return tooltip ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, tooltip, " ", markup, " ") : markup;
    }
    function isNavigationItemActive(navigationItem, currentPath) {
      let matchState = matchStateForItem(navigationItem, currentPath), matchingSubNavigationItems = navigationItem.subNavigationItems && navigationItem.subNavigationItems.filter((item) => {
        let subMatchState = matchStateForItem(item, currentPath);
        return subMatchState === types.MatchState.MatchForced || subMatchState === types.MatchState.MatchUrl || subMatchState === types.MatchState.MatchPaths;
      }), childIsActive = matchingSubNavigationItems && matchingSubNavigationItems.length > 0;
      return matchState === types.MatchState.MatchForced || matchState === types.MatchState.MatchUrl || matchState === types.MatchState.MatchPaths || childIsActive;
    }
    function normalizePathname(pathname) {
      let barePathname = pathname.split("?")[0].split("#")[0];
      return barePathname.endsWith("/") ? barePathname : `${barePathname}/`;
    }
    function safeEqual(location, path) {
      return normalizePathname(location) === normalizePathname(path);
    }
    function safeStartsWith(location, path) {
      return normalizePathname(location).startsWith(normalizePathname(path));
    }
    function matchStateForItem({
      url,
      matches,
      exactMatch,
      matchPaths,
      excludePaths
    }, location) {
      return url == null ? types.MatchState.NoMatch : matches ? types.MatchState.MatchForced : matches === !1 || excludePaths && excludePaths.some((path) => safeStartsWith(location, path)) ? types.MatchState.Excluded : matchPaths && matchPaths.some((path) => safeStartsWith(location, path)) ? types.MatchState.MatchPaths : (exactMatch ? safeEqual(location, url) : safeStartsWith(location, url)) ? types.MatchState.MatchUrl : types.MatchState.NoMatch;
    }
    function normalizeAriaAttributes(controlId, hasSubMenu, expanded) {
      return hasSubMenu ? {
        "aria-expanded": expanded,
        "aria-controls": controlId
      } : void 0;
    }
    exports.Item = Item;
    exports.ItemSecondaryAction = ItemSecondaryAction;
    exports.MAX_SECONDARY_ACTIONS = MAX_SECONDARY_ACTIONS;
    exports.isNavigationItemActive = isNavigationItemActive;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Section/Section.js
var require_Section7 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/components/Section/Section.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useToggle = require_use_toggle(), Navigation_module = require_Navigation_scss(), Item = require_Item10(), hooks = require_hooks11(), Icon = require_Icon(), Tooltip = require_Tooltip(), Text2 = require_Text(), Collapsible = require_Collapsible();
    function Section({
      title,
      fill,
      action,
      items,
      rollup,
      separator
    }) {
      let {
        value: expanded,
        toggle: toggleExpanded,
        setFalse: setExpandedFalse
      } = useToggle.useToggle(!1), animationFrame = React2.useRef(null), {
        isNavigationCollapsed
      } = hooks.useMediaQuery(), [expandedIndex, setExpandedIndex] = React2.useState(), handleClick = (onClick, hasSubNavItems) => () => {
        onClick && onClick(), animationFrame.current && cancelAnimationFrame(animationFrame.current), (!hasSubNavItems || !isNavigationCollapsed) && (animationFrame.current = requestAnimationFrame(setExpandedFalse));
      };
      React2.useEffect(() => () => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current);
      });
      let className = css.classNames(Navigation_module.default.Section, separator && Navigation_module.default["Section-withSeparator"], fill && Navigation_module.default["Section-fill"]), buttonMarkup = action && /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: Navigation_module.default.Action,
        "aria-label": action.accessibilityLabel,
        onClick: action.onClick
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: action.icon
      })), actionMarkup = action && (action.tooltip ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, action.tooltip, buttonMarkup) : buttonMarkup), sectionHeadingMarkup = title && /* @__PURE__ */ React2.createElement("li", {
        className: Navigation_module.default.SectionHeading
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium",
        tone: "subdued"
      }, title), actionMarkup), itemsMarkup = items.map((item, index) => {
        let {
          onClick,
          label,
          subNavigationItems,
          ...rest
        } = item, hasSubNavItems = subNavigationItems != null && subNavigationItems.length > 0, handleToggleExpandedState = () => {
          setExpandedIndex(expandedIndex === index ? -1 : index);
        };
        return /* @__PURE__ */ React2.createElement(Item.Item, Object.assign({
          key: label
        }, rest, {
          label,
          subNavigationItems,
          onClick: handleClick(onClick, hasSubNavItems),
          onToggleExpandedState: handleToggleExpandedState,
          expanded: expandedIndex === index
        }));
      }), toggleClassName = css.classNames(Navigation_module.default.Item, Navigation_module.default.RollupToggle), ariaLabel = rollup && (expanded ? rollup.hide : rollup.view), toggleRollup = rollup && items.length > rollup.after && /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ListItem,
        key: "List Item"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemWrapper
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ItemInnerWrapper
      }, /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: toggleClassName,
        onClick: toggleExpanded,
        "aria-label": ariaLabel
      }, /* @__PURE__ */ React2.createElement("span", {
        className: Navigation_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.MenuHorizontalIcon
      })))))), activeItemIndex = items.findIndex((item) => rollup ? rollup.activePath === item.url || item.url && rollup.activePath.startsWith(item.url) || (item.subNavigationItems ? item.subNavigationItems.some(({
        url: itemUrl
      }) => rollup.activePath.startsWith(itemUrl)) : !1) : !1), sectionItems = rollup ? itemsMarkup.slice(0, rollup.after) : itemsMarkup, additionalItems = rollup ? itemsMarkup.slice(rollup.after) : [];
      rollup && activeItemIndex !== -1 && activeItemIndex > rollup.after - 1 && sectionItems.push(...additionalItems.splice(activeItemIndex - rollup.after, 1));
      let additionalItemsId = React2.useId(), activeItemsMarkup = rollup && additionalItems.length > 0 && /* @__PURE__ */ React2.createElement("li", {
        className: Navigation_module.default.RollupSection
      }, /* @__PURE__ */ React2.createElement(Collapsible.Collapsible, {
        id: additionalItemsId,
        open: expanded
      }, /* @__PURE__ */ React2.createElement("ul", {
        className: Navigation_module.default.List
      }, additionalItems)), toggleRollup);
      return /* @__PURE__ */ React2.createElement("ul", {
        className
      }, sectionHeadingMarkup, sectionItems, activeItemsMarkup);
    }
    exports.Section = Section;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.js
var require_Navigation2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Navigation/Navigation.js"(exports) {
    "use strict";
    var React2 = require("react"), withinContentContext = require_within_content_context(), css = require_css(), getWidth = require_get_width(), context = require_context20(), Navigation_module = require_Navigation_scss(), Section = require_Section7(), hooks = require_hooks9(), UnstyledLink = require_UnstyledLink(), Image = require_Image(), Scrollable = require_Scrollable(), Item = require_Item10(), Navigation = function({
      children,
      contextControl,
      location,
      onDismiss,
      ariaLabelledBy,
      logoSuffix
    }) {
      let {
        logo
      } = hooks.useFrame(), width = getWidth.getWidth(logo, 104), logoMarkup = logo ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Navigation_module.default.LogoContainer, logoSuffix && Navigation_module.default.hasLogoSuffix)
      }, /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
        url: logo.url || "",
        className: Navigation_module.default.LogoLink,
        style: {
          width
        }
      }, /* @__PURE__ */ React2.createElement(Image.Image, {
        source: logo.topBarSource || "",
        alt: logo.accessibilityLabel || "",
        className: Navigation_module.default.Logo,
        style: {
          width
        }
      })), logoSuffix) : null, mediaMarkup = contextControl ? /* @__PURE__ */ React2.createElement("div", {
        className: Navigation_module.default.ContextControl
      }, contextControl) : logoMarkup, context$1 = React2.useMemo(() => ({
        location,
        onNavigationDismiss: onDismiss
      }), [location, onDismiss]);
      return /* @__PURE__ */ React2.createElement(context.NavigationContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement(withinContentContext.WithinContentContext.Provider, {
        value: !0
      }, /* @__PURE__ */ React2.createElement("nav", {
        className: Navigation_module.default.Navigation,
        "aria-labelledby": ariaLabelledBy
      }, mediaMarkup, /* @__PURE__ */ React2.createElement(Scrollable.Scrollable, {
        className: Navigation_module.default.PrimaryNavigation
      }, children))));
    };
    Navigation.Item = Item.Item;
    Navigation.Section = Section.Section;
    exports.Navigation = Navigation;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/arrays.js
var require_arrays = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/arrays.js"(exports) {
    "use strict";
    function arraysAreEqual(firstArray, secondArray, comparator) {
      return firstArray.length !== secondArray.length ? !1 : firstArray.every((firstItem, index) => {
        let secondItem = secondArray[index];
        return comparator != null ? comparator(firstItem, secondItem) : firstItem === secondItem;
      });
    }
    exports.arraysAreEqual = arraysAreEqual;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.scss.js
var require_Option_scss2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Option: "Polaris-OptionList-Option",
      SingleSelectOption: "Polaris-OptionList-Option__SingleSelectOption",
      focused: "Polaris-OptionList-Option--focused",
      active: "Polaris-OptionList-Option--active",
      disabled: "Polaris-OptionList-Option--disabled",
      select: "Polaris-OptionList-Option--select",
      Media: "Polaris-OptionList-Option__Media",
      Label: "Polaris-OptionList-Option__Label",
      MultiSelectOption: "Polaris-OptionList-Option__MultiSelectOption",
      CheckboxLabel: "Polaris-OptionList-Option__CheckboxLabel",
      verticalAlignTop: "Polaris-OptionList-Option--verticalAlignTop",
      verticalAlignCenter: "Polaris-OptionList-Option--verticalAlignCenter",
      verticalAlignBottom: "Polaris-OptionList-Option--verticalAlignBottom",
      Icon: "Polaris-OptionList-Option__Icon",
      Checkbox: "Polaris-OptionList-Option__Checkbox"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.js
var require_Option2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/components/Option/Option.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), useToggle = require_use_toggle(), css = require_css(), Option_module = require_Option_scss2(), Checkbox = require_Checkbox(), InlineStack = require_InlineStack(), Icon = require_Icon(), Scrollable = require_Scrollable();
    function Option({
      label,
      value,
      id,
      select,
      active,
      allowMultiple,
      disabled,
      media,
      onClick,
      section,
      index,
      verticalAlign,
      onPointerEnter,
      onFocus
    }) {
      let {
        value: focused,
        toggle: toggleFocused
      } = useToggle.useToggle(!1), handleClick = React2.useCallback(() => {
        disabled || onClick(section, index);
      }, [disabled, index, onClick, section]), handlePointerEnter = React2.useCallback(() => {
        disabled || onPointerEnter(section, index);
      }, [disabled, onPointerEnter, section, index]), handleFocus = React2.useCallback(() => {
        toggleFocused(), onFocus(section, index);
      }, [toggleFocused, onFocus, section, index]), mediaMarkup = media ? /* @__PURE__ */ React2.createElement("div", {
        className: Option_module.default.Media
      }, media) : null, singleSelectClassName = css.classNames(Option_module.default.SingleSelectOption, focused && Option_module.default.focused, disabled && Option_module.default.disabled, select && Option_module.default.select, active && Option_module.default.active, verticalAlign && Option_module.default[css.variationName("verticalAlign", verticalAlign)]), multiSelectClassName = css.classNames(Option_module.default.Label, disabled && Option_module.default.disabled, active && Option_module.default.active, select && Option_module.default.select, verticalAlign && Option_module.default[css.variationName("verticalAlign", verticalAlign)], allowMultiple && Option_module.default.CheckboxLabel, allowMultiple && Option_module.default.MultiSelectOption), optionMarkup = allowMultiple ? /* @__PURE__ */ React2.createElement("label", {
        htmlFor: id,
        className: multiSelectClassName
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Option_module.default.Checkbox
      }, /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
        id,
        label: "",
        ariaDescribedBy: `${id}-label`,
        value,
        checked: select,
        disabled,
        onChange: handleClick
      })), mediaMarkup, /* @__PURE__ */ React2.createElement("span", {
        id: `${id}-label`
      }, label)) : /* @__PURE__ */ React2.createElement("button", {
        id,
        type: "button",
        className: singleSelectClassName,
        onClick: handleClick,
        disabled,
        onFocus: handleFocus,
        onBlur: toggleFocused,
        "aria-pressed": active || select
      }, /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        wrap: !1,
        blockAlign: verticalAlignToBlockAlign(verticalAlign)
      }, mediaMarkup, label), (select || active) && /* @__PURE__ */ React2.createElement("span", {
        className: Option_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.CheckIcon
      })))), scrollMarkup = active ? /* @__PURE__ */ React2.createElement(Scrollable.Scrollable.ScrollTo, null) : null;
      return /* @__PURE__ */ React2.createElement("li", {
        key: id,
        className: Option_module.default.Option,
        tabIndex: -1,
        onPointerEnter: handlePointerEnter
      }, scrollMarkup, optionMarkup);
    }
    function verticalAlignToBlockAlign(verticalAlign) {
      switch (verticalAlign) {
        case "top":
          return "start";
        case "center":
          return "center";
        case "bottom":
          return "end";
        default:
          return "start";
      }
    }
    exports.Option = Option;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/OptionList/OptionList.js
var require_OptionList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/OptionList/OptionList.js"(exports) {
    "use strict";
    var React2 = require("react"), options = require_options(), arrays = require_arrays(), useDeepEffect = require_use_deep_effect(), Option = require_Option2(), Box = require_Box(), BlockStack2 = require_BlockStack(), Text2 = require_Text();
    function OptionList({
      options: options2,
      sections,
      title,
      selected,
      allowMultiple,
      role,
      verticalAlign,
      onChange,
      id: idProp,
      onPointerEnterOption,
      onFocusOption
    }) {
      let [normalizedOptions, setNormalizedOptions] = React2.useState(createNormalizedOptions(options2, sections, title)), uniqId = React2.useId(), id = idProp ?? uniqId;
      useDeepEffect.useDeepEffect(() => {
        setNormalizedOptions(createNormalizedOptions(options2 || [], sections || [], title));
      }, [options2, sections, title], optionArraysAreEqual);
      let handleClick = React2.useCallback((sectionIndex, optionIndex) => {
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value, foundIndex = selected.indexOf(selectedValue);
        if (allowMultiple) {
          let newSelection = foundIndex === -1 ? [selectedValue, ...selected] : [...selected.slice(0, foundIndex), ...selected.slice(foundIndex + 1, selected.length)];
          onChange(newSelection);
          return;
        }
        onChange([selectedValue]);
      }, [normalizedOptions, selected, allowMultiple, onChange]), handlePointerEnter = React2.useCallback((sectionIndex, optionIndex) => {
        if (!onPointerEnterOption)
          return;
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
        onPointerEnterOption(selectedValue);
      }, [normalizedOptions, onPointerEnterOption]), handleFocus = React2.useCallback((sectionIndex, optionIndex) => {
        if (!onFocusOption)
          return;
        let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
        onFocusOption(selectedValue);
      }, [normalizedOptions, onFocusOption]), optionsMarkup = normalizedOptions.length > 0 ? normalizedOptions.map(({
        title: title2,
        options: options3
      }, sectionIndex) => {
        let isFirstOption = sectionIndex === 0, titleLevel = isFirstOption ? "h2" : "h3", titleMarkup = title2 ? /* @__PURE__ */ React2.createElement(Box.Box, {
          paddingBlockStart: isFirstOption ? "050" : "300",
          paddingInlineStart: "150",
          paddingBlockEnd: "100",
          paddingInlineEnd: "150",
          borderColor: "border-secondary"
        }, /* @__PURE__ */ React2.createElement(Text2.Text, {
          as: titleLevel,
          variant: "headingSm"
        }, title2)) : null, optionsMarkup2 = options3 && options3.map((option2, optionIndex) => {
          let isSelected = selected.includes(option2.value), optionId = option2.id || `${id}-${sectionIndex}-${optionIndex}`;
          return /* @__PURE__ */ React2.createElement(Option.Option, Object.assign({
            key: optionId
          }, option2, {
            id: optionId,
            section: sectionIndex,
            index: optionIndex,
            onClick: handleClick,
            select: isSelected,
            allowMultiple,
            verticalAlign,
            onPointerEnter: handlePointerEnter,
            onFocus: handleFocus
          }));
        }), option = /* @__PURE__ */ React2.createElement(Box.Box, {
          as: "ul",
          id: `${id}-${sectionIndex}`,
          role
        }, optionsMarkup2), blockStartPadding = isFirstOption ? title2 ? "100" : "0" : title2 ? "050" : "0";
        return /* @__PURE__ */ React2.createElement(Box.Box, {
          key: title2 || `noTitle-${sectionIndex}`,
          as: "li",
          paddingBlockStart: blockStartPadding
        }, /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
          gap: isFirstOption && sections ? void 0 : "0"
        }, titleMarkup, option));
      }) : null;
      return /* @__PURE__ */ React2.createElement(Box.Box, {
        as: "ul",
        role,
        padding: "150"
      }, optionsMarkup);
    }
    function createNormalizedOptions(options2, sections, title) {
      if (options2 == null) {
        let section = {
          options: [],
          title
        };
        return sections == null ? [] : [section, ...sections];
      }
      return sections == null ? [{
        title,
        options: options2
      }] : [{
        title,
        options: options2
      }, ...sections];
    }
    function optionArraysAreEqual(firstArray, secondArray) {
      return options.isSection(firstArray) && options.isSection(secondArray) ? arrays.arraysAreEqual(firstArray, secondArray, testSectionsPropEquality) : arrays.arraysAreEqual(firstArray, secondArray);
    }
    function testSectionsPropEquality(previousSection, currentSection) {
      let {
        options: previousOptions
      } = previousSection, {
        options: currentOptions
      } = currentSection, optionsAreEqual = arrays.arraysAreEqual(previousOptions, currentOptions), titlesAreEqual = previousSection.title === currentSection.title;
      return optionsAreEqual && titlesAreEqual;
    }
    exports.OptionList = OptionList;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-interface.js
var require_is_interface = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-interface.js"(exports) {
    "use strict";
    var React2 = require("react");
    function isInterface(x) {
      return !/* @__PURE__ */ React2.isValidElement(x) && x !== void 0;
    }
    exports.isInterface = isInterface;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/is-react-element.js
var require_is_react_element = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/is-react-element.js"(exports) {
    "use strict";
    var React2 = require("react");
    function isReactElement(x) {
      return /* @__PURE__ */ React2.isValidElement(x) && x !== void 0;
    }
    exports.isReactElement = isReactElement;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/Page.scss.js
var require_Page_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/Page.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Page: "Polaris-Page",
      fullWidth: "Polaris-Page--fullWidth",
      narrowWidth: "Polaris-Page--narrowWidth",
      Content: "Polaris-Page__Content"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.scss.js
var require_Header_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TitleWrapper: "Polaris-Page-Header__TitleWrapper",
      BreadcrumbWrapper: "Polaris-Page-Header__BreadcrumbWrapper",
      PaginationWrapper: "Polaris-Page-Header__PaginationWrapper",
      PrimaryActionWrapper: "Polaris-Page-Header__PrimaryActionWrapper",
      Row: "Polaris-Page-Header__Row",
      mobileView: "Polaris-Page-Header--mobileView",
      RightAlign: "Polaris-Page-Header__RightAlign",
      noBreadcrumbs: "Polaris-Page-Header--noBreadcrumbs",
      AdditionalMetaData: "Polaris-Page-Header__AdditionalMetaData",
      Actions: "Polaris-Page-Header__Actions",
      longTitle: "Polaris-Page-Header--longTitle",
      mediumTitle: "Polaris-Page-Header--mediumTitle",
      isSingleRow: "Polaris-Page-Header--isSingleRow"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.scss.js
var require_Title_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Title: "Polaris-Header-Title",
      TitleWithSubtitle: "Polaris-Header-Title__TitleWithSubtitle",
      TitleWrapper: "Polaris-Header-Title__TitleWrapper",
      SubTitle: "Polaris-Header-Title__SubTitle",
      SubtitleCompact: "Polaris-Header-Title__SubtitleCompact"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.js
var require_Title = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/components/Title/Title.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Title_module = require_Title_scss(), Text2 = require_Text(), Bleed = require_Bleed();
    function Title({
      title,
      subtitle,
      titleMetadata,
      compactTitle
    }) {
      let className = css.classNames(Title_module.default.Title, subtitle && Title_module.default.TitleWithSubtitle), titleMarkup = title ? /* @__PURE__ */ React2.createElement("h1", {
        className
      }, title) : null, titleMetadataMarkup = titleMetadata ? /* @__PURE__ */ React2.createElement(Bleed.Bleed, {
        marginBlock: "100"
      }, titleMetadata) : null, wrappedTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Title_module.default.TitleWrapper
      }, titleMarkup, titleMetadataMarkup), subtitleMarkup = subtitle ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Title_module.default.SubTitle, compactTitle && Title_module.default.SubtitleCompact)
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "p",
        variant: "bodySm"
      }, subtitle)) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, wrappedTitleMarkup, subtitleMarkup);
    }
    exports.Title = Title;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.js
var require_Header4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/components/Header/Header.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), components = require_components(), isInterface = require_is_interface(), isReactElement = require_is_react_element(), Header_module = require_Header_scss(), Breadcrumbs = require_Breadcrumbs(), Title = require_Title(), ActionMenu = require_ActionMenu(), FilterActionsProvider = require_FilterActionsProvider(), hooks = require_hooks2(), hooks$1 = require_hooks11(), Box = require_Box(), Pagination = require_Pagination(), Text2 = require_Text(), InlineStack = require_InlineStack(), utils = require_utils(), Tooltip = require_Tooltip(), SHORT_TITLE = 20, REALLY_SHORT_TITLE = 8, LONG_TITLE = 34;
    function Header({
      title,
      subtitle,
      pageReadyAccessibilityLabel,
      titleMetadata,
      additionalMetadata,
      titleHidden = !1,
      primaryAction,
      pagination,
      filterActions,
      backAction,
      secondaryActions = [],
      actionGroups = [],
      compactTitle = !1,
      onActionRollup
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), isSingleRow = !primaryAction && !pagination && (isInterface.isInterface(secondaryActions) && !secondaryActions.length || isReactElement.isReactElement(secondaryActions)) && !actionGroups.length, breadcrumbMarkup = backAction ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.BreadcrumbWrapper
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        maxWidth: "100%",
        paddingInlineEnd: "100",
        printHidden: !0
      }, /* @__PURE__ */ React2.createElement(Breadcrumbs.Breadcrumbs, {
        backAction
      }))) : null, paginationMarkup = pagination && !isNavigationCollapsed ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.PaginationWrapper
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        printHidden: !0
      }, /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({}, pagination, {
        hasPrevious: pagination.hasPrevious,
        hasNext: pagination.hasNext
      })))) : null, pageTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.TitleWrapper
      }, /* @__PURE__ */ React2.createElement(Title.Title, {
        title,
        subtitle,
        titleMetadata,
        compactTitle
      })), labelForPageReadyAccessibilityLabel = pageReadyAccessibilityLabel || title, pageReadyAccessibilityLabelMarkup = labelForPageReadyAccessibilityLabel ? /* @__PURE__ */ React2.createElement("div", {
        role: "status"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        visuallyHidden: !0,
        as: "p"
      }, i18n.translate("Polaris.Page.Header.pageReadyAccessibilityLabel", {
        title: labelForPageReadyAccessibilityLabel
      }))) : void 0, primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement(PrimaryActionMarkup, {
        primaryAction
      }) : null, actionMenuMarkup = null;
      isInterface.isInterface(secondaryActions) && (secondaryActions.length > 0 || ActionMenu.hasGroupsWithActions(actionGroups)) ? actionMenuMarkup = /* @__PURE__ */ React2.createElement(ActionMenu.ActionMenu, {
        actions: secondaryActions,
        groups: actionGroups,
        rollup: isNavigationCollapsed,
        rollupActionsLabel: title ? i18n.translate("Polaris.Page.Header.rollupActionsLabel", {
          title
        }) : void 0,
        onActionRollup
      }) : isReactElement.isReactElement(secondaryActions) && (actionMenuMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActions));
      let navigationMarkup = breadcrumbMarkup || paginationMarkup ? /* @__PURE__ */ React2.createElement(Box.Box, {
        printHidden: !0,
        paddingBlockEnd: "100",
        paddingInlineEnd: actionMenuMarkup && isNavigationCollapsed ? "1000" : void 0
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400",
        align: "space-between",
        blockAlign: "center"
      }, breadcrumbMarkup, paginationMarkup)) : null, additionalMetadataMarkup = additionalMetadata ? /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.AdditionalMetaData
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        tone: "subdued",
        as: "span",
        variant: "bodySm"
      }, additionalMetadata)) : null, headerClassNames = css.classNames(isSingleRow && Header_module.default.isSingleRow, navigationMarkup && Header_module.default.hasNavigation, actionMenuMarkup && Header_module.default.hasActionMenu, isNavigationCollapsed && Header_module.default.mobileView, !backAction && Header_module.default.noBreadcrumbs, title && title.length < LONG_TITLE && Header_module.default.mediumTitle, title && title.length > LONG_TITLE && Header_module.default.longTitle), {
        slot1,
        slot2,
        slot3,
        slot4,
        slot5
      } = determineLayout({
        actionMenuMarkup,
        additionalMetadataMarkup,
        breadcrumbMarkup,
        isNavigationCollapsed,
        pageTitleMarkup,
        paginationMarkup,
        primaryActionMarkup,
        title
      });
      return /* @__PURE__ */ React2.createElement(Box.Box, {
        position: "relative",
        paddingBlockStart: {
          xs: "400",
          md: "600"
        },
        paddingBlockEnd: {
          xs: "400",
          md: "600"
        },
        paddingInlineStart: {
          xs: "400",
          sm: "0"
        },
        paddingInlineEnd: {
          xs: "400",
          sm: "0"
        },
        visuallyHidden: titleHidden
      }, pageReadyAccessibilityLabelMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: headerClassNames
      }, /* @__PURE__ */ React2.createElement(FilterActionsProvider.FilterActionsProvider, {
        filterActions: Boolean(filterActions)
      }, /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot1, slot2, slot3, slot4].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.Row
      }, slot1, slot2, /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot3, slot4].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.RightAlign
      }, /* @__PURE__ */ React2.createElement(components.ConditionalWrapper, {
        condition: [slot3, slot4].every(notNull),
        wrapper: (children) => /* @__PURE__ */ React2.createElement("div", {
          className: Header_module.default.Actions
        }, children)
      }, slot3, slot4))))), /* @__PURE__ */ React2.createElement(components.ConditionalRender, {
        condition: [slot5].some(notNull)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.Row
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400"
      }, slot5))))));
    }
    function PrimaryActionMarkup({
      primaryAction
    }) {
      let {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), actionMarkup;
      if (isInterface.isInterface(primaryAction)) {
        let {
          primary: isPrimary,
          helpText
        } = primaryAction, primary = isPrimary === void 0 ? !0 : isPrimary, content = utils.buttonFrom(shouldShowIconOnly(isNavigationCollapsed, primaryAction), {
          variant: primary ? "primary" : void 0
        });
        actionMarkup = helpText ? /* @__PURE__ */ React2.createElement(Tooltip.Tooltip, {
          content: helpText
        }, content) : content;
      } else
        actionMarkup = primaryAction;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Header_module.default.PrimaryActionWrapper
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        printHidden: !0
      }, actionMarkup));
    }
    function shouldShowIconOnly(isMobile, action) {
      let {
        content,
        accessibilityLabel,
        icon
      } = action;
      return icon == null ? {
        ...action,
        icon: void 0
      } : (isMobile ? (accessibilityLabel = accessibilityLabel || content, content = void 0) : icon = void 0, {
        ...action,
        content,
        accessibilityLabel,
        icon
      });
    }
    function notNull(value) {
      return value != null;
    }
    function determineLayout({
      actionMenuMarkup,
      additionalMetadataMarkup,
      breadcrumbMarkup,
      isNavigationCollapsed,
      pageTitleMarkup,
      paginationMarkup,
      primaryActionMarkup,
      title
    }) {
      let layouts = {
        mobileCompact: {
          slots: {
            slot1: null,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: isNavigationCollapsed && breadcrumbMarkup == null && title != null && title.length <= REALLY_SHORT_TITLE
        },
        mobileDefault: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: isNavigationCollapsed
        },
        desktopCompact: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: actionMenuMarkup,
            slot4: primaryActionMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: !isNavigationCollapsed && paginationMarkup == null && actionMenuMarkup == null && title != null && title.length <= SHORT_TITLE
        },
        desktopDefault: {
          slots: {
            slot1: breadcrumbMarkup,
            slot2: pageTitleMarkup,
            slot3: /* @__PURE__ */ React2.createElement(React2.Fragment, null, actionMenuMarkup, primaryActionMarkup),
            slot4: paginationMarkup,
            slot5: additionalMetadataMarkup
          },
          condition: !isNavigationCollapsed
        }
      };
      return (Object.values(layouts).find((layout2) => layout2.condition) || layouts.desktopDefault).slots;
    }
    exports.Header = Header;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Page/Page.js
var require_Page = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Page/Page.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), isInterface = require_is_interface(), isReactElement = require_is_react_element(), Page_module = require_Page_scss(), Header = require_Header4();
    function Page2({
      children,
      fullWidth,
      narrowWidth,
      ...rest
    }) {
      let pageClassName = css.classNames(Page_module.default.Page, fullWidth && Page_module.default.fullWidth, narrowWidth && Page_module.default.narrowWidth), hasHeaderContent = rest.title != null && rest.title !== "" || rest.subtitle != null && rest.subtitle !== "" || rest.primaryAction != null || rest.secondaryActions != null && (isInterface.isInterface(rest.secondaryActions) && rest.secondaryActions.length > 0 || isReactElement.isReactElement(rest.secondaryActions)) || rest.actionGroups != null && rest.actionGroups.length > 0 || rest.backAction != null, contentClassName = css.classNames(!hasHeaderContent && Page_module.default.Content), headerMarkup = hasHeaderContent ? /* @__PURE__ */ React2.createElement(Header.Header, Object.assign({
        filterActions: !0
      }, rest)) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: pageClassName
      }, headerMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: contentClassName
      }, children));
    }
    exports.Page = Page2;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.scss.js
var require_PageActions_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      PageActions: "Polaris-PageActions"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.js
var require_PageActions = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PageActions/PageActions.js"(exports) {
    "use strict";
    var React2 = require("react"), isInterface = require_is_interface(), isReactElement = require_is_react_element(), PageActions_module = require_PageActions_scss(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), LegacyStack = require_LegacyStack();
    function PageActions({
      primaryAction,
      secondaryActions
    }) {
      let primaryActionMarkup = null;
      isReactElement.isReactElement(primaryAction) ? primaryActionMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, primaryAction) : primaryAction && (primaryActionMarkup = utils.buttonsFrom(primaryAction, {
        variant: "primary"
      }));
      let secondaryActionsMarkup = null;
      return isInterface.isInterface(secondaryActions) && secondaryActions.length > 0 ? secondaryActionsMarkup = /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(secondaryActions)) : isReactElement.isReactElement(secondaryActions) && (secondaryActionsMarkup = /* @__PURE__ */ React2.createElement(React2.Fragment, null, secondaryActions)), /* @__PURE__ */ React2.createElement("div", {
        className: PageActions_module.default.PageActions
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        distribution: "trailing",
        spacing: "tight"
      }, secondaryActionsMarkup, primaryActionMarkup));
    }
    exports.PageActions = PageActions;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/PolarisTestProvider/PolarisTestProvider.js
var require_PolarisTestProvider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/PolarisTestProvider/PolarisTestProvider.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisTokens = require("@shopify/polaris-tokens"), merge = require_merge(), useTheme = require_use_theme(), I18n = require_I18n(), scrollLockManager = require_scroll_lock_manager(), stickyManager = require_sticky_manager(), context = require_context(), context$1 = require_context2(), context$2 = require_context3(), context$3 = require_context4(), context$4 = require_context5(), context$5 = require_context6(), PortalsManager = require_PortalsManager(), FocusManager = require_FocusManager(), EphemeralPresenceManager = require_EphemeralPresenceManager(), context$6 = require_context15(), defaultMediaQuery = {
      isNavigationCollapsed: !1
    };
    function PolarisTestProvider({
      strict,
      children,
      i18n,
      link,
      mediaQuery,
      features,
      frame,
      theme = polarisTokens.themeNameDefault
    }) {
      let Wrapper = strict ? React2.StrictMode : React2.Fragment, intl = React2.useMemo(() => new I18n.I18n(i18n || {}), [i18n]), scrollLockManager$1 = React2.useMemo(() => new scrollLockManager.ScrollLockManager(), []), stickyManager$1 = React2.useMemo(() => new stickyManager.StickyManager(), []), mergedFrame = createFrameContext(frame), mergedMediaQuery = merge.merge(defaultMediaQuery, mediaQuery);
      return /* @__PURE__ */ React2.createElement(Wrapper, null, /* @__PURE__ */ React2.createElement(useTheme.ThemeContext.Provider, {
        value: useTheme.getTheme(theme)
      }, /* @__PURE__ */ React2.createElement(context.FeaturesContext.Provider, {
        value: features
      }, /* @__PURE__ */ React2.createElement(context$1.I18nContext.Provider, {
        value: intl
      }, /* @__PURE__ */ React2.createElement(context$2.ScrollLockManagerContext.Provider, {
        value: scrollLockManager$1
      }, /* @__PURE__ */ React2.createElement(context$3.StickyManagerContext.Provider, {
        value: stickyManager$1
      }, /* @__PURE__ */ React2.createElement(context$4.LinkContext.Provider, {
        value: link
      }, /* @__PURE__ */ React2.createElement(context$5.MediaQueryContext.Provider, {
        value: mergedMediaQuery
      }, /* @__PURE__ */ React2.createElement(PortalsManager.PortalsManager, null, /* @__PURE__ */ React2.createElement(FocusManager.FocusManager, null, /* @__PURE__ */ React2.createElement(EphemeralPresenceManager.EphemeralPresenceManager, null, /* @__PURE__ */ React2.createElement(context$6.FrameContext.Provider, {
        value: mergedFrame
      }, children))))))))))));
    }
    function noop() {
    }
    function createFrameContext({
      logo = void 0,
      showToast = noop,
      hideToast = noop,
      toastMessages = [],
      setContextualSaveBar = noop,
      removeContextualSaveBar = noop,
      startLoading = noop,
      stopLoading = noop
    } = {}) {
      return {
        logo,
        showToast,
        hideToast,
        toastMessages,
        setContextualSaveBar,
        removeContextualSaveBar,
        startLoading,
        stopLoading
      };
    }
    exports.PolarisTestProvider = PolarisTestProvider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.scss.js
var require_ProgressBar_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ProgressBar: "Polaris-ProgressBar",
      sizeSmall: "Polaris-ProgressBar--sizeSmall",
      sizeMedium: "Polaris-ProgressBar--sizeMedium",
      sizeLarge: "Polaris-ProgressBar--sizeLarge",
      toneHighlight: "Polaris-ProgressBar--toneHighlight",
      tonePrimary: "Polaris-ProgressBar--tonePrimary",
      toneSuccess: "Polaris-ProgressBar--toneSuccess",
      toneCritical: "Polaris-ProgressBar--toneCritical",
      Indicator: "Polaris-ProgressBar__Indicator",
      IndicatorAppearActive: "Polaris-ProgressBar__IndicatorAppearActive",
      IndicatorAppearDone: "Polaris-ProgressBar__IndicatorAppearDone",
      Progress: "Polaris-ProgressBar__Progress",
      Label: "Polaris-ProgressBar__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.js
var require_ProgressBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ProgressBar/ProgressBar.js"(exports) {
    "use strict";
    var React2 = require("react"), reactTransitionGroup = require("react-transition-group"), css = require_css(), useTheme = require_use_theme(), ProgressBar_module = require_ProgressBar_scss(), hooks = require_hooks2();
    function ProgressBar({
      progress = 0,
      size = "medium",
      tone = "highlight",
      animated: hasAppearAnimation = !0,
      ariaLabelledBy
    }) {
      let theme = useTheme.useTheme(), i18n = hooks.useI18n(), indicatorRef = React2.useRef(null), className = css.classNames(ProgressBar_module.default.ProgressBar, size && ProgressBar_module.default[css.variationName("size", size)], tone && ProgressBar_module.default[css.variationName("tone", tone)]), warningMessage = i18n.translate(progress < 0 ? "Polaris.ProgressBar.negativeWarningMessage" : "Polaris.ProgressBar.exceedWarningMessage", {
        progress
      }), parsedProgress = parseProgress(progress, warningMessage), progressBarDuration = hasAppearAnimation ? theme.motion["motion-duration-500"] : theme.motion["motion-duration-0"];
      return /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("progress", {
        "aria-labelledby": ariaLabelledBy,
        className: ProgressBar_module.default.Progress,
        value: parsedProgress,
        max: "100"
      }), /* @__PURE__ */ React2.createElement(reactTransitionGroup.CSSTransition, {
        in: !0,
        appear: !0,
        timeout: parseInt(progressBarDuration, 10),
        nodeRef: indicatorRef,
        classNames: {
          appearActive: ProgressBar_module.default.IndicatorAppearActive,
          appearDone: ProgressBar_module.default.IndicatorAppearDone
        }
      }, /* @__PURE__ */ React2.createElement("div", {
        ref: indicatorRef,
        className: ProgressBar_module.default.Indicator,
        style: {
          "--pc-progress-bar-duration": progressBarDuration,
          "--pc-progress-bar-percent": parsedProgress / 100
        }
      }, /* @__PURE__ */ React2.createElement("span", {
        className: ProgressBar_module.default.Label
      }, parsedProgress, "%"))));
    }
    function parseProgress(progress, warningMessage) {
      let progressWidth;
      return progress < 0 ? progressWidth = 0 : progress > 100 ? progressWidth = 100 : progressWidth = progress, progressWidth;
    }
    exports.ProgressBar = ProgressBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.scss.js
var require_RangeSlider_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var sharedStyles = {
      RangeSlider: "Polaris-RangeSlider"
    };
    exports.default = sharedStyles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.scss.js
var require_DualThumb_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DualThumb: "Polaris-RangeSlider-DualThumb",
      TrackWrapper: "Polaris-RangeSlider-DualThumb__TrackWrapper",
      disabled: "Polaris-RangeSlider-DualThumb--disabled",
      Track: "Polaris-RangeSlider-DualThumb__Track",
      error: "Polaris-RangeSlider-DualThumb--error",
      "Track--dashed": "Polaris-RangeSlider-DualThumb--trackDashed",
      Thumbs: "Polaris-RangeSlider-DualThumb__Thumbs",
      Prefix: "Polaris-RangeSlider-DualThumb__Prefix",
      Suffix: "Polaris-RangeSlider-DualThumb__Suffix",
      Output: "Polaris-RangeSlider-DualThumb__Output",
      OutputBubble: "Polaris-RangeSlider-DualThumb__OutputBubble"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.js
var require_DualThumb = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/DualThumb/DualThumb.js"(exports) {
    "use strict";
    var React2 = require("react"), debounce = require_debounce(), css = require_css(), types = require_types(), RangeSlider_module = require_RangeSlider_scss(), DualThumb_module = require_DualThumb_scss(), Text2 = require_Text(), Labelled = require_Labelled(), Label = require_Label(), EventListener = require_EventListener(), context = require_context(), Control;
    (function(Control2) {
      Control2[Control2.Lower = 0] = "Lower", Control2[Control2.Upper = 1] = "Upper";
    })(Control || (Control = {}));
    var DualThumb = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          value: sanitizeValue(this.props.value, this.props.min, this.props.max, this.props.step),
          trackWidth: 0,
          trackLeft: 0
        }, this.track = /* @__PURE__ */ React2.createRef(), this.trackWrapper = /* @__PURE__ */ React2.createRef(), this.thumbLower = /* @__PURE__ */ React2.createRef(), this.thumbUpper = /* @__PURE__ */ React2.createRef(), this.setTrackPosition = debounce.debounce(() => {
          if (this.track.current) {
            let {
              width,
              left
            } = this.track.current.getBoundingClientRect(), adjustedTrackWidth = width - 16, adjustedTrackLeft = left + 16 / 2, range = this.props.max - this.props.min, minValuePosition = this.props.min / range * adjustedTrackWidth;
            this.setState({
              trackWidth: adjustedTrackWidth,
              trackLeft: adjustedTrackLeft - minValuePosition
            });
          }
        }, 40, {
          leading: !0,
          trailing: !0,
          maxWait: 40
        }), this.handleMouseDownThumbLower = (event) => {
          event.button !== 0 || this.props.disabled || (registerMouseMoveHandler(this.handleMouseMoveThumbLower), event.stopPropagation());
        }, this.handleMouseMoveThumbLower = (event) => {
          let valueUpper = this.state.value[1];
          this.setValue([this.actualXPosition(event.clientX), valueUpper], Control.Upper);
        }, this.handleTouchStartThumbLower = (event) => {
          this.props.disabled || (registerTouchMoveHandler(this.handleTouchMoveThumbLower), event.stopPropagation());
        }, this.handleTouchMoveThumbLower = (event) => {
          event.preventDefault();
          let valueUpper = this.state.value[1];
          this.setValue([this.actualXPosition(event.touches[0].clientX), valueUpper], Control.Upper);
        }, this.handleMouseDownThumbUpper = (event) => {
          event.button !== 0 || this.props.disabled || (registerMouseMoveHandler(this.handleMouseMoveThumbUpper), event.stopPropagation());
        }, this.handleMouseMoveThumbUpper = (event) => {
          let valueLower = this.state.value[0];
          this.setValue([valueLower, this.actualXPosition(event.clientX)], Control.Lower);
        }, this.handleTouchStartThumbUpper = (event) => {
          this.props.disabled || (registerTouchMoveHandler(this.handleTouchMoveThumbUpper), event.stopPropagation());
        }, this.handleTouchMoveThumbUpper = (event) => {
          event.preventDefault();
          let valueLower = this.state.value[0];
          this.setValue([valueLower, this.actualXPosition(event.touches[0].clientX)], Control.Lower);
        }, this.handleKeypressLower = (event) => {
          if (this.props.disabled)
            return;
          let {
            incrementValueLower,
            decrementValueLower
          } = this, handler = {
            [types.Key.UpArrow]: incrementValueLower,
            [types.Key.RightArrow]: incrementValueLower,
            [types.Key.DownArrow]: decrementValueLower,
            [types.Key.LeftArrow]: decrementValueLower
          }[event.keyCode];
          handler != null && (event.preventDefault(), event.stopPropagation(), handler());
        }, this.handleKeypressUpper = (event) => {
          if (this.props.disabled)
            return;
          let {
            incrementValueUpper,
            decrementValueUpper
          } = this, handler = {
            [types.Key.UpArrow]: incrementValueUpper,
            [types.Key.RightArrow]: incrementValueUpper,
            [types.Key.DownArrow]: decrementValueUpper,
            [types.Key.LeftArrow]: decrementValueUpper
          }[event.keyCode];
          handler != null && (event.preventDefault(), event.stopPropagation(), handler());
        }, this.incrementValueLower = () => {
          this.setValue([this.state.value[0] + this.props.step, this.state.value[1]], Control.Upper);
        }, this.decrementValueLower = () => {
          this.setValue([this.state.value[0] - this.props.step, this.state.value[1]], Control.Upper);
        }, this.incrementValueUpper = () => {
          this.setValue([this.state.value[0], this.state.value[1] + this.props.step], Control.Lower);
        }, this.decrementValueUpper = () => {
          this.setValue([this.state.value[0], this.state.value[1] - this.props.step], Control.Lower);
        }, this.dispatchValue = () => {
          let {
            onChange,
            id
          } = this.props, {
            value
          } = this.state;
          onChange(value, id);
        }, this.setValue = (dirtyValue, control) => {
          let {
            props: {
              min,
              max,
              step
            },
            state: {
              value
            }
          } = this, sanitizedValue = sanitizeValue(dirtyValue, min, max, step, control);
          isTupleEqual(sanitizedValue, value) === !1 && this.setState({
            value: sanitizedValue
          }, this.dispatchValue);
        }, this.handleMouseDownTrack = (event) => {
          if (event.button !== 0 || this.props.disabled)
            return;
          event.preventDefault();
          let clickXPosition = this.actualXPosition(event.clientX), {
            value
          } = this.state, distanceFromLowerThumb = Math.abs(value[0] - clickXPosition), distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
          distanceFromLowerThumb <= distanceFromUpperThumb ? (this.setValue([clickXPosition, value[1]], Control.Upper), registerMouseMoveHandler(this.handleMouseMoveThumbLower), this.thumbLower.current != null && this.thumbLower.current.focus()) : (this.setValue([value[0], clickXPosition], Control.Lower), registerMouseMoveHandler(this.handleMouseMoveThumbUpper), this.thumbUpper.current != null && this.thumbUpper.current.focus());
        }, this.handleTouchStartTrack = (event) => {
          if (this.props.disabled)
            return;
          event.preventDefault();
          let clickXPosition = this.actualXPosition(event.touches[0].clientX), {
            value
          } = this.state, distanceFromLowerThumb = Math.abs(value[0] - clickXPosition), distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
          distanceFromLowerThumb <= distanceFromUpperThumb ? (this.setValue([clickXPosition, value[1]], Control.Upper), registerTouchMoveHandler(this.handleTouchMoveThumbLower), this.thumbLower.current != null && this.thumbLower.current.focus()) : (this.setValue([value[0], clickXPosition], Control.Lower), registerTouchMoveHandler(this.handleTouchMoveThumbUpper), this.thumbUpper.current != null && this.thumbUpper.current.focus());
        }, this.actualXPosition = (dirtyXPosition) => {
          if (this.track.current) {
            let {
              min,
              max
            } = this.props, {
              trackLeft,
              trackWidth
            } = this.state;
            return (dirtyXPosition - trackLeft) / trackWidth * (max - min);
          } else
            return 0;
        };
      }
      static getDerivedStateFromProps(props, state) {
        let {
          min,
          step,
          max,
          value,
          onChange,
          id
        } = props, {
          prevValue
        } = state;
        if (isTupleEqual(prevValue, value))
          return null;
        let sanitizedValue = sanitizeValue(value, min, max, step);
        return isTupleEqual(value, sanitizedValue) || onChange(sanitizedValue, id), {
          prevValue: value,
          value: sanitizedValue
        };
      }
      componentDidMount() {
        this.setTrackPosition(), this.trackWrapper.current != null && this.trackWrapper.current.addEventListener("touchstart", this.handleTouchStartTrack, {
          passive: !1
        });
      }
      componentWillUnmount() {
        this.trackWrapper.current != null && this.trackWrapper.current.removeEventListener("touchstart", this.handleTouchStartTrack);
      }
      render() {
        let {
          id,
          min,
          max,
          prefix,
          suffix,
          disabled,
          output,
          error,
          onFocus,
          onBlur,
          label,
          labelAction,
          labelHidden,
          helpText
        } = this.props, {
          value
        } = this.state, idLower = id, idUpper = `${id}Upper`, describedBy = [];
        error && describedBy.push(`${id}Error`);
        let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, trackWrapperClassName = css.classNames(DualThumb_module.default.TrackWrapper, error && DualThumb_module.default.error, disabled && DualThumb_module.default.disabled), thumbLowerClassName = css.classNames(DualThumb_module.default.Thumbs, DualThumb_module.default.ThumbLower, disabled && DualThumb_module.default.disabled), thumbUpperClassName = css.classNames(DualThumb_module.default.Thumbs, DualThumb_module.default.ThumbUpper, disabled && DualThumb_module.default.disabled), trackWidth = this.state.trackWidth, range = max - min, minValuePosition = min / range * trackWidth, leftPositionThumbLower = value[0] / range * trackWidth - minValuePosition, leftPositionThumbUpper = value[1] / range * trackWidth - minValuePosition, outputLowerClassName = css.classNames(DualThumb_module.default.Output, DualThumb_module.default.OutputLower), outputMarkupLower = !disabled && output ? /* @__PURE__ */ React2.createElement("output", {
          htmlFor: idLower,
          className: outputLowerClassName,
          style: {
            left: `${leftPositionThumbLower}px`
          }
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.OutputBubble
        }, /* @__PURE__ */ React2.createElement(Text2.Text, {
          as: "span",
          variant: "headingSm",
          alignment: "center"
        }, value[0]))) : null, outputUpperClassName = css.classNames(DualThumb_module.default.Output, DualThumb_module.default.OutputUpper), outputMarkupUpper = !disabled && output ? /* @__PURE__ */ React2.createElement("output", {
          htmlFor: idUpper,
          className: outputUpperClassName,
          style: {
            left: `${leftPositionThumbUpper}px`
          }
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.OutputBubble
        }, /* @__PURE__ */ React2.createElement(Text2.Text, {
          as: "span",
          variant: "headingSm",
          alignment: "center"
        }, value[1]))) : null, cssVars = {
          "--pc-range-slider-progress-lower": `${leftPositionThumbLower}px`,
          "--pc-range-slider-progress-upper": `${leftPositionThumbUpper}px`
        }, prefixMarkup = prefix && /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Prefix
        }, prefix), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Suffix
        }, suffix);
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
          id,
          label,
          error,
          action: labelAction,
          labelHidden,
          helpText
        }, /* @__PURE__ */ React2.createElement("div", {
          className: css.classNames(DualThumb_module.default.DualThumb, RangeSlider_module.default.RangeSlider)
        }, prefixMarkup, /* @__PURE__ */ React2.createElement("div", {
          className: trackWrapperClassName,
          onMouseDown: this.handleMouseDownTrack,
          ref: this.trackWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default.Track,
          style: cssVars,
          ref: this.track
        }), /* @__PURE__ */ React2.createElement("div", {
          className: DualThumb_module.default["Track--dashed"]
        }), /* @__PURE__ */ React2.createElement("div", {
          id: idLower,
          className: thumbLowerClassName,
          style: {
            left: `${leftPositionThumbLower}px`
          },
          role: "slider",
          "aria-disabled": disabled,
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-valuenow": value[0],
          "aria-invalid": Boolean(error),
          "aria-describedby": ariaDescribedBy,
          "aria-labelledby": Label.labelID(id),
          onFocus,
          onBlur,
          tabIndex: 0,
          onKeyDown: this.handleKeypressLower,
          onMouseDown: this.handleMouseDownThumbLower,
          onTouchStart: this.handleTouchStartThumbLower,
          ref: this.thumbLower
        }), outputMarkupLower, /* @__PURE__ */ React2.createElement("div", {
          id: idUpper,
          className: thumbUpperClassName,
          style: {
            left: `${leftPositionThumbUpper}px`
          },
          role: "slider",
          "aria-disabled": disabled,
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-valuenow": value[1],
          "aria-invalid": Boolean(error),
          "aria-describedby": ariaDescribedBy,
          "aria-labelledby": Label.labelID(id),
          onFocus,
          onBlur,
          tabIndex: 0,
          onKeyDown: this.handleKeypressUpper,
          onMouseDown: this.handleMouseDownThumbUpper,
          onTouchStart: this.handleTouchStartThumbUpper,
          ref: this.thumbUpper
        }), outputMarkupUpper), suffixMarkup)), /* @__PURE__ */ React2.createElement(EventListener.EventListener, {
          event: "resize",
          handler: this.setTrackPosition
        }));
      }
    };
    DualThumb.contextType = context.FeaturesContext;
    function registerMouseMoveHandler(handler) {
      document.addEventListener("mousemove", handler), document.addEventListener("mouseup", () => {
        document.removeEventListener("mousemove", handler);
      }, {
        once: !0
      });
    }
    function registerTouchMoveHandler(handler) {
      let removeHandler = () => {
        document.removeEventListener("touchmove", handler), document.removeEventListener("touchend", removeHandler), document.removeEventListener("touchcancel", removeHandler);
      };
      document.addEventListener("touchmove", handler, {
        passive: !1
      }), document.addEventListener("touchend", removeHandler, {
        once: !0
      }), document.addEventListener("touchcancel", removeHandler, {
        once: !0
      });
    }
    function sanitizeValue(value, min, max, step, control = Control.Upper) {
      let upperValue = inBoundsUpper(roundedToStep(value[1])), lowerValue = inBoundsLower(roundedToStep(value[0])), maxLowerValue = upperValue - step, minUpperValue = lowerValue + step;
      return control === Control.Upper && lowerValue > maxLowerValue ? lowerValue = maxLowerValue : control === Control.Lower && upperValue < minUpperValue && (upperValue = minUpperValue), [lowerValue, upperValue];
      function inBoundsUpper(value2) {
        let lowerMin = min + step;
        return value2 < lowerMin ? lowerMin : value2 > max ? max : value2;
      }
      function inBoundsLower(value2) {
        let upperMax = max - step;
        return value2 < min ? min : value2 > upperMax ? upperMax : value2;
      }
      function roundedToStep(value2) {
        return Math.round(value2 / step) * step;
      }
    }
    function isTupleEqual(a, b) {
      return a == null || b == null ? !1 : a[0] === b[0] && a[1] === b[1];
    }
    exports.DualThumb = DualThumb;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.scss.js
var require_SingleThumb_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SingleThumb: "Polaris-RangeSlider-SingleThumb",
      disabled: "Polaris-RangeSlider-SingleThumb--disabled",
      InputWrapper: "Polaris-RangeSlider-SingleThumb__InputWrapper",
      Prefix: "Polaris-RangeSlider-SingleThumb__Prefix",
      Suffix: "Polaris-RangeSlider-SingleThumb__Suffix",
      Input: "Polaris-RangeSlider-SingleThumb__Input",
      error: "Polaris-RangeSlider-SingleThumb--error",
      Output: "Polaris-RangeSlider-SingleThumb__Output",
      OutputBubble: "Polaris-RangeSlider-SingleThumb__OutputBubble"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/utilities/invertNumber.js
var require_invertNumber = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/utilities/invertNumber.js"(exports) {
    "use strict";
    function invertNumber(number) {
      return Math.sign(number) === 1 ? -Math.abs(number) : Math.sign(number) === -1 ? Math.abs(number) : 0;
    }
    exports.invertNumber = invertNumber;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.js
var require_SingleThumb = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/components/SingleThumb/SingleThumb.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), clamp = require_clamp(), RangeSlider_module = require_RangeSlider_scss(), SingleThumb_module = require_SingleThumb_scss(), invertNumber = require_invertNumber(), Text2 = require_Text(), Labelled = require_Labelled();
    function SingleThumb(props) {
      let {
        id,
        error,
        helpText,
        value,
        min,
        max,
        disabled,
        output,
        prefix,
        suffix,
        label,
        labelAction,
        labelHidden,
        step,
        onBlur,
        onFocus
      } = props, clampedValue = clamp.clamp(value, min, max), describedBy = [];
      error && describedBy.push(`${id}Error`), helpText && describedBy.push(Labelled.helpTextID(id));
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, sliderProgress = (clampedValue - min) * 100 / (max - min), outputFactor = invertNumber.invertNumber((sliderProgress - 50) / 100), cssVars = {
        "--pc-range-slider-min": min,
        "--pc-range-slider-max": max,
        "--pc-range-slider-current": clampedValue,
        "--pc-range-slider-progress": `${sliderProgress}%`,
        "--pc-range-slider-output-factor": `${outputFactor}`
      }, outputMarkup = !disabled && output && /* @__PURE__ */ React2.createElement("output", {
        htmlFor: id,
        className: SingleThumb_module.default.Output
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.OutputBubble
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        variant: "headingSm",
        alignment: "center"
      }, clampedValue))), prefixMarkup = prefix && /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.Prefix
      }, prefix), suffixMarkup = suffix && /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.Suffix
      }, suffix), className = css.classNames(SingleThumb_module.default.SingleThumb, RangeSlider_module.default.RangeSlider, error && SingleThumb_module.default.error, disabled && SingleThumb_module.default.disabled);
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label,
        error,
        action: labelAction,
        labelHidden,
        helpText
      }, /* @__PURE__ */ React2.createElement("div", {
        className,
        style: cssVars
      }, prefixMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: SingleThumb_module.default.InputWrapper
      }, /* @__PURE__ */ React2.createElement("input", {
        type: "range",
        className: SingleThumb_module.default.Input,
        id,
        name: id,
        min,
        max,
        step,
        value: clampedValue,
        disabled,
        onChange: handleChange,
        onFocus,
        onBlur,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": clampedValue,
        "aria-invalid": Boolean(error),
        "aria-describedby": ariaDescribedBy
      }), outputMarkup), suffixMarkup));
      function handleChange(event) {
        let {
          onChange
        } = props;
        onChange && onChange(parseFloat(event.currentTarget.value), id);
      }
    }
    exports.SingleThumb = SingleThumb;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.js
var require_RangeSlider = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/RangeSlider/RangeSlider.js"(exports) {
    "use strict";
    var React2 = require("react"), DualThumb = require_DualThumb(), SingleThumb = require_SingleThumb();
    function RangeSlider({
      min = 0,
      max = 100,
      step = 1,
      value,
      ...rest
    }) {
      let sharedProps = {
        id: React2.useId(),
        min,
        max,
        step,
        ...rest
      };
      return isDualThumb(value) ? /* @__PURE__ */ React2.createElement(DualThumb.DualThumb, Object.assign({
        value
      }, sharedProps)) : /* @__PURE__ */ React2.createElement(SingleThumb.SingleThumb, Object.assign({
        value
      }, sharedProps));
    }
    function isDualThumb(value) {
      return Array.isArray(value);
    }
    exports.RangeSlider = RangeSlider;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.scss.js
var require_ResourceItem_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ResourceItem: "Polaris-ResourceItem",
      Actions: "Polaris-ResourceItem__Actions",
      ItemWrapper: "Polaris-ResourceItem__ItemWrapper",
      CheckboxWrapper: "Polaris-ResourceItem__CheckboxWrapper",
      focusedInner: "Polaris-ResourceItem--focusedInner",
      focused: "Polaris-ResourceItem--focused",
      selected: "Polaris-ResourceItem--selected",
      Link: "Polaris-ResourceItem__Link",
      Button: "Polaris-ResourceItem__Button",
      selectable: "Polaris-ResourceItem--selectable",
      ListItem: "Polaris-ResourceItem__ListItem",
      hasBulkActions: "Polaris-ResourceItem--hasBulkActions"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/resource-list/types.js
var require_types6 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/resource-list/types.js"(exports) {
    "use strict";
    var SELECT_ALL_ITEMS = "All";
    exports.SELECT_ALL_ITEMS = SELECT_ALL_ITEMS;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.js
var require_ResourceItem = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceItem/ResourceItem.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), isEqual = require("react-fast-compare"), breakpoints = require_breakpoints(), css = require_css(), ResourceItem_module = require_ResourceItem_scss(), types = require_types6(), context = require_context19(), hooks = require_hooks2(), Checkbox = require_Checkbox(), ButtonGroup = require_ButtonGroup(), utils = require_utils(), Popover = require_Popover(), Button2 = require_Button(), ActionList = require_ActionList(), Box = require_Box(), InlineGrid = require_InlineGrid(), InlineStack = require_InlineStack(), UnstyledLink = require_UnstyledLink(), BaseResourceItem = class extends React2.Component {
      constructor(...args) {
        super(...args), this.state = {
          actionsMenuVisible: !1,
          focused: !1,
          focusedInner: !1,
          selected: isSelected(this.props.id, this.props.context.selectedItems)
        }, this.node = null, this.overlayRef = /* @__PURE__ */ React2.createRef(), this.buttonOverlay = /* @__PURE__ */ React2.createRef(), this.setNode = (node) => {
          this.node = node;
        }, this.handleFocus = (event) => {
          event.target === this.buttonOverlay.current || this.node && event.target === this.overlayRef.current ? this.setState({
            focused: !0,
            focusedInner: !1
          }) : this.node && this.node.contains(event.target) && this.setState({
            focused: !0,
            focusedInner: !0
          });
        }, this.handleBlur = ({
          relatedTarget
        }) => {
          this.node && relatedTarget instanceof Element && this.node.contains(relatedTarget) || this.setState({
            focused: !1,
            focusedInner: !1
          });
        }, this.handleMouseOut = () => {
          this.state.focused && this.setState({
            focused: !1,
            focusedInner: !1
          }), this.props.onMouseOut && this.props.onMouseOut();
        }, this.handleLargerSelectionArea = (event) => {
          stopPropagation(event), this.handleSelection(!this.state.selected, event.nativeEvent.shiftKey);
        }, this.handleSelection = (value, shiftKey) => {
          let {
            id,
            sortOrder,
            context: {
              onSelectionChange
            }
          } = this.props;
          id == null || onSelectionChange == null || (this.setState({
            focused: value,
            focusedInner: value
          }), onSelectionChange(value, id, sortOrder, shiftKey));
        }, this.handleClick = (event) => {
          stopPropagation(event);
          let {
            id,
            onClick,
            url,
            context: {
              selectMode
            }
          } = this.props, {
            ctrlKey,
            metaKey
          } = event.nativeEvent, anchor = this.node && this.node.querySelector("a");
          if (selectMode) {
            this.handleLargerSelectionArea(event);
            return;
          }
          if (anchor !== event.target) {
            if (onClick && onClick(id), url && (ctrlKey || metaKey)) {
              window.open(url, "_blank");
              return;
            }
            url && anchor && anchor.click();
          }
        }, this.handleKeyUp = (event) => {
          let {
            onClick = noop,
            context: {
              selectMode
            }
          } = this.props, {
            key
          } = event;
          key === "Enter" && this.props.url && !selectMode && onClick();
        }, this.handleActionsClick = () => {
          this.setState(({
            actionsMenuVisible
          }) => ({
            actionsMenuVisible: !actionsMenuVisible
          }));
        }, this.handleCloseRequest = () => {
          this.setState({
            actionsMenuVisible: !1
          });
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let selected = isSelected(nextProps.id, nextProps.context.selectedItems);
        return prevState.selected === selected ? null : {
          selected
        };
      }
      shouldComponentUpdate(nextProps, nextState) {
        let {
          children: nextChildren,
          context: {
            selectedItems: nextSelectedItems,
            ...restNextContext
          },
          ...restNextProps
        } = nextProps, {
          children,
          context: {
            selectedItems,
            ...restContext
          },
          ...restProps
        } = this.props, nextSelectMode = nextProps.context.selectMode;
        return !isEqual(this.state, nextState) || this.props.context.selectMode !== nextSelectMode || !nextProps.context.selectMode && (!isEqual(restProps, restNextProps) || !isEqual(restContext, restNextContext));
      }
      render() {
        let {
          children,
          url,
          external,
          media,
          shortcutActions,
          ariaControls,
          ariaExpanded,
          persistActions = !1,
          accessibilityLabel,
          name,
          context: {
            selectable,
            selectMode,
            hasBulkActions,
            loading,
            resourceName
          },
          i18n,
          verticalAlignment,
          dataHref,
          breakpoints: breakpoints2,
          onMouseOver
        } = this.props, {
          actionsMenuVisible,
          focused,
          focusedInner,
          selected
        } = this.state, ownedMarkup = null, handleMarkup = null;
        if (selectable) {
          let checkboxAccessibilityLabel = name || accessibilityLabel || i18n.translate("Polaris.Common.checkbox");
          handleMarkup = /* @__PURE__ */ React2.createElement("div", {
            className: ResourceItem_module.default.CheckboxWrapper,
            onClick: stopPropagation,
            onChange: this.handleLargerSelectionArea
          }, /* @__PURE__ */ React2.createElement(UseId, null, (id) => /* @__PURE__ */ React2.createElement(Checkbox.Checkbox, {
            id,
            label: checkboxAccessibilityLabel,
            labelHidden: !0,
            checked: selected,
            disabled: loading,
            bleedInlineStart: "300",
            bleedInlineEnd: "300",
            bleedBlockStart: "300",
            bleedBlockEnd: "300",
            fill: !0,
            labelClassName: ResourceItem_module.default.CheckboxLabel
          })));
        }
        (media || selectable) && (ownedMarkup = /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
          gap: "300",
          blockAlign: media && selectable ? "center" : getAlignment(verticalAlignment)
        }, handleMarkup, media));
        let className = css.classNames(ResourceItem_module.default.ResourceItem, focused && ResourceItem_module.default.focused, selectable && ResourceItem_module.default.selectable, selected && ResourceItem_module.default.selected, selectMode && ResourceItem_module.default.selectMode, persistActions && ResourceItem_module.default.persistActions, focusedInner && ResourceItem_module.default.focusedInner), listItemClassName = css.classNames(ResourceItem_module.default.ListItem, focused && !focusedInner && ResourceItem_module.default.focused, hasBulkActions && ResourceItem_module.default.hasBulkActions, selected && ResourceItem_module.default.selected, selectable && ResourceItem_module.default.selectable), actionsMarkup = null, disclosureMarkup = null;
        if (shortcutActions && !loading)
          if (persistActions) {
            actionsMarkup = breakpoints2?.lgUp ? /* @__PURE__ */ React2.createElement("div", {
              className: ResourceItem_module.default.Actions,
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, null, utils.buttonsFrom(shortcutActions, {
              variant: "tertiary"
            }))) : null;
            let disclosureAccessibilityLabel = name ? i18n.translate("Polaris.ResourceList.Item.actionsDropdownLabel", {
              accessibilityLabel: name
            }) : i18n.translate("Polaris.ResourceList.Item.actionsDropdown");
            disclosureMarkup = !selectMode && breakpoints2?.lgDown ? /* @__PURE__ */ React2.createElement("div", {
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(Popover.Popover, {
              activator: /* @__PURE__ */ React2.createElement(Button2.Button, {
                accessibilityLabel: disclosureAccessibilityLabel,
                onClick: this.handleActionsClick,
                variant: "tertiary",
                icon: polarisIcons.MenuHorizontalIcon
              }),
              onClose: this.handleCloseRequest,
              active: actionsMenuVisible
            }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
              items: shortcutActions
            }))) : null;
          } else
            breakpoints2?.lgUp && (actionsMarkup = /* @__PURE__ */ React2.createElement("div", {
              className: ResourceItem_module.default.Actions,
              onClick: stopPropagation
            }, /* @__PURE__ */ React2.createElement(Box.Box, {
              position: "absolute",
              insetBlockStart: "400",
              insetInlineEnd: "500"
            }, /* @__PURE__ */ React2.createElement(ButtonGroup.ButtonGroup, {
              variant: "segmented"
            }, utils.buttonsFrom(shortcutActions, {
              size: "slim"
            })))));
        let containerMarkup = /* @__PURE__ */ React2.createElement(Box.Box, {
          id: this.props.id,
          position: "relative",
          paddingInlineStart: "300",
          paddingInlineEnd: "300",
          paddingBlockStart: "300",
          paddingBlockEnd: "300",
          zIndex: "var(--pc-resource-item-content-stacking-order)"
        }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
          columns: {
            xs: "1fr auto"
          }
        }, /* @__PURE__ */ React2.createElement(InlineGrid.InlineGrid, {
          columns: {
            xs: media || selectable ? "auto 1fr" : "1fr"
          },
          gap: "300"
        }, ownedMarkup, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
          blockAlign: getAlignment(verticalAlignment)
        }, /* @__PURE__ */ React2.createElement(Box.Box, {
          width: "100%",
          padding: "0"
        }, children))), actionsMarkup, disclosureMarkup)), tabIndex = loading ? -1 : 0, ariaLabel = accessibilityLabel || i18n.translate("Polaris.ResourceList.Item.viewItem", {
          itemName: name || resourceName && resourceName.singular || ""
        }), accessibleMarkup = url ? /* @__PURE__ */ React2.createElement(UseId, null, (id) => /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          "aria-describedby": this.props.id,
          "aria-label": ariaLabel,
          className: ResourceItem_module.default.Link,
          url,
          external,
          tabIndex,
          id,
          ref: this.overlayRef
        })) : /* @__PURE__ */ React2.createElement("button", {
          className: ResourceItem_module.default.Button,
          "aria-label": ariaLabel,
          "aria-controls": ariaControls,
          "aria-expanded": ariaExpanded,
          onClick: this.handleClick,
          tabIndex,
          ref: this.buttonOverlay
        });
        return /* @__PURE__ */ React2.createElement("li", {
          className: listItemClassName,
          "data-href": dataHref
        }, /* @__PURE__ */ React2.createElement("div", {
          className: ResourceItem_module.default.ItemWrapper
        }, /* @__PURE__ */ React2.createElement("div", {
          ref: this.setNode,
          className,
          onClick: this.handleClick,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyUp: this.handleKeyUp,
          onMouseOver,
          onMouseOut: this.handleMouseOut,
          "data-href": url
        }, accessibleMarkup, containerMarkup)));
      }
      // This fires onClick when there is a URL on the item
    };
    function noop() {
    }
    function stopPropagation(event) {
      event.stopPropagation();
    }
    function isSelected(id, selectedItems) {
      return Boolean(selectedItems && (Array.isArray(selectedItems) && selectedItems.includes(id) || selectedItems === types.SELECT_ALL_ITEMS));
    }
    function ResourceItem(props) {
      let breakpoints$1 = breakpoints.useBreakpoints();
      return /* @__PURE__ */ React2.createElement(BaseResourceItem, Object.assign({}, props, {
        breakpoints: breakpoints$1,
        context: React2.useContext(context.ResourceListContext),
        i18n: hooks.useI18n()
      }));
    }
    function getAlignment(alignment) {
      switch (alignment) {
        case "leading":
          return "start";
        case "trailing":
          return "end";
        case "center":
          return "center";
        case "fill":
          return "stretch";
        case "baseline":
          return "baseline";
        default:
          return "start";
      }
    }
    function UseId(props) {
      let id = React2.useId();
      return props.children(id);
    }
    exports.ResourceItem = ResourceItem;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.scss.js
var require_ResourceList_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      FiltersWrapper: "Polaris-ResourceList__FiltersWrapper",
      ResourceList: "Polaris-ResourceList",
      HeaderOuterWrapper: "Polaris-ResourceList__HeaderOuterWrapper",
      BulkActionsWrapper: "Polaris-ResourceList__BulkActionsWrapper",
      "HeaderWrapper-disabled": "Polaris-ResourceList__HeaderWrapper--disabled",
      "HeaderWrapper-overlay": "Polaris-ResourceList__HeaderWrapper--overlay",
      HeaderWrapper: "Polaris-ResourceList__HeaderWrapper",
      "HeaderWrapper-isSticky": "Polaris-ResourceList__HeaderWrapper--isSticky",
      HeaderContentWrapper: "Polaris-ResourceList__HeaderContentWrapper",
      "HeaderWrapper-inSelectMode": "Polaris-ResourceList__HeaderWrapper--inSelectMode",
      SortWrapper: "Polaris-ResourceList__SortWrapper",
      AlternateToolWrapper: "Polaris-ResourceList__AlternateToolWrapper",
      "HeaderWrapper-hasSelect": "Polaris-ResourceList__HeaderWrapper--hasSelect",
      "HeaderWrapper-hasAlternateTool": "Polaris-ResourceList__HeaderWrapper--hasAlternateTool",
      "HeaderWrapper-hasSort": "Polaris-ResourceList__HeaderWrapper--hasSort",
      HeaderTitleWrapper: "Polaris-ResourceList__HeaderTitleWrapper",
      BulkActionsWrapperSticky: "Polaris-ResourceList__BulkActionsWrapperSticky",
      SelectAllActionsWrapper: "Polaris-ResourceList__SelectAllActionsWrapper",
      CheckableButtonWrapper: "Polaris-ResourceList__CheckableButtonWrapper",
      SelectButtonWrapper: "Polaris-ResourceList__SelectButtonWrapper",
      EmptySearchResultWrapper: "Polaris-ResourceList__EmptySearchResultWrapper",
      ResourceListWrapper: "Polaris-ResourceList__ResourceListWrapper",
      ResourceListWrapperWithBulkActions: "Polaris-ResourceList__ResourceListWrapperWithBulkActions",
      ItemWrapper: "Polaris-ResourceList__ItemWrapper",
      "ItemWrapper-isLoading": "Polaris-ResourceList__ItemWrapper--isLoading",
      SpinnerContainer: "Polaris-ResourceList__SpinnerContainer",
      LoadingOverlay: "Polaris-ResourceList__LoadingOverlay",
      DisabledPointerEvents: "Polaris-ResourceList__DisabledPointerEvents",
      disableTextSelection: "Polaris-ResourceList--disableTextSelection"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Select/Select.scss.js
var require_Select_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Select/Select.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Select: "Polaris-Select",
      disabled: "Polaris-Select--disabled",
      error: "Polaris-Select--error",
      Backdrop: "Polaris-Select__Backdrop",
      Input: "Polaris-Select__Input",
      Content: "Polaris-Select__Content",
      InlineLabel: "Polaris-Select__InlineLabel",
      Icon: "Polaris-Select__Icon",
      SelectedOption: "Polaris-Select__SelectedOption",
      Prefix: "Polaris-Select__Prefix",
      hover: "Polaris-Select--hover",
      toneMagic: "Polaris-Select--toneMagic"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Select/Select.js
var require_Select = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Select/Select.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), useToggle = require_use_toggle(), Select_module = require_Select_scss(), Icon = require_Icon(), Labelled = require_Labelled(), Box = require_Box(), Text2 = require_Text(), PLACEHOLDER_VALUE = "";
    function Select({
      options: optionsProp,
      label,
      labelAction,
      labelHidden: labelHiddenProp,
      labelInline,
      disabled,
      helpText,
      placeholder,
      id: idProp,
      name,
      value = PLACEHOLDER_VALUE,
      error,
      onChange,
      onFocus,
      onBlur,
      requiredIndicator,
      tone
    }) {
      let {
        value: focused,
        toggle: toggleFocused
      } = useToggle.useToggle(!1), uniqId = React2.useId(), id = idProp ?? uniqId, labelHidden = labelInline ? !0 : labelHiddenProp, className = css.classNames(Select_module.default.Select, error && Select_module.default.error, tone && Select_module.default[css.variationName("tone", tone)], disabled && Select_module.default.disabled), handleFocus = React2.useCallback((event) => {
        toggleFocused(), onFocus?.(event);
      }, [onFocus, toggleFocused]), handleBlur = React2.useCallback((event) => {
        toggleFocused(), onBlur?.(event);
      }, [onBlur, toggleFocused]), handleChange = onChange ? (event) => onChange(event.currentTarget.value, id) : void 0, describedBy = [];
      helpText && describedBy.push(Labelled.helpTextID(id)), error && describedBy.push(`${id}Error`);
      let normalizedOptions = (optionsProp || []).map(normalizeOption);
      placeholder && (normalizedOptions = [{
        label: placeholder,
        value: PLACEHOLDER_VALUE,
        disabled: !0
      }, ...normalizedOptions]);
      let inlineLabelMarkup = labelInline && /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingInlineEnd: "100"
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        tone: tone && tone === "magic" && !focused ? "magic-subdued" : "subdued",
        truncate: !0
      }, label)), selectedOption = getSelectedOption(normalizedOptions, value), prefixMarkup = selectedOption.prefix && /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Prefix
      }, selectedOption.prefix), contentMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Content,
        "aria-hidden": !0,
        "aria-disabled": disabled
      }, inlineLabelMarkup, prefixMarkup, /* @__PURE__ */ React2.createElement("span", {
        className: Select_module.default.SelectedOption
      }, selectedOption.label), /* @__PURE__ */ React2.createElement("span", {
        className: Select_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.SelectIcon
      }))), optionsMarkup = normalizedOptions.map(renderOption);
      return /* @__PURE__ */ React2.createElement(Labelled.Labelled, {
        id,
        label,
        error,
        action: labelAction,
        labelHidden,
        helpText,
        requiredIndicator,
        disabled
      }, /* @__PURE__ */ React2.createElement("div", {
        className
      }, /* @__PURE__ */ React2.createElement("select", {
        id,
        name,
        value,
        className: Select_module.default.Input,
        disabled,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: handleChange,
        "aria-invalid": Boolean(error),
        "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
        "aria-required": requiredIndicator
      }, optionsMarkup), contentMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: Select_module.default.Backdrop
      })));
    }
    function isString(option) {
      return typeof option == "string";
    }
    function isGroup(option) {
      return typeof option == "object" && "options" in option && option.options != null;
    }
    function normalizeStringOption(option) {
      return {
        label: option,
        value: option
      };
    }
    function normalizeOption(option) {
      if (isString(option))
        return normalizeStringOption(option);
      if (isGroup(option)) {
        let {
          title,
          options
        } = option;
        return {
          title,
          options: options.map((option2) => isString(option2) ? normalizeStringOption(option2) : option2)
        };
      }
      return option;
    }
    function getSelectedOption(options, value) {
      let flatOptions = flattenOptions(options), selectedOption = flatOptions.find((option) => value === option.value);
      return selectedOption === void 0 && (selectedOption = flatOptions.find((option) => !option.hidden)), selectedOption || {
        value: "",
        label: ""
      };
    }
    function flattenOptions(options) {
      let flatOptions = [];
      return options.forEach((optionOrGroup) => {
        isGroup(optionOrGroup) ? flatOptions = flatOptions.concat(optionOrGroup.options) : flatOptions.push(optionOrGroup);
      }), flatOptions;
    }
    function renderSingleOption(option) {
      let {
        value,
        label,
        prefix: _prefix,
        key,
        ...rest
      } = option;
      return /* @__PURE__ */ React2.createElement("option", Object.assign({
        key: key ?? value,
        value
      }, rest), label);
    }
    function renderOption(optionOrGroup) {
      if (isGroup(optionOrGroup)) {
        let {
          title,
          options
        } = optionOrGroup;
        return /* @__PURE__ */ React2.createElement("optgroup", {
          label: title,
          key: title
        }, options.map(renderSingleOption));
      }
      return renderSingleOption(optionOrGroup);
    }
    exports.Select = Select;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.js
var require_ResourceList = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/ResourceList/ResourceList.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), polarisTokens = require("@shopify/polaris-tokens"), debounce = require_debounce(), css = require_css(), components = require_components(), useLazyRef = require_use_lazy_ref(), useEventListener = require_use_event_listener(), ResourceList_module = require_ResourceList_scss(), Select = require_Select(), ResourceItem = require_ResourceItem(), types = require_types6(), hooks = require_hooks2(), useIsBulkActionsSticky = require_use_is_bulk_actions_sticky(), SelectAllActions = require_SelectAllActions(), Button2 = require_Button(), CheckableButton = require_CheckableButton(), Sticky = require_Sticky(), EmptySearchResult = require_EmptySearchResult(), Spinner = require_Spinner(), Pagination = require_Pagination(), context = require_context19(), BulkActions = require_BulkActions(), SMALL_SPINNER_HEIGHT = 28, LARGE_SPINNER_HEIGHT = 45;
    function getAllItemsOnPage(items, idForItem) {
      return items.map((item, index) => idForItem(item, index));
    }
    var isBreakpointsXS = () => typeof window > "u" ? !1 : window.innerWidth < parseFloat(polarisTokens.toPx(polarisTokens.themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    function defaultIdForItem(item, index) {
      return Object.prototype.hasOwnProperty.call(item, "id") ? item.id : index.toString();
    }
    function ResourceList({
      items,
      filterControl,
      flushFilters,
      emptyState,
      emptySearchState,
      resourceName: resourceNameProp,
      promotedBulkActions,
      bulkActions,
      selectedItems = [],
      isFiltered,
      selectable,
      hasMoreItems,
      loading,
      headerContent,
      showHeader,
      totalItemsCount,
      sortValue,
      sortOptions,
      alternateTool,
      onSortChange,
      onSelectionChange,
      renderItem,
      idForItem = defaultIdForItem,
      resolveItemId,
      pagination
    }) {
      let i18n = hooks.useI18n(), [selectMode, setSelectMode] = React2.useState(Boolean(selectedItems && selectedItems.length > 0)), [loadingPosition, setLoadingPositionState] = React2.useState(0), [lastSelected, setLastSelected] = React2.useState(), [smallScreen, setSmallScreen] = React2.useState(isBreakpointsXS()), forceUpdate = React2.useReducer((x = 0) => x + 1, 0)[1], checkableButtonRef = React2.useRef(null), {
        bulkActionsIntersectionRef,
        tableMeasurerRef,
        isBulkActionsSticky,
        bulkActionsAbsoluteOffset,
        bulkActionsMaxWidth,
        bulkActionsOffsetLeft,
        computeTableDimensions
      } = useIsBulkActionsSticky.useIsBulkActionsSticky(selectMode);
      React2.useEffect(() => {
        computeTableDimensions();
      }, [computeTableDimensions, items.length]);
      let defaultResourceName = useLazyRef.useLazyRef(() => ({
        singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
        plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
      })), listRef = React2.useRef(null), handleSelectMode = (selectMode2) => {
        setSelectMode(selectMode2), !selectMode2 && onSelectionChange && onSelectionChange([]);
      }, handleResize = debounce.debounce(() => {
        let newSmallScreen = isBreakpointsXS();
        selectedItems && selectedItems.length === 0 && selectMode && !newSmallScreen && handleSelectMode(!1), smallScreen !== newSmallScreen && setSmallScreen(newSmallScreen);
      }, 50, {
        leading: !0,
        trailing: !0,
        maxWait: 50
      });
      useEventListener.useEventListener("resize", handleResize);
      let isSelectable = Boolean(promotedBulkActions && promotedBulkActions.length > 0 || bulkActions && bulkActions.length > 0 || selectable) && !smallScreen, selectAllSelectState = () => {
        let selectState = "indeterminate";
        return !selectedItems || Array.isArray(selectedItems) && selectedItems.length === 0 ? selectState = !1 : (selectedItems === types.SELECT_ALL_ITEMS || Array.isArray(selectedItems) && selectedItems.length === items.length) && (selectState = !0), selectState;
      }, resourceName = resourceNameProp || defaultResourceName.current, headerTitle = () => {
        let itemsCount = items.length, resource = !loading && (!totalItemsCount && itemsCount === 1 || totalItemsCount === 1) ? resourceName.singular : resourceName.plural;
        return loading ? i18n.translate("Polaris.ResourceList.loading", {
          resource
        }) : totalItemsCount ? i18n.translate("Polaris.ResourceList.showingTotalCount", {
          itemsCount,
          totalItemsCount,
          resource
        }) : headerContent || i18n.translate("Polaris.ResourceList.showing", {
          itemsCount,
          resource
        });
      }, selectAllActionsLabel = () => {
        let selectedItemsCount = selectedItems === types.SELECT_ALL_ITEMS ? `${items.length}+` : selectedItems.length;
        return i18n.translate("Polaris.ResourceList.selected", {
          selectedItemsCount
        });
      }, selectAllActionsAccessibilityLabel = () => {
        let selectedItemsCount = selectedItems.length, totalItemsCount2 = items.length, allSelected = selectedItemsCount === totalItemsCount2;
        return totalItemsCount2 === 1 && allSelected ? i18n.translate("Polaris.ResourceList.a11yCheckboxDeselectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : totalItemsCount2 === 1 ? i18n.translate("Polaris.ResourceList.a11yCheckboxSelectAllSingle", {
          resourceNameSingular: resourceName.singular
        }) : allSelected ? i18n.translate("Polaris.ResourceList.a11yCheckboxDeselectAllMultiple", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        }) : i18n.translate("Polaris.ResourceList.a11yCheckboxSelectAllMultiple", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        });
      }, paginatedSelectAllText = () => {
        if (!(!isSelectable || !hasMoreItems) && selectedItems === types.SELECT_ALL_ITEMS)
          return i18n.translate(isFiltered ? "Polaris.ResourceList.allFilteredItemsSelected" : "Polaris.ResourceList.allItemsSelected", {
            itemsLength: items.length,
            resourceNamePlural: resourceName.plural
          });
      }, paginatedSelectAllAction = () => !isSelectable || !hasMoreItems ? void 0 : {
        content: selectedItems === types.SELECT_ALL_ITEMS ? i18n.translate("Polaris.Common.undo") : i18n.translate(isFiltered ? "Polaris.ResourceList.selectAllFilteredItems" : "Polaris.ResourceList.selectAllItems", {
          itemsLength: items.length,
          resourceNamePlural: resourceName.plural
        }),
        onAction: handleSelectAllItemsInStore
      }, emptySearchResultText = {
        title: i18n.translate("Polaris.ResourceList.emptySearchResultTitle", {
          resourceNamePlural: resourceName.plural
        }),
        description: i18n.translate("Polaris.ResourceList.emptySearchResultDescription")
      }, handleSelectAllItemsInStore = () => {
        let newlySelectedItems = selectedItems === types.SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : types.SELECT_ALL_ITEMS;
        onSelectionChange && onSelectionChange(newlySelectedItems);
      }, setLoadingPosition = React2.useCallback(() => {
        if (listRef.current != null) {
          if (typeof window > "u")
            return;
          let overlay = listRef.current.getBoundingClientRect(), viewportHeight = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0), overflow = viewportHeight - overlay.height, spinnerHeight = items.length === 1 ? SMALL_SPINNER_HEIGHT : LARGE_SPINNER_HEIGHT, spinnerPosition = overflow > 0 ? (overlay.height - spinnerHeight) / 2 : (viewportHeight - overlay.top - spinnerHeight) / 2;
          setLoadingPositionState(spinnerPosition);
        }
      }, [listRef, items.length]), itemsExist = items.length > 0;
      React2.useEffect(() => {
        loading && setLoadingPosition();
      }, [loading, setLoadingPosition]), React2.useEffect(() => {
        selectedItems && selectedItems.length > 0 && !selectMode && setSelectMode(!0), (!selectedItems || selectedItems.length === 0) && !isBreakpointsXS() && setSelectMode(!1);
      }, [selectedItems, selectMode]), React2.useEffect(() => {
        forceUpdate();
      }, [forceUpdate, items]);
      let renderItemWithId = (item, index) => {
        let id = idForItem(item, index);
        return renderItem(item, id, index);
      }, handleMultiSelectionChange = (lastSelected2, currentSelected, resolveItemId2) => {
        let min = Math.min(lastSelected2, currentSelected), max = Math.max(lastSelected2, currentSelected);
        return items.slice(min, max + 1).map(resolveItemId2);
      }, handleSelectionChange = (selected, id, sortOrder, shiftKey) => {
        if (selectedItems == null || onSelectionChange == null)
          return;
        let newlySelectedItems = selectedItems === types.SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : [...selectedItems];
        sortOrder !== void 0 && setLastSelected(sortOrder);
        let lastSelectedFromState = lastSelected, selectedIds = [id];
        if (shiftKey && lastSelectedFromState != null && sortOrder !== void 0 && resolveItemId && (selectedIds = handleMultiSelectionChange(lastSelectedFromState, sortOrder, resolveItemId)), newlySelectedItems = [.../* @__PURE__ */ new Set([...newlySelectedItems, ...selectedIds])], !selected)
          for (let selectedId of selectedIds)
            newlySelectedItems.splice(newlySelectedItems.indexOf(selectedId), 1);
        newlySelectedItems.length === 0 && !isBreakpointsXS() ? handleSelectMode(!1) : newlySelectedItems.length > 0 && handleSelectMode(!0), onSelectionChange && onSelectionChange(newlySelectedItems);
      }, handleToggleAll = () => {
        let newlySelectedItems;
        Array.isArray(selectedItems) && selectedItems.length === items.length || selectedItems === types.SELECT_ALL_ITEMS ? newlySelectedItems = [] : newlySelectedItems = items.map((item, index) => idForItem(item, index)), newlySelectedItems.length === 0 && !isBreakpointsXS() ? handleSelectMode(!1) : newlySelectedItems.length > 0 && handleSelectMode(!0), onSelectionChange && onSelectionChange(newlySelectedItems), setTimeout(() => {
          checkableButtonRef?.current?.focus();
        }, 0);
      }, selectAllActionsMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.SelectAllActionsWrapper
      }, /* @__PURE__ */ React2.createElement(SelectAllActions.SelectAllActions, {
        label: selectAllActionsLabel(),
        accessibilityLabel: selectAllActionsAccessibilityLabel(),
        selected: selectAllSelectState(),
        onToggleAll: handleToggleAll,
        selectMode,
        paginatedSelectAllAction: paginatedSelectAllAction(),
        paginatedSelectAllText: paginatedSelectAllText(),
        disabled: loading,
        ref: checkableButtonRef
      })) : null, bulkActionClassNames = css.classNames(ResourceList_module.default.BulkActionsWrapper, isBulkActionsSticky && ResourceList_module.default.BulkActionsWrapperSticky), bulkActionsMarkup = isSelectable && selectMode && (bulkActions || promotedBulkActions) ? /* @__PURE__ */ React2.createElement("div", {
        className: bulkActionClassNames,
        style: {
          top: isBulkActionsSticky ? void 0 : bulkActionsAbsoluteOffset,
          width: bulkActionsMaxWidth,
          left: isBulkActionsSticky ? bulkActionsOffsetLeft : void 0
        }
      }, /* @__PURE__ */ React2.createElement(BulkActions.BulkActions, {
        selectMode,
        onSelectModeToggle: handleSelectMode,
        promotedActions: promotedBulkActions,
        actions: bulkActions,
        disabled: loading,
        isSticky: isBulkActionsSticky,
        width: bulkActionsMaxWidth
      })) : null, filterControlMarkup = filterControl ? /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(!flushFilters && ResourceList_module.default.FiltersWrapper)
      }, filterControl) : null, sortingSelectMarkup = sortOptions && sortOptions.length > 0 && !alternateTool ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.SortWrapper
      }, /* @__PURE__ */ React2.createElement(Select.Select, {
        label: i18n.translate("Polaris.ResourceList.sortingLabel"),
        labelInline: !smallScreen,
        labelHidden: smallScreen,
        options: sortOptions,
        onChange: onSortChange,
        value: sortValue,
        disabled: selectMode
      })) : null, alternateToolMarkup = alternateTool && !sortingSelectMarkup ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.AlternateToolWrapper
      }, alternateTool) : null, headerTitleMarkup = /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.HeaderTitleWrapper
      }, headerTitle()), selectButtonMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.SelectButtonWrapper
      }, /* @__PURE__ */ React2.createElement(Button2.Button, {
        disabled: selectMode,
        icon: polarisIcons.CheckboxIcon,
        onClick: () => handleSelectMode(!0)
      }, i18n.translate("Polaris.ResourceList.selectButtonText"))) : null, checkableButtonMarkup = isSelectable ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.CheckableButtonWrapper
      }, /* @__PURE__ */ React2.createElement(CheckableButton.CheckableButton, {
        accessibilityLabel: selectAllActionsAccessibilityLabel(),
        label: headerTitle(),
        onToggleAll: handleToggleAll,
        disabled: loading,
        ref: checkableButtonRef
      })) : null, needsHeader = isSelectable || sortOptions && sortOptions.length > 0 || alternateTool, headerWrapperOverlay = loading ? /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default["HeaderWrapper-overlay"]
      }) : null, showEmptyState = emptyState && !itemsExist && !loading, showEmptySearchState = !showEmptyState && filterControl && !itemsExist && !loading, headerMarkup = !showEmptyState && showHeader !== !1 && !showEmptySearchState && (showHeader || needsHeader) && listRef.current && /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.HeaderOuterWrapper
      }, /* @__PURE__ */ React2.createElement(Sticky.Sticky, {
        boundingElement: listRef.current
      }, (isSticky) => {
        let headerClassName = css.classNames(ResourceList_module.default.HeaderWrapper, sortOptions && sortOptions.length > 0 && !alternateTool && ResourceList_module.default["HeaderWrapper-hasSort"], alternateTool && ResourceList_module.default["HeaderWrapper-hasAlternateTool"], isSelectable && ResourceList_module.default["HeaderWrapper-hasSelect"], loading && ResourceList_module.default["HeaderWrapper-disabled"], isSelectable && selectMode && ResourceList_module.default["HeaderWrapper-inSelectMode"], isSticky && ResourceList_module.default["HeaderWrapper-isSticky"]);
        return /* @__PURE__ */ React2.createElement("div", {
          className: headerClassName
        }, headerWrapperOverlay, /* @__PURE__ */ React2.createElement("div", {
          className: ResourceList_module.default.HeaderContentWrapper
        }, headerTitleMarkup, checkableButtonMarkup, alternateToolMarkup, sortingSelectMarkup, selectButtonMarkup), selectAllActionsMarkup);
      })), emptySearchStateMarkup = showEmptySearchState ? emptySearchState || /* @__PURE__ */ React2.createElement("div", {
        className: ResourceList_module.default.EmptySearchResultWrapper
      }, /* @__PURE__ */ React2.createElement(EmptySearchResult.EmptySearchResult, Object.assign({}, emptySearchResultText, {
        withIllustration: !0
      }))) : null, emptyStateMarkup = showEmptyState ? emptyState : null, defaultTopPadding = 8, spinnerStyle = {
        paddingTop: `${loadingPosition > 0 ? loadingPosition : defaultTopPadding}px`
      }, spinnerSize = items.length < 2 ? "small" : "large", loadingOverlay = loading ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("li", {
        className: ResourceList_module.default.SpinnerContainer,
        style: spinnerStyle
      }, /* @__PURE__ */ React2.createElement(Spinner.Spinner, {
        size: spinnerSize,
        accessibilityLabel: "Items are loading"
      })), /* @__PURE__ */ React2.createElement("li", {
        className: ResourceList_module.default.LoadingOverlay
      })) : null, className = css.classNames(ResourceList_module.default.ItemWrapper, loading && ResourceList_module.default["ItemWrapper-isLoading"]), loadingWithoutItemsMarkup = loading && !itemsExist ? /* @__PURE__ */ React2.createElement("div", {
        className,
        tabIndex: -1
      }, loadingOverlay) : null, resourceListClassName = css.classNames(ResourceList_module.default.ResourceList, loading && ResourceList_module.default.disabledPointerEvents, selectMode && ResourceList_module.default.disableTextSelection), listMarkup = itemsExist ? /* @__PURE__ */ React2.createElement("ul", {
        className: resourceListClassName,
        ref: listRef,
        "aria-live": "polite",
        "aria-busy": loading
      }, loadingOverlay, React2.Children.toArray(items.map(renderItemWithId))) : null, paginationMarkup = pagination ? /* @__PURE__ */ React2.createElement(Pagination.Pagination, Object.assign({
        type: "table"
      }, pagination)) : null, context$1 = {
        selectable: isSelectable,
        selectedItems,
        selectMode,
        hasBulkActions: Boolean(bulkActions),
        resourceName,
        loading,
        onSelectionChange: handleSelectionChange
      }, resourceListWrapperClasses = css.classNames(ResourceList_module.default.ResourceListWrapper, Boolean(bulkActionsMarkup) && selectMode && bulkActions && ResourceList_module.default.ResourceListWrapperWithBulkActions);
      return /* @__PURE__ */ React2.createElement(context.ResourceListContext.Provider, {
        value: context$1
      }, /* @__PURE__ */ React2.createElement("div", {
        className: resourceListWrapperClasses,
        ref: tableMeasurerRef
      }, filterControlMarkup, headerMarkup, bulkActionsMarkup, listMarkup, emptySearchStateMarkup, emptyStateMarkup, loadingWithoutItemsMarkup, paginationMarkup), /* @__PURE__ */ React2.createElement("div", {
        ref: bulkActionsIntersectionRef
      }));
    }
    ResourceList.Item = ResourceItem.ResourceItem;
    exports.ResourceList = ResourceList;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SettingToggle/SettingToggle.js
var require_SettingToggle = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SettingToggle/SettingToggle.js"(exports) {
    "use strict";
    var React2 = require("react"), utils = require_utils(), LegacyCard = require_LegacyCard(), SettingAction = require_SettingAction();
    function SettingToggle({
      enabled,
      action,
      children
    }) {
      let id = React2.useId(), actionMarkup = action ? utils.buttonFrom(action, {
        role: "switch",
        ariaChecked: enabled ? "true" : "false",
        size: "slim"
      }) : null;
      return /* @__PURE__ */ React2.createElement(LegacyCard.LegacyCard, {
        sectioned: !0
      }, /* @__PURE__ */ React2.createElement(SettingAction.SettingAction, {
        action: actionMarkup
      }, /* @__PURE__ */ React2.createElement("label", {
        htmlFor: id
      }, children)));
    }
    exports.SettingToggle = SettingToggle;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.scss.js
var require_SkeletonBodyText_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SkeletonBodyTextContainer: "Polaris-SkeletonBodyText__SkeletonBodyTextContainer",
      SkeletonBodyText: "Polaris-SkeletonBodyText"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.js
var require_SkeletonBodyText = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonBodyText/SkeletonBodyText.js"(exports) {
    "use strict";
    var React2 = require("react"), SkeletonBodyText_module = require_SkeletonBodyText_scss();
    function SkeletonBodyText({
      lines = 3
    }) {
      let bodyTextLines = [];
      for (let i = 0; i < lines; i++)
        bodyTextLines.push(/* @__PURE__ */ React2.createElement("div", {
          className: SkeletonBodyText_module.default.SkeletonBodyText,
          key: i
        }));
      return /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonBodyText_module.default.SkeletonBodyTextContainer
      }, bodyTextLines);
    }
    exports.SkeletonBodyText = SkeletonBodyText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.scss.js
var require_SkeletonDisplayText_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      DisplayText: "Polaris-SkeletonDisplayText__DisplayText",
      sizeSmall: "Polaris-SkeletonDisplayText--sizeSmall",
      sizeMedium: "Polaris-SkeletonDisplayText--sizeMedium",
      sizeLarge: "Polaris-SkeletonDisplayText--sizeLarge",
      sizeExtraLarge: "Polaris-SkeletonDisplayText--sizeExtraLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.js
var require_SkeletonDisplayText = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonDisplayText/SkeletonDisplayText.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), SkeletonDisplayText_module = require_SkeletonDisplayText_scss();
    function SkeletonDisplayText({
      size = "medium",
      maxWidth
    }) {
      let className = css.classNames(SkeletonDisplayText_module.default.DisplayText, size && SkeletonDisplayText_module.default[css.variationName("size", size)]), style = {
        "--pc-skeleton-display-text-max-width": maxWidth ?? void 0
      };
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        style: css.sanitizeCustomProperties(style)
      });
    }
    exports.SkeletonDisplayText = SkeletonDisplayText;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.scss.js
var require_SkeletonPage_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Title: "Polaris-SkeletonPage__Title",
      SkeletonTitle: "Polaris-SkeletonPage__SkeletonTitle"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.js
var require_SkeletonPage = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonPage/SkeletonPage.js"(exports) {
    "use strict";
    var React2 = require("react"), SkeletonPage_module = require_SkeletonPage_scss(), hooks = require_hooks2(), Box = require_Box(), BlockStack2 = require_BlockStack(), InlineStack = require_InlineStack();
    function SkeletonPage({
      children,
      fullWidth,
      narrowWidth,
      primaryAction,
      title = "",
      backAction
    }) {
      let i18n = hooks.useI18n(), titleContent = title ? /* @__PURE__ */ React2.createElement("h1", {
        className: SkeletonPage_module.default.Title
      }, title) : /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonPage_module.default.SkeletonTitle
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        background: "bg-fill-tertiary",
        minWidth: "120px",
        minHeight: "28px",
        borderRadius: "100"
      })), primaryActionMarkup = primaryAction ? /* @__PURE__ */ React2.createElement(Box.Box, {
        id: "SkeletonPage-PrimaryAction",
        borderRadius: "100",
        background: "bg-fill-tertiary",
        minHeight: "2.25rem",
        minWidth: "6.25rem"
      }) : null, backActionMarkup = backAction ? /* @__PURE__ */ React2.createElement(Box.Box, {
        borderRadius: "100",
        background: "bg-fill-tertiary",
        minHeight: "2.25rem",
        minWidth: "2.25rem",
        maxWidth: "2.25rem"
      }) : null;
      return /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, {
        gap: "400",
        inlineAlign: "center"
      }, /* @__PURE__ */ React2.createElement(Box.Box, Object.assign({
        width: "100%",
        padding: "0",
        paddingInlineStart: {
          sm: "600"
        },
        paddingInlineEnd: {
          sm: "600"
        },
        maxWidth: "var(--pc-skeleton-page-max-width)",
        "aria-label": i18n.translate("Polaris.SkeletonPage.loadingLabel"),
        role: "status"
      }, narrowWidth && {
        maxWidth: "var(--pc-skeleton-page-max-width-narrow)"
      }, fullWidth && {
        maxWidth: "none"
      }), /* @__PURE__ */ React2.createElement(BlockStack2.BlockStack, null, /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockStart: {
          xs: "400",
          md: "500"
        },
        paddingBlockEnd: {
          xs: "400",
          md: "500"
        },
        paddingInlineStart: {
          xs: "400",
          sm: "0"
        },
        paddingInlineEnd: {
          xs: "400",
          sm: "0"
        },
        width: "100%"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400",
        align: "space-between",
        blockAlign: "center"
      }, /* @__PURE__ */ React2.createElement(InlineStack.InlineStack, {
        gap: "400"
      }, backActionMarkup, /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockStart: "100",
        paddingBlockEnd: "100"
      }, titleContent)), primaryActionMarkup)), /* @__PURE__ */ React2.createElement(Box.Box, {
        paddingBlockEnd: "200",
        width: "100%"
      }, children))));
    }
    exports.SkeletonPage = SkeletonPage;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.scss.js
var require_SkeletonTabs_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Tabs: "Polaris-SkeletonTabs__Tabs",
      Tab: "Polaris-SkeletonTabs__Tab",
      TabText: "Polaris-SkeletonTabs__TabText",
      fitted: "Polaris-SkeletonTabs--fitted"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.js
var require_SkeletonTabs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonTabs/SkeletonTabs.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), SkeletonTabs_module = require_SkeletonTabs_scss();
    function SkeletonTabs({
      count = 2,
      fitted = !1
    }) {
      return /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SkeletonTabs_module.default.Tabs, fitted && SkeletonTabs_module.default.fitted)
      }, [...Array(count).keys()].map((key) => /* @__PURE__ */ React2.createElement("div", {
        key,
        className: css.classNames(SkeletonTabs_module.default.Tab)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: SkeletonTabs_module.default.TabText
      }))));
    }
    exports.SkeletonTabs = SkeletonTabs;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.scss.js
var require_SkeletonThumbnail_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SkeletonThumbnail: "Polaris-SkeletonThumbnail",
      sizeExtraSmall: "Polaris-SkeletonThumbnail--sizeExtraSmall",
      sizeSmall: "Polaris-SkeletonThumbnail--sizeSmall",
      sizeMedium: "Polaris-SkeletonThumbnail--sizeMedium",
      sizeLarge: "Polaris-SkeletonThumbnail--sizeLarge"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.js
var require_SkeletonThumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/SkeletonThumbnail/SkeletonThumbnail.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), SkeletonThumbnail_module = require_SkeletonThumbnail_scss();
    function SkeletonThumbnail({
      size = "medium"
    }) {
      let className = css.classNames(SkeletonThumbnail_module.default.SkeletonThumbnail, size && SkeletonThumbnail_module.default[css.variationName("size", size)]);
      return /* @__PURE__ */ React2.createElement("div", {
        className
      });
    }
    exports.SkeletonThumbnail = SkeletonThumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.scss.js
var require_Thumbnail_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Thumbnail: "Polaris-Thumbnail",
      sizeExtraSmall: "Polaris-Thumbnail--sizeExtraSmall",
      sizeSmall: "Polaris-Thumbnail--sizeSmall",
      sizeMedium: "Polaris-Thumbnail--sizeMedium",
      sizeLarge: "Polaris-Thumbnail--sizeLarge",
      transparent: "Polaris-Thumbnail--transparent"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.js
var require_Thumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Thumbnail/Thumbnail.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Thumbnail_module = require_Thumbnail_scss(), Image = require_Image(), Icon = require_Icon();
    function Thumbnail({
      source,
      alt,
      size = "medium",
      transparent
    }) {
      let className = css.classNames(Thumbnail_module.default.Thumbnail, size && Thumbnail_module.default[css.variationName("size", size)], transparent && Thumbnail_module.default.transparent), content = typeof source == "string" ? /* @__PURE__ */ React2.createElement(Image.Image, {
        alt,
        source
      }) : /* @__PURE__ */ React2.createElement(Icon.Icon, {
        accessibilityLabel: alt,
        source
      });
      return /* @__PURE__ */ React2.createElement("span", {
        className
      }, content);
    }
    exports.Thumbnail = Thumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/Toast/Toast.js
var require_Toast2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/Toast/Toast.js"(exports) {
    "use strict";
    var React2 = require("react"), useDeepEffect = require_use_deep_effect(), hooks = require_hooks9(), Toast = /* @__PURE__ */ React2.memo(function(props) {
      let id = React2.useId(), {
        showToast,
        hideToast
      } = hooks.useFrame();
      return useDeepEffect.useDeepEffect(() => (showToast({
        id,
        ...props
      }), () => {
        hideToast({
          id
        });
      }), [props]), null;
    });
    exports.Toast = Toast;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.scss.js
var require_TopBar_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      TopBar: "Polaris-TopBar",
      Container: "Polaris-TopBar__Container",
      LogoDisplayControl: "Polaris-TopBar__LogoDisplayControl",
      LogoDisplayContainer: "Polaris-TopBar__LogoDisplayContainer",
      LogoContainer: "Polaris-TopBar__LogoContainer",
      hasLogoSuffix: "Polaris-TopBar--hasLogoSuffix",
      Logo: "Polaris-TopBar__Logo",
      LogoLink: "Polaris-TopBar__LogoLink",
      ContextControl: "Polaris-TopBar__ContextControl",
      NavigationIcon: "Polaris-TopBar__NavigationIcon",
      focused: "Polaris-TopBar--focused",
      IconWrapper: "Polaris-TopBar__IconWrapper",
      LeftContent: "Polaris-TopBar__LeftContent",
      Search: "Polaris-TopBar__Search",
      RightContent: "Polaris-TopBar__RightContent",
      SecondaryMenu: "Polaris-TopBar__SecondaryMenu"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.scss.js
var require_Search_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Search: "Polaris-TopBar-Search",
      SearchContent: "Polaris-TopBar-Search__SearchContent",
      visible: "Polaris-TopBar-Search--visible",
      Results: "Polaris-TopBar-Search__Results"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.scss.js
var require_SearchDismissOverlay_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SearchDismissOverlay: "Polaris-TopBar-SearchDismissOverlay",
      visible: "Polaris-TopBar-SearchDismissOverlay--visible"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.js
var require_SearchDismissOverlay = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), SearchDismissOverlay_module = require_SearchDismissOverlay_scss(), ScrollLock = require_ScrollLock();
    function SearchDismissOverlay({
      onDismiss,
      visible
    }) {
      let node = React2.useRef(null), handleDismiss = React2.useCallback(({
        target
      }) => {
        target === node.current && onDismiss != null && onDismiss();
      }, [onDismiss]);
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, visible ? /* @__PURE__ */ React2.createElement(ScrollLock.ScrollLock, null) : null, /* @__PURE__ */ React2.createElement("div", {
        ref: node,
        className: css.classNames(SearchDismissOverlay_module.default.SearchDismissOverlay, visible && SearchDismissOverlay_module.default.visible),
        onClick: handleDismiss
      }));
    }
    exports.SearchDismissOverlay = SearchDismissOverlay;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.js
var require_Search = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Search/Search.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Search_module = require_Search_scss(), SearchDismissOverlay = require_SearchDismissOverlay();
    function Search({
      visible,
      children,
      onDismiss,
      overlayVisible = !1
    }) {
      if (children == null)
        return null;
      let overlayMarkup = visible ? /* @__PURE__ */ React2.createElement(SearchDismissOverlay.SearchDismissOverlay, {
        onDismiss,
        visible: overlayVisible
      }) : null;
      return /* @__PURE__ */ React2.createElement(React2.Fragment, null, overlayMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(Search_module.default.Search, visible && Search_module.default.visible)
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Search_module.default.SearchContent
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Search_module.default.Results
      }, children))));
    }
    exports.Search = Search;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.scss.js
var require_SearchField_scss2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      SearchField: "Polaris-TopBar-SearchField",
      focused: "Polaris-TopBar-SearchField--focused",
      Input: "Polaris-TopBar-SearchField__Input",
      Backdrop: "Polaris-TopBar-SearchField__Backdrop",
      BackdropShowFocusBorder: "Polaris-TopBar-SearchField__BackdropShowFocusBorder",
      Icon: "Polaris-TopBar-SearchField__Icon",
      Clear: "Polaris-TopBar-SearchField__Clear"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.js
var require_SearchField2 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/SearchField/SearchField.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), SearchField_module = require_SearchField_scss2(), hooks = require_hooks2(), Icon = require_Icon(), Text2 = require_Text();
    function SearchField({
      value,
      focused,
      active,
      placeholder,
      onChange,
      onFocus,
      onBlur,
      onCancel,
      showFocusBorder
    }) {
      let i18n = hooks.useI18n(), [forceActive, setForceActive] = React2.useState(!1), input = React2.useRef(null), searchId = React2.useId(), handleChange = React2.useCallback(({
        currentTarget
      }) => {
        onChange(currentTarget.value);
      }, [onChange]), handleFocus = React2.useCallback(() => onFocus && onFocus(), [onFocus]), handleBlur = React2.useCallback(() => onBlur && onBlur(), [onBlur]), handleClear = React2.useCallback(() => {
        onCancel && onCancel(), input.current && (input.current.value = "", onChange(""), input.current.focus());
      }, [onCancel, onChange]);
      React2.useEffect(() => {
        input.current && (focused ? input.current.focus() : input.current.blur());
      }, [focused]);
      let clearMarkup = value !== "" && /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        "aria-label": i18n.translate("Polaris.TopBar.SearchField.clearButtonLabel"),
        className: SearchField_module.default.Clear,
        onClick: handleClear,
        onBlur: () => {
          setForceActive(!1), handleClear();
        },
        onFocus: () => {
          handleFocus(), setForceActive(!0);
        }
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.XCircleIcon
      })), className = css.classNames(SearchField_module.default.SearchField, (focused || active || forceActive) && SearchField_module.default.focused);
      return /* @__PURE__ */ React2.createElement("div", {
        className,
        onFocus: handleFocus,
        onBlur: handleBlur
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "span",
        visuallyHidden: !0
      }, /* @__PURE__ */ React2.createElement("label", {
        htmlFor: searchId
      }, i18n.translate("Polaris.TopBar.SearchField.search"))), /* @__PURE__ */ React2.createElement("input", {
        id: searchId,
        className: SearchField_module.default.Input,
        placeholder,
        type: "search",
        autoCapitalize: "off",
        autoComplete: "off",
        autoCorrect: "off",
        ref: input,
        value,
        onChange: handleChange,
        onKeyDown: preventDefault
      }), /* @__PURE__ */ React2.createElement("span", {
        className: SearchField_module.default.Icon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.SearchIcon
      })), clearMarkup, /* @__PURE__ */ React2.createElement("div", {
        className: css.classNames(SearchField_module.default.Backdrop, showFocusBorder && SearchField_module.default.BackdropShowFocusBorder)
      }));
    }
    function preventDefault(event) {
      event.key === "Enter" && event.preventDefault();
    }
    exports.SearchField = SearchField;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.scss.js
var require_UserMenu_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Details: "Polaris-TopBar-UserMenu__Details",
      Message: "Polaris-TopBar-UserMenu__Message"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.scss.js
var require_MessageIndicator_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      MessageIndicatorWrapper: "Polaris-MessageIndicator__MessageIndicatorWrapper",
      MessageIndicator: "Polaris-MessageIndicator"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.js
var require_MessageIndicator = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/MessageIndicator/MessageIndicator.js"(exports) {
    "use strict";
    var React2 = require("react"), MessageIndicator_module = require_MessageIndicator_scss();
    function MessageIndicator({
      children,
      active
    }) {
      let indicatorMarkup = active && /* @__PURE__ */ React2.createElement("div", {
        className: MessageIndicator_module.default.MessageIndicator
      });
      return /* @__PURE__ */ React2.createElement("div", {
        className: MessageIndicator_module.default.MessageIndicatorWrapper
      }, indicatorMarkup, children);
    }
    exports.MessageIndicator = MessageIndicator;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.scss.js
var require_Menu_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      ActivatorWrapper: "Polaris-TopBar-Menu__ActivatorWrapper",
      Activator: "Polaris-TopBar-Menu__Activator",
      "Activator-userMenu": "Polaris-TopBar-Menu__Activator--userMenu",
      Section: "Polaris-TopBar-Menu__Section"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.scss.js
var require_Message_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Section: "Polaris-Menu-Message__Section"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.js
var require_Message = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/components/Message/Message.js"(exports) {
    "use strict";
    var React2 = require("react"), Message_module = require_Message_scss(), Link2 = require_Link(), Badge = require_Badge(), Popover = require_Popover(), LegacyStack = require_LegacyStack(), TextContainer = require_TextContainer(), Text2 = require_Text(), Button2 = require_Button();
    function Message({
      title,
      description,
      action,
      link,
      badge
    }) {
      let badgeMarkup = badge && /* @__PURE__ */ React2.createElement(Badge.Badge, {
        tone: badge.tone
      }, badge.content), {
        to,
        content: linkContent
      } = link, {
        onClick,
        content: actionContent
      } = action;
      return /* @__PURE__ */ React2.createElement("div", {
        className: Message_module.default.Section
      }, /* @__PURE__ */ React2.createElement(Popover.Popover.Section, null, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        vertical: !0,
        spacing: "tight"
      }, /* @__PURE__ */ React2.createElement(TextContainer.TextContainer, null, /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: "headingMd",
        as: "h2"
      }, title, badgeMarkup), /* @__PURE__ */ React2.createElement("p", null, description)), /* @__PURE__ */ React2.createElement(Link2.Link, {
        url: to
      }, linkContent), /* @__PURE__ */ React2.createElement(Button2.Button, {
        variant: "plain",
        onClick
      }, actionContent))));
    }
    exports.Message = Message;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.js
var require_Menu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/Menu/Menu.js"(exports) {
    "use strict";
    var React2 = require("react"), css = require_css(), Menu_module = require_Menu_scss(), Message = require_Message(), Popover = require_Popover(), Box = require_Box(), ActionList = require_ActionList();
    function Menu(props) {
      let {
        actions,
        onOpen,
        onClose,
        open,
        activatorContent,
        message,
        accessibilityLabel,
        customWidth,
        userMenu
      } = props, badgeProps = message && message.badge && {
        content: message.badge.content,
        tone: message.badge.tone
      }, messageMarkup = message && /* @__PURE__ */ React2.createElement(Message.Message, {
        title: message.title,
        description: message.description,
        action: {
          onClick: message.action.onClick,
          content: message.action.content
        },
        link: {
          to: message.link.to,
          content: message.link.content
        },
        badge: badgeProps
      });
      return /* @__PURE__ */ React2.createElement(Popover.Popover, {
        activator: /* @__PURE__ */ React2.createElement("div", {
          className: Menu_module.default.ActivatorWrapper
        }, /* @__PURE__ */ React2.createElement("button", {
          type: "button",
          className: css.classNames(Menu_module.default.Activator, userMenu && Menu_module.default["Activator-userMenu"]),
          onClick: onOpen,
          "aria-label": accessibilityLabel
        }, activatorContent)),
        active: open,
        onClose,
        fixed: !0,
        fullHeight: !0,
        preferredAlignment: "right"
      }, /* @__PURE__ */ React2.createElement("div", {
        className: Menu_module.default.MenuItems
      }, /* @__PURE__ */ React2.createElement(Box.Box, {
        width: customWidth
      }, /* @__PURE__ */ React2.createElement(ActionList.ActionList, {
        actionRole: "menuitem",
        onActionAnyItem: onClose,
        sections: actions
      }), messageMarkup)));
    }
    exports.Menu = Menu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.js
var require_UserMenu = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/components/UserMenu/UserMenu.js"(exports) {
    "use strict";
    var React2 = require("react"), UserMenu_module = require_UserMenu_scss(), MessageIndicator = require_MessageIndicator(), Menu = require_Menu(), Text2 = require_Text(), Avatar = require_Avatar();
    function UserMenu({
      name,
      detail,
      avatar,
      initials,
      actions,
      message,
      onToggle,
      open,
      accessibilityLabel,
      customActivator,
      customWidth
    }) {
      let showIndicator = Boolean(message), activatorContentMarkup = customActivator || /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("span", {
        className: UserMenu_module.default.Details
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "p",
        alignment: "start",
        fontWeight: "medium",
        truncate: !0
      }, name), /* @__PURE__ */ React2.createElement("span", {
        className: UserMenu_module.default.Message
      }, /* @__PURE__ */ React2.createElement(Text2.Text, {
        as: "p",
        variant: "bodySm",
        alignment: "start",
        tone: "subdued",
        truncate: !0
      }, detail))), /* @__PURE__ */ React2.createElement(MessageIndicator.MessageIndicator, {
        active: showIndicator
      }, /* @__PURE__ */ React2.createElement(Avatar.Avatar, {
        size: "md",
        initials: initials && initials.replace(" ", ""),
        source: avatar,
        name
      })));
      return /* @__PURE__ */ React2.createElement(Menu.Menu, {
        activatorContent: activatorContentMarkup,
        open,
        onOpen: onToggle,
        onClose: onToggle,
        actions,
        message,
        accessibilityLabel,
        customWidth,
        userMenu: !0
      });
    }
    exports.UserMenu = UserMenu;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.js
var require_TopBar = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/TopBar/TopBar.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), css = require_css(), getWidth = require_get_width(), useToggle = require_use_toggle(), TopBar_module = require_TopBar_scss(), Search = require_Search(), SearchField = require_SearchField2(), UserMenu = require_UserMenu(), hooks = require_hooks2(), hooks$1 = require_hooks9(), Icon = require_Icon(), UnstyledLink = require_UnstyledLink(), Image = require_Image(), Menu = require_Menu(), TopBar = function({
      showNavigationToggle,
      userMenu,
      searchResults,
      searchField,
      secondaryMenu,
      searchResultsVisible,
      searchResultsOverlayVisible = !1,
      onNavigationToggle,
      onSearchResultsDismiss,
      contextControl,
      logoSuffix
    }) {
      let i18n = hooks.useI18n(), {
        logo
      } = hooks$1.useFrame(), {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle.useToggle(!1), iconClassName = css.classNames(TopBar_module.default.NavigationIcon, focused && TopBar_module.default.focused), navigationButtonMarkup = showNavigationToggle ? /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: iconClassName,
        onClick: onNavigationToggle,
        onFocus: forceTrueFocused,
        onBlur: forceFalseFocused,
        "aria-label": i18n.translate("Polaris.TopBar.toggleMenuLabel")
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.IconWrapper
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.MenuIcon
      }))) : null, width = getWidth.getWidth(logo, 104), contextMarkup;
      if (contextControl)
        contextMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: TopBar_module.default.ContextControl
        }, contextControl);
      else if (logo) {
        let className = css.classNames(TopBar_module.default.LogoContainer, showNavigationToggle || searchField ? TopBar_module.default.LogoDisplayControl : TopBar_module.default.LogoDisplayContainer, logoSuffix && TopBar_module.default.hasLogoSuffix);
        contextMarkup = /* @__PURE__ */ React2.createElement("div", {
          className
        }, /* @__PURE__ */ React2.createElement(UnstyledLink.UnstyledLink, {
          url: logo.url || "",
          className: TopBar_module.default.LogoLink,
          style: {
            width
          }
        }, /* @__PURE__ */ React2.createElement(Image.Image, {
          source: logo.topBarSource || "",
          alt: logo.accessibilityLabel || "",
          className: TopBar_module.default.Logo,
          style: {
            width
          }
        })), logoSuffix);
      }
      let searchMarkup = searchField ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, searchField, /* @__PURE__ */ React2.createElement(Search.Search, {
        visible: searchResultsVisible,
        onDismiss: onSearchResultsDismiss,
        overlayVisible: searchResultsOverlayVisible
      }, searchResults)) : null;
      return /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.TopBar
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.Container
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.LeftContent
      }, navigationButtonMarkup, contextMarkup), /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.Search
      }, searchMarkup), /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.RightContent
      }, /* @__PURE__ */ React2.createElement("div", {
        className: TopBar_module.default.SecondaryMenu
      }, secondaryMenu), userMenu)));
    };
    TopBar.Menu = Menu.Menu;
    TopBar.SearchField = SearchField.SearchField;
    TopBar.UserMenu = UserMenu.UserMenu;
    exports.TopBar = TopBar;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/utils.js
var require_utils4 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/UnstyledButton/utils.js"(exports) {
    "use strict";
    var React2 = require("react"), UnstyledButton = require_UnstyledButton();
    function unstyledButtonFrom({
      content,
      onAction,
      ...action
    }, overrides, key) {
      return /* @__PURE__ */ React2.createElement(UnstyledButton.UnstyledButton, Object.assign({
        key,
        onClick: onAction
      }, action, overrides), content);
    }
    exports.unstyledButtonFrom = unstyledButtonFrom;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/duration.js
var require_duration = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/duration.js"(exports) {
    "use strict";
    function ensureTwoDigits(num) {
      return num > 9 ? String(num) : `0${num}`;
    }
    function secondsToTimeComponents(seconds) {
      return {
        hours: Math.floor(seconds / 3600),
        minutes: Math.floor(seconds % 3600 / 60),
        seconds: seconds % 60
      };
    }
    function secondsToTimestamp(numSeconds) {
      let {
        hours,
        minutes,
        seconds
      } = secondsToTimeComponents(numSeconds), hasHours = numSeconds > 3600, hoursText = hasHours ? `${hours}:` : "", minutesText = `${hasHours ? ensureTwoDigits(minutes) : minutes}:`, secondsText = `${ensureTwoDigits(seconds)}`;
      return `${hoursText}${minutesText}${secondsText}`;
    }
    function secondsToDurationTranslationKey(numSeconds) {
      let {
        hours,
        minutes,
        seconds
      } = secondsToTimeComponents(numSeconds), durationKey = "Polaris.VideoThumbnail.playButtonA11yLabel.duration";
      return hours ? (durationKey += `.hours.${hours > 1 ? "other" : "one"}`, seconds ? minutes > 1 ? durationKey += `${seconds > 1 ? ".minutesAndSeconds" : ".minutesAndSecond"}` : minutes === 1 ? durationKey += `${seconds > 1 ? ".minuteAndSeconds" : ".minuteAndSecond"}` : durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}` : minutes ? durationKey += `${minutes > 1 ? ".andMinutes" : ".andMinute"}` : durationKey += ".only") : minutes ? (durationKey += `.minutes.${minutes > 1 ? "other" : "one"}`, seconds ? durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}` : durationKey += ".only") : seconds && (durationKey += seconds > 1 ? ".seconds.other" : ".seconds.one"), durationKey;
    }
    exports.ensureTwoDigits = ensureTwoDigits;
    exports.secondsToDurationTranslationKey = secondsToDurationTranslationKey;
    exports.secondsToTimeComponents = secondsToTimeComponents;
    exports.secondsToTimestamp = secondsToTimestamp;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.scss.js
var require_VideoThumbnail_scss = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.scss.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var styles = {
      Thumbnail: "Polaris-VideoThumbnail__Thumbnail",
      ThumbnailContainer: "Polaris-VideoThumbnail__ThumbnailContainer",
      PlayButton: "Polaris-VideoThumbnail__PlayButton",
      Timestamp: "Polaris-VideoThumbnail__Timestamp",
      PlayIcon: "Polaris-VideoThumbnail__PlayIcon",
      Progress: "Polaris-VideoThumbnail__Progress",
      Indicator: "Polaris-VideoThumbnail__Indicator",
      ProgressBar: "Polaris-VideoThumbnail__ProgressBar",
      Label: "Polaris-VideoThumbnail__Label"
    };
    exports.default = styles;
  }
});

// node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.js
var require_VideoThumbnail = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/components/VideoThumbnail/VideoThumbnail.js"(exports) {
    "use strict";
    var React2 = require("react"), polarisIcons = require("@shopify/polaris-icons"), duration = require_duration(), VideoThumbnail_module = require_VideoThumbnail_scss(), hooks = require_hooks2(), hooks$1 = require_hooks11(), LegacyStack = require_LegacyStack(), Icon = require_Icon(), Text2 = require_Text();
    function VideoThumbnail({
      thumbnailUrl,
      videoLength = 0,
      videoProgress = 0,
      showVideoProgress = !1,
      accessibilityLabel,
      onClick,
      onBeforeStartPlaying
    }) {
      let i18n = hooks.useI18n(), {
        isNavigationCollapsed
      } = hooks$1.useMediaQuery(), buttonLabel;
      if (accessibilityLabel)
        buttonLabel = accessibilityLabel;
      else if (videoLength) {
        let {
          hours,
          minutes,
          seconds
        } = duration.secondsToTimeComponents(videoLength);
        buttonLabel = i18n.translate("Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration", {
          duration: i18n.translate(duration.secondsToDurationTranslationKey(videoLength), {
            hourCount: hours,
            minuteCount: minutes,
            secondCount: seconds
          })
        });
      } else
        buttonLabel = i18n.translate("Polaris.VideoThumbnail.playButtonA11yLabel.default");
      let timeStampMarkup = videoLength ? /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.Timestamp
      }, /* @__PURE__ */ React2.createElement(LegacyStack.LegacyStack, {
        alignment: "center",
        spacing: "extraTight"
      }, /* @__PURE__ */ React2.createElement("span", {
        className: VideoThumbnail_module.default.PlayIcon
      }, /* @__PURE__ */ React2.createElement(Icon.Icon, {
        source: polarisIcons.PlayIcon
      })), /* @__PURE__ */ React2.createElement(Text2.Text, {
        variant: isNavigationCollapsed ? "bodyLg" : "bodyMd",
        as: "p",
        fontWeight: "semibold"
      }, duration.secondsToTimestamp(videoLength)))) : null, progressMarkup = null;
      if (showVideoProgress) {
        let progressValue = calculateProgress(videoLength, videoProgress), progressValuePercents = Math.round(progressValue * 100);
        progressMarkup = /* @__PURE__ */ React2.createElement("div", {
          className: VideoThumbnail_module.default.Progress
        }, /* @__PURE__ */ React2.createElement("progress", {
          className: VideoThumbnail_module.default.ProgressBar,
          value: progressValuePercents,
          max: "100"
        }), /* @__PURE__ */ React2.createElement("div", {
          className: VideoThumbnail_module.default.Indicator,
          style: {
            transform: `scaleX(${progressValue})`
          }
        }, /* @__PURE__ */ React2.createElement("span", {
          className: VideoThumbnail_module.default.Label
        }, progressValuePercents, "%")));
      }
      return /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.ThumbnailContainer
      }, /* @__PURE__ */ React2.createElement("div", {
        className: VideoThumbnail_module.default.Thumbnail,
        style: {
          backgroundImage: `url(${thumbnailUrl})`
        }
      }), /* @__PURE__ */ React2.createElement("button", {
        type: "button",
        className: VideoThumbnail_module.default.PlayButton,
        "aria-label": buttonLabel,
        onClick,
        onMouseEnter: onBeforeStartPlaying,
        onFocus: onBeforeStartPlaying,
        onTouchStart: onBeforeStartPlaying
      }, timeStampMarkup), progressMarkup);
    }
    function calculateProgress(videoLength, videoProgress) {
      if (videoProgress > videoLength, videoProgress > 0 && videoLength > 0) {
        let progress = parseFloat((videoProgress / videoLength).toFixed(2));
        return progress > 1 ? 1 : progress;
      }
      return 0;
    }
    exports.VideoThumbnail = VideoThumbnail;
  }
});

// node_modules/@shopify/polaris/build/cjs/utilities/index-table/hooks.js
var require_hooks14 = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/utilities/index-table/hooks.js"(exports) {
    "use strict";
    var React2 = require("react"), context = require_context18();
    function useRowHovered() {
      return React2.useContext(context.RowHoveredContext);
    }
    function useRowSelected() {
      let {
        selected
      } = React2.useContext(context.RowContext);
      return selected;
    }
    function useContainerScroll() {
      return React2.useContext(context.ScrollContext);
    }
    exports.useContainerScroll = useContainerScroll;
    exports.useRowHovered = useRowHovered;
    exports.useRowSelected = useRowSelected;
  }
});

// node_modules/@shopify/polaris/build/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@shopify/polaris/build/cjs/index.js"(exports) {
    "use strict";
    var configure = require_configure(), types = require_types(), shared = require_shared(), colorTransformers = require_color_transformers(), withinContentContext = require_within_content_context(), useEventListener = require_use_event_listener(), useTheme = require_use_theme(), useIndexResourceState = require_use_index_resource_state(), breakpoints = require_breakpoints(), AppProvider3 = require_AppProvider(), AccountConnection = require_AccountConnection(), ActionList = require_ActionList(), ActionMenu = require_ActionMenu(), Autocomplete = require_Autocomplete(), Avatar = require_Avatar(), Backdrop = require_Backdrop(), Badge = require_Badge(), types$1 = require_types2(), Banner2 = require_Banner(), Bleed = require_Bleed(), Box = require_Box(), Breadcrumbs = require_Breadcrumbs(), BulkActions = require_BulkActions(), Button2 = require_Button(), utils = require_utils(), ButtonGroup = require_ButtonGroup(), CalloutCard = require_CalloutCard(), Card2 = require_Card(), Checkbox = require_Checkbox(), ChoiceList = require_ChoiceList(), Collapsible = require_Collapsible(), ColorPicker = require_ColorPicker(), InlineGrid = require_InlineGrid(), Combobox = require_Combobox(), Connected = require_Connected(), ContextualSaveBar = require_ContextualSaveBar(), DataTable = require_DataTable(), DatePicker = require_DatePicker(), DescriptionList = require_DescriptionList(), Divider = require_Divider(), DropZone = require_DropZone(), EmptySearchResult = require_EmptySearchResult(), EmptyState = require_EmptyState(), EventListener = require_EventListener(), ExceptionList = require_ExceptionList(), Filters = require_Filters(), Focus = require_Focus(), FooterHelp = require_FooterHelp(), Form = require_Form(), FormLayout2 = require_FormLayout(), Frame3 = require_Frame(), Toast = require_Toast(), FullscreenBar = require_FullscreenBar(), Grid = require_Grid(), Icon = require_Icon(), Image = require_Image(), IndexFilters = require_IndexFilters(), useSetIndexFiltersMode = require_useSetIndexFiltersMode(), types$2 = require_types3(), IndexTable = require_IndexTable(), Indicator = require_Indicator(), InlineStack = require_InlineStack(), InlineCode = require_InlineCode(), InlineError = require_InlineError(), KeyboardKey = require_KeyboardKey(), KeypressListener = require_KeypressListener(), Label = require_Label(), Labelled = require_Labelled(), Layout2 = require_Layout(), LegacyCard = require_LegacyCard(), LegacyFilters = require_LegacyFilters(), LegacyStack = require_LegacyStack(), LegacyTabs = require_LegacyTabs(), Link2 = require_Link(), List = require_List3(), Listbox = require_Listbox(), Loading = require_Loading3(), MediaCard = require_MediaCard(), Modal = require_Modal(), Navigation = require_Navigation2(), Item = require_Item10(), OptionList = require_OptionList(), Page2 = require_Page(), PageActions = require_PageActions(), Pagination = require_Pagination(), PolarisTestProvider = require_PolarisTestProvider(), Popover = require_Popover(), PopoverOverlay = require_PopoverOverlay(), Portal = require_Portal(), PortalsManager = require_PortalsManager(), PositionedOverlay = require_PositionedOverlay(), ProgressBar = require_ProgressBar(), RadioButton = require_RadioButton(), RangeSlider = require_RangeSlider(), ResourceItem = require_ResourceItem(), ResourceList = require_ResourceList(), Scrollable = require_Scrollable(), ScrollLock = require_ScrollLock(), Select = require_Select(), SelectAllActions = require_SelectAllActions(), SettingToggle = require_SettingToggle(), Sheet = require_Sheet(), SkeletonBodyText = require_SkeletonBodyText(), SkeletonDisplayText = require_SkeletonDisplayText(), SkeletonPage = require_SkeletonPage(), SkeletonTabs = require_SkeletonTabs(), SkeletonThumbnail = require_SkeletonThumbnail(), Spinner = require_Spinner(), Sticky = require_Sticky(), Tabs = require_Tabs(), Tag = require_Tag(), Text2 = require_Text(), TextContainer = require_TextContainer(), TextField2 = require_TextField(), Thumbnail = require_Thumbnail(), Toast$1 = require_Toast2(), Tooltip = require_Tooltip(), TopBar = require_TopBar(), TrapFocus = require_TrapFocus(), Truncate = require_Truncate(), UnstyledButton = require_UnstyledButton(), utils$1 = require_utils4(), UnstyledLink = require_UnstyledLink(), BlockStack2 = require_BlockStack(), VideoThumbnail = require_VideoThumbnail(), hooks = require_hooks9(), context = require_context15(), context$1 = require_context3(), hooks$1 = require_hooks14(), types$3 = require_types4(), hooks$2 = require_hooks3();
    exports.DEFAULT_LOCALE = configure.DEFAULT_LOCALE;
    exports.SUPPORTED_LOCALES = configure.SUPPORTED_LOCALES;
    Object.defineProperty(exports, "Key", {
      enumerable: !0,
      get: function() {
        return types.Key;
      }
    });
    exports.DATA_ATTRIBUTE = shared.DATA_ATTRIBUTE;
    exports.hexToRgb = colorTransformers.hexToRgb;
    exports.hsbToHex = colorTransformers.hsbToHex;
    exports.hsbToRgb = colorTransformers.hsbToRgb;
    exports.hslToRgb = colorTransformers.hslToRgb;
    exports.rgbString = colorTransformers.rgbString;
    exports.rgbToHex = colorTransformers.rgbToHex;
    exports.rgbToHsb = colorTransformers.rgbToHsb;
    exports.rgbToHsl = colorTransformers.rgbToHsl;
    exports.rgbaString = colorTransformers.rgbaString;
    exports._SECRET_INTERNAL_WITHIN_CONTENT_CONTEXT = withinContentContext.WithinContentContext;
    exports.useEventListener = useEventListener.useEventListener;
    exports.useTheme = useTheme.useTheme;
    exports.useIndexResourceState = useIndexResourceState.useIndexResourceState;
    exports.useBreakpoints = breakpoints.useBreakpoints;
    exports.AppProvider = AppProvider3.AppProvider;
    exports.AccountConnection = AccountConnection.AccountConnection;
    exports.ActionList = ActionList.ActionList;
    exports.ActionMenu = ActionMenu.ActionMenu;
    exports.Autocomplete = Autocomplete.Autocomplete;
    exports.Avatar = Avatar.Avatar;
    exports.Backdrop = Backdrop.Backdrop;
    exports.Badge = Badge.Badge;
    Object.defineProperty(exports, "BadgeProgressValue", {
      enumerable: !0,
      get: function() {
        return types$1.ProgressValue;
      }
    });
    Object.defineProperty(exports, "BadgeStatusValue", {
      enumerable: !0,
      get: function() {
        return types$1.ToneValue;
      }
    });
    exports.Banner = Banner2.Banner;
    exports.Bleed = Bleed.Bleed;
    exports.Box = Box.Box;
    exports.Breadcrumbs = Breadcrumbs.Breadcrumbs;
    exports.UnstableBulkActions = BulkActions.BulkActions;
    exports.Button = Button2.Button;
    exports.buttonFrom = utils.buttonFrom;
    exports.buttonsFrom = utils.buttonsFrom;
    exports.ButtonGroup = ButtonGroup.ButtonGroup;
    exports.CalloutCard = CalloutCard.CalloutCard;
    exports.Card = Card2.Card;
    exports.Checkbox = Checkbox.Checkbox;
    exports.ChoiceList = ChoiceList.ChoiceList;
    exports.Collapsible = Collapsible.Collapsible;
    exports.ColorPicker = ColorPicker.ColorPicker;
    exports.InlineGrid = InlineGrid.InlineGrid;
    exports.Combobox = Combobox.Combobox;
    exports.Connected = Connected.Connected;
    exports.ContextualSaveBar = ContextualSaveBar.ContextualSaveBar;
    exports.DataTable = DataTable.DataTable;
    exports.DatePicker = DatePicker.DatePicker;
    exports.DescriptionList = DescriptionList.DescriptionList;
    exports.Divider = Divider.Divider;
    exports.DropZone = DropZone.DropZone;
    exports.EmptySearchResult = EmptySearchResult.EmptySearchResult;
    exports.EmptyState = EmptyState.EmptyState;
    exports.EventListener = EventListener.EventListener;
    exports.ExceptionList = ExceptionList.ExceptionList;
    exports.Filters = Filters.Filters;
    exports.Focus = Focus.Focus;
    exports.FooterHelp = FooterHelp.FooterHelp;
    exports.Form = Form.Form;
    exports.FormLayout = FormLayout2.FormLayout;
    exports.Frame = Frame3.Frame;
    exports.DEFAULT_TOAST_DURATION = Toast.DEFAULT_TOAST_DURATION;
    exports.DEFAULT_TOAST_DURATION_WITH_ACTION = Toast.DEFAULT_TOAST_DURATION_WITH_ACTION;
    exports.FullscreenBar = FullscreenBar.FullscreenBar;
    exports.Grid = Grid.Grid;
    exports.Icon = Icon.Icon;
    exports.Image = Image.Image;
    exports.IndexFilters = IndexFilters.IndexFilters;
    exports.useSetIndexFiltersMode = useSetIndexFiltersMode.useSetIndexFiltersMode;
    Object.defineProperty(exports, "IndexFiltersMode", {
      enumerable: !0,
      get: function() {
        return types$2.IndexFiltersMode;
      }
    });
    exports.IndexTable = IndexTable.IndexTable;
    exports.Indicator = Indicator.Indicator;
    exports.InlineStack = InlineStack.InlineStack;
    exports.InlineCode = InlineCode.InlineCode;
    exports.InlineError = InlineError.InlineError;
    exports.errorTextID = InlineError.errorTextID;
    exports.KeyboardKey = KeyboardKey.KeyboardKey;
    exports.KeypressListener = KeypressListener.KeypressListener;
    exports.Label = Label.Label;
    exports.labelID = Label.labelID;
    exports.Labelled = Labelled.Labelled;
    exports.Layout = Layout2.Layout;
    exports.LegacyCard = LegacyCard.LegacyCard;
    exports.LegacyFilters = LegacyFilters.LegacyFilters;
    exports.LegacyStack = LegacyStack.LegacyStack;
    exports.LegacyTabs = LegacyTabs.LegacyTabs;
    exports.Link = Link2.Link;
    exports.List = List.List;
    Object.defineProperty(exports, "AutoSelection", {
      enumerable: !0,
      get: function() {
        return Listbox.AutoSelection;
      }
    });
    exports.Listbox = Listbox.Listbox;
    exports.Loading = Loading.Loading;
    exports.MediaCard = MediaCard.MediaCard;
    exports.Modal = Modal.Modal;
    exports.Navigation = Navigation.Navigation;
    exports.isNavigationItemActive = Item.isNavigationItemActive;
    exports.OptionList = OptionList.OptionList;
    exports.Page = Page2.Page;
    exports.PageActions = PageActions.PageActions;
    exports.Pagination = Pagination.Pagination;
    exports.PolarisTestProvider = PolarisTestProvider.PolarisTestProvider;
    exports.Popover = Popover.Popover;
    Object.defineProperty(exports, "PopoverCloseSource", {
      enumerable: !0,
      get: function() {
        return PopoverOverlay.PopoverCloseSource;
      }
    });
    exports.Portal = Portal.Portal;
    exports.PortalsManager = PortalsManager.PortalsManager;
    exports.PositionedOverlay = PositionedOverlay.PositionedOverlay;
    exports.ProgressBar = ProgressBar.ProgressBar;
    exports.RadioButton = RadioButton.RadioButton;
    exports.RangeSlider = RangeSlider.RangeSlider;
    exports.ResourceItem = ResourceItem.ResourceItem;
    exports.ResourceList = ResourceList.ResourceList;
    exports.Scrollable = Scrollable.Scrollable;
    exports.ScrollLock = ScrollLock.ScrollLock;
    exports.Select = Select.Select;
    exports.SelectAllActions = SelectAllActions.SelectAllActions;
    exports.SettingToggle = SettingToggle.SettingToggle;
    exports.Sheet = Sheet.Sheet;
    exports.SkeletonBodyText = SkeletonBodyText.SkeletonBodyText;
    exports.SkeletonDisplayText = SkeletonDisplayText.SkeletonDisplayText;
    exports.SkeletonPage = SkeletonPage.SkeletonPage;
    exports.SkeletonTabs = SkeletonTabs.SkeletonTabs;
    exports.SkeletonThumbnail = SkeletonThumbnail.SkeletonThumbnail;
    exports.Spinner = Spinner.Spinner;
    exports.Sticky = Sticky.Sticky;
    exports.Tabs = Tabs.Tabs;
    exports.Tag = Tag.Tag;
    exports.Text = Text2.Text;
    exports.TextContainer = TextContainer.TextContainer;
    exports.TextField = TextField2.TextField;
    exports.Thumbnail = Thumbnail.Thumbnail;
    exports.Toast = Toast$1.Toast;
    exports.Tooltip = Tooltip.Tooltip;
    exports.TopBar = TopBar.TopBar;
    exports.TrapFocus = TrapFocus.TrapFocus;
    exports.Truncate = Truncate.Truncate;
    exports.UnstyledButton = UnstyledButton.UnstyledButton;
    exports.unstyledButtonFrom = utils$1.unstyledButtonFrom;
    exports.UnstyledLink = UnstyledLink.UnstyledLink;
    exports.BlockStack = BlockStack2.BlockStack;
    exports.VideoThumbnail = VideoThumbnail.VideoThumbnail;
    exports.useFrame = hooks.useFrame;
    exports.FrameContext = context.FrameContext;
    exports._SECRET_INTERNAL_SCROLL_LOCK_MANAGER_CONTEXT = context$1.ScrollLockManagerContext;
    exports.useIndexTableContainerScroll = hooks$1.useContainerScroll;
    exports.useIndexTableRowHovered = hooks$1.useRowHovered;
    exports.useIndexTableRowSelected = hooks$1.useRowSelected;
    exports.INDEX_TABLE_SELECT_ALL_ITEMS = types$3.SELECT_ALL_ITEMS;
    Object.defineProperty(exports, "IndexTableSelectionType", {
      enumerable: !0,
      get: function() {
        return types$3.SelectionType;
      }
    });
    exports.useEphemeralPresenceManager = hooks$2.useReadOnlyEphemeralPresenceManager;
  }
});

// <stdin>
var stdin_exports = {};
__export(stdin_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  future: () => future,
  mode: () => mode,
  publicPath: () => publicPath,
  routes: () => routes
});
module.exports = __toCommonJS(stdin_exports);

// node_modules/@remix-run/dev/dist/config/defaults/entry.server.node.tsx
var entry_server_node_exports = {};
__export(entry_server_node_exports, {
  default: () => handleRequest
});
var import_node_stream = require("node:stream"), import_node = require("@remix-run/node"), import_react = require("@remix-run/react"), import_isbot = __toESM(require("isbot")), import_server = require("react-dom/server"), import_jsx_runtime = require("react/jsx-runtime"), ABORT_DELAY = 5e3;
function handleRequest(request, responseStatusCode, responseHeaders, remixContext, loadContext) {
  return (0, import_isbot.default)(request.headers.get("user-agent")) ? handleBotRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  ) : handleBrowserRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  );
}
function handleBotRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_react.RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        onAllReady() {
          shellRendered = !0;
          let body = new import_node_stream.PassThrough(), stream = (0, import_node.createReadableStreamFromReadable)(body);
          responseHeaders.set("Content-Type", "text/html"), resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500, shellRendered && console.error(error);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
function handleBrowserRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_react.RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        onShellReady() {
          shellRendered = !0;
          let body = new import_node_stream.PassThrough(), stream = (0, import_node.createReadableStreamFromReadable)(body);
          responseHeaders.set("Content-Type", "text/html"), resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500, shellRendered && console.error(error);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}

// app/root.tsx
var root_exports = {};
__export(root_exports, {
  default: () => App,
  loader: () => loader
});
var import_node2 = require("@remix-run/node"), import_react2 = require("@remix-run/react"), import_react3 = require("@shopify/shopify-app-remix/react"), import_server2 = require("@shopify/shopify-app-remix/server"), import_polaris = __toESM(require_cjs()), import_jsx_runtime2 = require("react/jsx-runtime"), loader = async ({ request }) => (await import_server2.authenticate.admin(request), (0, import_node2.json)({ apiKey: process.env.SHOPIFY_API_KEY || "" }));
function App() {
  let { apiKey } = (0, import_react2.useLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("html", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("meta", { charSet: "utf-8" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("meta", { name: "viewport", content: "width=device-width,initial-scale=1" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Meta, {}),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Links, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react3.AppProvider, { isEmbeddedApp: !0, apiKey, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_polaris.Frame, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Outlet, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.ScrollRestoration, {}),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Scripts, {})
    ] })
  ] });
}

// app/routes/_index.tsx
var index_exports = {};
__export(index_exports, {
  default: () => Index,
  loader: () => loader2
});
var import_node3 = require("@remix-run/node");

// app/components/OrderTracker.tsx
var import_react4 = require("react"), import_polaris2 = __toESM(require_cjs()), import_jsx_runtime3 = require("react/jsx-runtime");
function OrderTracker() {
  let [orderNumber, setOrderNumber] = (0, import_react4.useState)(""), [email, setEmail] = (0, import_react4.useState)(""), [loading, setLoading] = (0, import_react4.useState)(!1), [error, setError] = (0, import_react4.useState)(""), [orderStatus, setOrderStatus] = (0, import_react4.useState)(null), handleSubmit = async () => {
    setLoading(!0), setError("");
    try {
      let response = await fetch("/api/orders", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ orderNumber, email })
      }), data = await response.json();
      if (!response.ok)
        throw new Error(data.message || "Failed to fetch order details");
      setOrderStatus(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(!1);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Page, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Card, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris2.BlockStack, { gap: "4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Text, { variant: "headingLg", as: "h2", children: "Track Your Order" }),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris2.FormLayout, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        import_polaris2.TextField,
        {
          label: "Order Number",
          value: orderNumber,
          onChange: setOrderNumber,
          autoComplete: "off",
          required: !0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        import_polaris2.TextField,
        {
          label: "Email",
          type: "email",
          value: email,
          onChange: setEmail,
          autoComplete: "email",
          required: !0
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Button, { primary: !0, onClick: handleSubmit, loading, children: "Track Order" })
    ] }),
    error && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Banner, { status: "critical", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { children: error }) }),
    orderStatus && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris2.BlockStack, { gap: "4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Text, { variant: "headingMd", children: "Order Status" }),
      orderStatus.fulfillment_status === "FULFILLED" ? /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris2.BlockStack, { gap: "2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Banner, { status: "success", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { children: "Your order has been shipped!" }) }),
        orderStatus.tracking_number && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_polaris2.Text, { children: [
          "Tracking Number: ",
          orderStatus.tracking_number
        ] }),
        orderStatus.tracking_url && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Link, { url: orderStatus.tracking_url, external: !0, children: "Track Package" })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_polaris2.Banner, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { children: "Your order is being processed and hasn't been shipped yet." }) })
    ] })
  ] }) }) }) }) });
}

// app/routes/_index.tsx
var import_jsx_runtime4 = require("react/jsx-runtime"), loader2 = async ({ request }) => (0, import_node3.json)({});
function Index() {
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(OrderTracker, {});
}

// app/routes/app.tsx
var app_exports = {};
__export(app_exports, {
  default: () => App2,
  loader: () => loader3
});
var import_node4 = require("@remix-run/node"), import_react5 = require("@remix-run/react"), import_react6 = require("@shopify/shopify-app-remix/react"), import_server3 = require("@shopify/shopify-app-remix/server"), import_polaris3 = __toESM(require_cjs()), import_jsx_runtime5 = require("react/jsx-runtime"), loader3 = async ({ request }) => (await import_server3.authenticate.admin(request), (0, import_node4.json)({ apiKey: process.env.SHOPIFY_API_KEY || "" }));
function App2() {
  let { apiKey } = (0, import_react5.useLoaderData)();
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("html", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("meta", { charSet: "utf-8" }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("meta", { name: "viewport", content: "width=device-width,initial-scale=1" }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react5.Meta, {}),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react5.Links, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react6.AppProvider, { isEmbeddedApp: !0, apiKey, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_polaris3.Frame, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react5.Outlet, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react5.ScrollRestoration, {}),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react5.Scripts, {})
    ] })
  ] });
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = { entry: { module: "/build/entry.client-C6XDNB53.js", imports: ["/build/_shared/chunk-75R42CZL.js", "/build/_shared/chunk-IA5SELQI.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-QDDBA4NB.js", imports: ["/build/_shared/chunk-27VV7BRP.js", "/build/_shared/chunk-IPTBUBXZ.js"], hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/_index": { id: "routes/_index", parentId: "root", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_index-JNQIXXZ2.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 }, "routes/app": { id: "routes/app", parentId: "root", path: "app", index: void 0, caseSensitive: void 0, module: "/build/routes/app-2G4YHRZ5.js", imports: void 0, hasAction: !1, hasLoader: !0, hasClientAction: !1, hasClientLoader: !1, hasErrorBoundary: !1 } }, version: "86d1e732", hmr: void 0, url: "/build/manifest-86D1E732.js" };

// server-entry-module:@remix-run/dev/server-build
var mode = "production", assetsBuildDirectory = "public/build", future = { v3_fetcherPersist: !1, v3_relativeSplatPath: !1 }, publicPath = "/build/", entry = { module: entry_server_node_exports }, routes = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/_index": {
    id: "routes/_index",
    parentId: "root",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: index_exports
  },
  "routes/app": {
    id: "routes/app",
    parentId: "root",
    path: "app",
    index: void 0,
    caseSensitive: void 0,
    module: app_exports
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assets,
  assetsBuildDirectory,
  entry,
  future,
  mode,
  publicPath,
  routes
});
